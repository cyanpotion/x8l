/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 05 20:54:50 GMT 2022
 */

package com.xenoamess.x8l.dealers;

import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.time.ZoneId;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;

import com.xenoamess.x8l.AbstractTreeNode;
import com.xenoamess.x8l.CommentNode;
import com.xenoamess.x8l.ContentNode;
import com.xenoamess.x8l.RootNode;
import com.xenoamess.x8l.TextNode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.Test;
import org.junit.runner.RunWith;

import static org.evosuite.runtime.EvoAssertions.verifyException;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotSame;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class XmlDealer_ESTest extends XmlDealer_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        Set<String> set0 = ZoneId.getAvailableZoneIds();
        LinkedList<String> linkedList0 = new LinkedList<String>(set0);
        List<String> list0 = XmlDealer.filterIllegalChars(linkedList0);
        byte[] byteArray0 = new byte[7];
        byteArray0[0] = (byte) (-66);
        byteArray0[1] = (byte) (-91);
        byteArray0[2] = (byte) 10;
        byteArray0[3] = (byte) (-37);
        byteArray0[4] = (byte) 2;
        byteArray0[5] = (byte) (-111);
        byteArray0[6] = (byte) (-8);
        FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
        // Undeclared exception!
        XmlDealer.filterIllegalChars(list0);
    }

    @Test(timeout = 4000)
    public void test01() throws Throwable {
        XmlDealer xmlDealer0 = XmlDealer.INSTANCE;
        String string0 = xmlDealer0.toString();
        assertEquals("com.xenoamess.x8l.dealers.XmlDealer", string0);

        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        byte[] byteArray0 = new byte[5];
        byteArray0[0] = (byte) 50;
        Reader reader0 = null;
        ContentNode contentNode0 = null;
        RootNode rootNode0 = new RootNode((ContentNode) null);
        rootNode0.copy();
        // Undeclared exception!
        try {
            XmlDealer.ifNameless((ContentNode) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.xenoamess.x8l.dealers.XmlDealer", e);
        }
    }

    @Test(timeout = 4000)
    public void test02() throws Throwable {
        XmlDealer xmlDealer0 = XmlDealer.INSTANCE;
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\" could not be added to the element \"");
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
        MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
        RootNode rootNode0 = new RootNode((ContentNode) null);
        XmlDealer.ifNameless(rootNode0);
        TextNode textNode0 = new TextNode((ContentNode) null, "xmlns:");
        mockPrintWriter2.print(0.0);
        textNode0.copy();
        xmlDealer0.naiveWrite(mockPrintWriter2, textNode0);
        xmlDealer0.naiveWrite(mockPrintWriter0, textNode0);
        String string0 = xmlDealer0.toString();
        assertEquals("com.xenoamess.x8l.dealers.XmlDealer", string0);
    }

    @Test(timeout = 4000)
    public void test03() throws Throwable {
        XmlDealer xmlDealer0 = XmlDealer.INSTANCE;
        CommentNode commentNode0 = new CommentNode((ContentNode) null, 436, (String) null);
        // Undeclared exception!
        try {
            xmlDealer0.INSTANCE.naiveWrite((Writer) null, commentNode0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.xenoamess.x8l.dealers.XmlDealer", e);
        }
    }

    @Test(timeout = 4000)
    public void test04() throws Throwable {
        XmlDealer xmlDealer0 = XmlDealer.INSTANCE;
        xmlDealer0.toString();
        ContentNode contentNode0 = null;
        ContentNode contentNode1 = new ContentNode((ContentNode) null);
        RootNode rootNode0 = new RootNode(contentNode1);
        RootNode rootNode1 = rootNode0.copy();
        contentNode1.getContentNodesFromChildrenThatNameIs("");
        List<String> list0 = rootNode1.asStringList();
        rootNode1.getContentNodesFromChildrenThatNameIs("xmlns:", 2676);
        XmlDealer.filterIllegalChars(list0);
        rootNode0.addAttribute("write");
        rootNode1.trimForce();
        xmlDealer0.toString();
        XmlDealer.ifNameless(rootNode1);
        contentNode1.setParent((ContentNode) null);
        xmlDealer0.toString();
        XmlDealer.ifSingleRootNode(contentNode1);
        // Undeclared exception!
        try {
            XmlDealer.ifNameless((ContentNode) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.xenoamess.x8l.dealers.XmlDealer", e);
        }
    }

    @Test(timeout = 4000)
    public void test05() throws Throwable {
        XmlDealer xmlDealer0 = XmlDealer.INSTANCE;
        MockFile mockFile0 = new MockFile("xmlns:");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        ContentNode contentNode0 = new ContentNode((ContentNode) null, 91);
        xmlDealer0.write((Writer) mockPrintWriter0, contentNode0);
        String string0 = xmlDealer0.toString();
        assertEquals("com.xenoamess.x8l.dealers.XmlDealer", string0);

        // Undeclared exception!
        try {
            XmlDealer.filterIllegalChars((List<String>) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test06() throws Throwable {
        XmlDealer xmlDealer0 = XmlDealer.INSTANCE;
        RootNode rootNode0 = new RootNode((ContentNode) null, (-764));
        RootNode rootNode1 = new RootNode(rootNode0, 0);
        rootNode1.copy(rootNode0);
        List<String> list0 = rootNode0.getAttributeSegments();
        XmlDealer.filterIllegalChars(list0);
        StringReader stringReader0 = new StringReader(" ");
        CommentNode commentNode0 = new CommentNode(rootNode0, "xmlns");
        xmlDealer0.INSTANCE.read((Reader) stringReader0, commentNode0);
        StringWriter stringWriter0 = new StringWriter(0);
        rootNode0.write((Writer) stringWriter0, (LanguageDealer) xmlDealer0);
        ContentNode contentNode0 = new ContentNode(rootNode0, 0);
        contentNode0.write((Writer) stringWriter0, (LanguageDealer) xmlDealer0);
        contentNode0.addAttributeFromTranscodedExpression("");
        ContentNode contentNode1 = XmlDealer.ifSingleRootNode(rootNode0);
        assertNull(contentNode1);
    }

    @Test(timeout = 4000)
    public void test07() throws Throwable {
        XmlDealer xmlDealer0 = XmlDealer.INSTANCE;
        DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
        CommentNode commentNode0 = new CommentNode((ContentNode) null, "/>");
        CommentNode commentNode1 = commentNode0.copy();
        xmlDealer0.naiveWrite(mockPrintWriter0, commentNode1);
        assertEquals("/>", commentNode1.getTextContent());
    }

    @Test(timeout = 4000)
    public void test08() throws Throwable {
        XmlDealer xmlDealer0 = XmlDealer.INSTANCE;
        RootNode rootNode0 = new RootNode((ContentNode) null, (-530));
        rootNode0.addAttribute("", "");
        rootNode0.format((-530));
        XmlDealer.ifNameless(rootNode0);
        xmlDealer0.toString();
        XmlDealer.ifSingleRootNode(rootNode0);
        StringReader stringReader0 = new StringReader("com.xenoamess.x8l.dealers.XmlDealer");
        try {
            rootNode0.read((Reader) stringReader0, (LanguageDealer) xmlDealer0);
            fail("Expecting exception: IOException");

        } catch (IOException e) {
            //
            // org.evosuite.runtime.mock.java.lang.MockThrowable: Error on line 1 of document  : Content is not allowed in prolog.
            //
            verifyException("com.xenoamess.x8l.dealers.XmlDealer$1", e);
        }
    }

    @Test(timeout = 4000)
    public void test09() throws Throwable {
        XmlDealer xmlDealer0 = XmlDealer.INSTANCE;
        MockFile mockFile0 = new MockFile("<!--");
        FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
        ContentNode contentNode0 = new ContentNode((ContentNode) null);
        mockFile0.getAbsoluteFile();
        XmlDealer.ifSingleRootNode(contentNode0);
        RootNode rootNode0 = new RootNode((ContentNode) null);
        xmlDealer0.naiveWrite(mockPrintWriter0, rootNode0);
        LinkedList<String> linkedList0 = new LinkedList<String>();
        mockFileOutputStream0.flush();
        linkedList0.add("$-n|[");
        XmlDealer.filterIllegalChars(linkedList0);
        xmlDealer0.naiveWrite(mockPrintWriter0, rootNode0);
        xmlDealer0.toString();
        // Undeclared exception!
        try {
            xmlDealer0.naiveWrite((Writer) null, rootNode0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.xenoamess.x8l.dealers.XmlDealer", e);
        }
    }

    @Test(timeout = 4000)
    public void test10() throws Throwable {
        ContentNode contentNode0 = new ContentNode((ContentNode) null);
        contentNode0.addAttributeFromTranscodedExpression(" ");
        XmlDealer xmlDealer0 = XmlDealer.INSTANCE;
        StringWriter stringWriter0 = new StringWriter();
        ContentNode contentNode1 = XmlDealer.ifSingleRootNode(contentNode0);
        assertNull(contentNode1);

        StringReader stringReader0 = new StringReader("");
        CommentNode commentNode0 = new CommentNode((ContentNode) null, (-2460), " ");
        boolean boolean0 = xmlDealer0.read((Reader) stringReader0, commentNode0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        XmlDealer xmlDealer0 = XmlDealer.INSTANCE;
        MockFile mockFile0 = new MockFile((File) null, "xmlns:");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        RootNode rootNode0 = new RootNode((ContentNode) null, (-530));
        CommentNode commentNode0 = new CommentNode(rootNode0, 0, "");
        rootNode0.addAttribute("_nameless", "_nameless");
        xmlDealer0.naiveWrite(mockPrintWriter0, rootNode0);
        rootNode0.format(0);
        xmlDealer0.naiveWrite(mockPrintWriter0, rootNode0);
        boolean boolean0 = XmlDealer.ifNameless(rootNode0);
        assertTrue(boolean0);

        ContentNode contentNode0 = XmlDealer.ifSingleRootNode(rootNode0);
        assertNull(contentNode0);

        List<String> list0 = rootNode0.asStringList();
        List<String> list1 = XmlDealer.filterIllegalChars(list0);
        assertNotSame(list1, list0);
        assertTrue(list1.equals((Object) list0));
    }

    @Test(timeout = 4000)
    public void test12() throws Throwable {
        XmlDealer xmlDealer0 = XmlDealer.INSTANCE;
        ContentNode contentNode0 = new ContentNode((ContentNode) null);
        StringReader stringReader0 = new StringReader("_nameless");
        TextNode textNode0 = new TextNode(contentNode0, "");
        xmlDealer0.read((Reader) stringReader0, textNode0);
        RootNode rootNode0 = new RootNode(contentNode0);
        rootNode0.read((Reader) stringReader0);
        ContentNode contentNode1 = XmlDealer.ifSingleRootNode(rootNode0);
        assertNull(contentNode1);
    }

    @Test(timeout = 4000)
    public void test13() throws Throwable {
        XmlDealer xmlDealer0 = XmlDealer.INSTANCE;
        // Undeclared exception!
        try {
            xmlDealer0.naiveWrite((Writer) null, (AbstractTreeNode) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.xenoamess.x8l.dealers.XmlDealer", e);
        }
    }

    @Test(timeout = 4000)
    public void test14() throws Throwable {
        XmlDealer xmlDealer0 = XmlDealer.INSTANCE;
        ContentNode contentNode0 = new ContentNode((ContentNode) null);
        ContentNode contentNode1 = XmlDealer.ifSingleRootNode(contentNode0);
        assertNull(contentNode1);
    }

    @Test(timeout = 4000)
    public void test15() throws Throwable {
        // Undeclared exception!
        try {
            XmlDealer.ifSingleRootNode((ContentNode) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.xenoamess.x8l.dealers.XmlDealer", e);
        }
    }

    @Test(timeout = 4000)
    public void test16() throws Throwable {
        XmlDealer xmlDealer0 = XmlDealer.INSTANCE;
        MockFile mockFile0 = new MockFile("xmlns:");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        ContentNode contentNode0 = new ContentNode((ContentNode) null, 93);
        boolean boolean0 = xmlDealer0.write((Writer) mockPrintWriter0, contentNode0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test17() throws Throwable {
        RootNode rootNode0 = new RootNode((ContentNode) null, 932);
        boolean boolean0 = XmlDealer.ifNameless(rootNode0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test18() throws Throwable {
        ContentNode contentNode0 = new ContentNode((ContentNode) null);
        contentNode0.addAttributeFromTranscodedExpression(" ");
        XmlDealer xmlDealer0 = XmlDealer.INSTANCE;
        StringWriter stringWriter0 = new StringWriter();
        contentNode0.addAttributeFromTranscodedExpression("fog`}H#*(.6u");
        RootNode rootNode0 = new RootNode(contentNode0);
        List<String> list0 = contentNode0.getAttributesKeyList();
        XmlDealer.filterIllegalChars(list0);
        xmlDealer0.naiveWrite(stringWriter0, contentNode0);
        assertEquals("<  fog`}H#*(.6u=\"\"><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n</ >", stringWriter0.toString());
    }

    @Test(timeout = 4000)
    public void test19() throws Throwable {
        List<String> list0 = null;
        // Undeclared exception!
        try {
            XmlDealer.filterIllegalChars((List<String>) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test20() throws Throwable {
        XmlDealer xmlDealer0 = XmlDealer.INSTANCE;
        MockFile mockFile0 = new MockFile((File) null, "xmlns:");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        RootNode rootNode0 = new RootNode((ContentNode) null, (-530));
        CommentNode commentNode0 = new CommentNode(rootNode0, 0, "");
        rootNode0.addAttribute("_nameless", "_nameless");
        xmlDealer0.naiveWrite(mockPrintWriter0, rootNode0);
        rootNode0.format(0);
        xmlDealer0.naiveWrite(mockPrintWriter0, rootNode0);
        XmlDealer.ifSingleRootNode(rootNode0);
        List<String> list0 = rootNode0.asStringList();
        List<String> list1 = XmlDealer.filterIllegalChars(list0);
        assertTrue(list1.equals((Object) list0));
    }

    @Test(timeout = 4000)
    public void test21() throws Throwable {
        XmlDealer xmlDealer0 = XmlDealer.INSTANCE;
        StringReader stringReader0 = new StringReader("xmlns");
        RootNode rootNode0 = new RootNode((ContentNode) null, 13);
        ContentNode contentNode0 = new ContentNode(rootNode0);
        try {
            xmlDealer0.read((Reader) stringReader0, contentNode0);
            fail("Expecting exception: IOException");

        } catch (IOException e) {
            //
            // org.evosuite.runtime.mock.java.lang.MockThrowable: Error on line 1 of document  : Content is not allowed in prolog.
            //
            verifyException("com.xenoamess.x8l.dealers.XmlDealer$2", e);
        }
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
        XmlDealer xmlDealer0 = XmlDealer.INSTANCE;
        RootNode rootNode0 = new RootNode((ContentNode) null);
        XmlDealer.ifSingleRootNode(rootNode0);
        StringReader stringReader0 = new StringReader("xmlns");
        try {
            rootNode0.read((Reader) stringReader0, (LanguageDealer) xmlDealer0);
            fail("Expecting exception: IOException");

        } catch (IOException e) {
            //
            // org.evosuite.runtime.mock.java.lang.MockThrowable: Error on line 1 of document  : Content is not allowed in prolog.
            //
            verifyException("com.xenoamess.x8l.dealers.XmlDealer$1", e);
        }
    }

    @Test(timeout = 4000)
    public void test23() throws Throwable {
        XmlDealer xmlDealer0 = XmlDealer.INSTANCE;
        RootNode rootNode0 = new RootNode((ContentNode) null, (-764));
        RootNode rootNode1 = new RootNode(rootNode0, 0);
        rootNode1.copy(rootNode0);
        StringReader stringReader0 = new StringReader(" ");
        CommentNode commentNode0 = new CommentNode(rootNode0, "xmlns");
        xmlDealer0.INSTANCE.read((Reader) stringReader0, commentNode0);
        StringWriter stringWriter0 = new StringWriter(0);
        rootNode0.write((Writer) stringWriter0, (LanguageDealer) xmlDealer0);
        ContentNode contentNode0 = new ContentNode(rootNode0, 0);
        contentNode0.write((Writer) stringWriter0, (LanguageDealer) xmlDealer0);
        contentNode0.addAttributeFromTranscodedExpression("");
        ContentNode contentNode1 = XmlDealer.ifSingleRootNode(rootNode0);
        assertNull(contentNode1);
    }

    @Test(timeout = 4000)
    public void test24() throws Throwable {
        XmlDealer xmlDealer0 = XmlDealer.INSTANCE;
        StringReader stringReader0 = new StringReader("_nameless");
        TextNode textNode0 = new TextNode((ContentNode) null, 111, "_nameless");
        boolean boolean0 = xmlDealer0.read((Reader) stringReader0, textNode0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test25() throws Throwable {
        ContentNode contentNode0 = new ContentNode((ContentNode) null);
        XmlDealer xmlDealer0 = XmlDealer.INSTANCE;
        StringReader stringReader0 = new StringReader("TJaZm");
        CommentNode commentNode0 = new CommentNode(contentNode0, "xmlns:");
        boolean boolean0 = xmlDealer0.read((Reader) stringReader0, commentNode0);
        assertFalse(boolean0);

        boolean boolean1 = XmlDealer.ifNameless(contentNode0);
        assertFalse(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test26() throws Throwable {
        XmlDealer xmlDealer0 = XmlDealer.INSTANCE;
        StringReader stringReader0 = new StringReader("xmlns");
        ContentNode contentNode0 = null;
        RootNode rootNode0 = new RootNode((ContentNode) null, 31);
        ContentNode contentNode1 = new ContentNode(rootNode0);
        try {
            xmlDealer0.read((Reader) stringReader0, contentNode1);
            fail("Expecting exception: IOException");

        } catch (IOException e) {
            //
            // org.evosuite.runtime.mock.java.lang.MockThrowable: Error on line 1 of document  : Content is not allowed in prolog.
            //
            verifyException("com.xenoamess.x8l.dealers.XmlDealer$2", e);
        }
    }

    @Test(timeout = 4000)
    public void test27() throws Throwable {
        XmlDealer xmlDealer0 = XmlDealer.INSTANCE;
        RootNode rootNode0 = new RootNode((ContentNode) null);
        StringReader stringReader0 = new StringReader("_nameless");
        TextNode textNode0 = new TextNode((ContentNode) null, 87, "xmlns:");
        xmlDealer0.read((Reader) stringReader0, textNode0);
        RootNode rootNode1 = new RootNode(rootNode0);
        rootNode1.read((Reader) stringReader0);
        XmlDealer.ifSingleRootNode(rootNode1);
        // Undeclared exception!
        try {
            xmlDealer0.naiveWrite((Writer) null, (AbstractTreeNode) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.xenoamess.x8l.dealers.XmlDealer", e);
        }
    }

    @Test(timeout = 4000)
    public void test28() throws Throwable {
        ContentNode contentNode0 = new ContentNode((ContentNode) null);
        contentNode0.addAttributeFromTranscodedExpression(" ");
        XmlDealer xmlDealer0 = XmlDealer.INSTANCE;
        StringWriter stringWriter0 = new StringWriter();
        contentNode0.addAttributeFromTranscodedExpression("_nameless");
        xmlDealer0.naiveWrite(stringWriter0, contentNode0);
        assertEquals("<  _nameless=\"\"/>", stringWriter0.toString());
    }

    @Test(timeout = 4000)
    public void test29() throws Throwable {
        XmlDealer xmlDealer0 = XmlDealer.INSTANCE;
        RootNode rootNode0 = new RootNode((ContentNode) null, 0);
        StringReader stringReader0 = new StringReader("");
        try {
            xmlDealer0.INSTANCE.read((Reader) stringReader0, rootNode0);
            fail("Expecting exception: IOException");

        } catch (IOException e) {
            //
            // org.evosuite.runtime.mock.java.lang.MockThrowable: Error on line 1 of document  : Premature end of file.
            //
            verifyException("com.xenoamess.x8l.dealers.XmlDealer$1", e);
        }
    }

    @Test(timeout = 4000)
    public void test30() throws Throwable {
        LinkedList<String> linkedList0 = new LinkedList<String>();
        linkedList0.add("$-n|[");
        List<String> list0 = XmlDealer.filterIllegalChars(linkedList0);
        assertFalse(list0.contains("$-n|["));
    }
}
