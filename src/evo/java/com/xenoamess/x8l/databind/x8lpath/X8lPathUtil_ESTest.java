/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 05 20:55:34 GMT 2022
 */

package com.xenoamess.x8l.databind.x8lpath;

import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.List;

import com.xenoamess.x8l.AbstractTreeNode;
import com.xenoamess.x8l.CommentNode;
import com.xenoamess.x8l.ContentNode;
import com.xenoamess.x8l.RootNode;
import com.xenoamess.x8l.TextNode;
import com.xenoamess.x8l.databind.X8lDataBeanFieldScheme;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import static org.evosuite.runtime.EvoAssertions.verifyException;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNotSame;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class X8lPathUtil_ESTest extends X8lPathUtil_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        LinkedList<TextNode> linkedList0 = new LinkedList<TextNode>();
        assertNotNull(linkedList0);
        assertEquals(0, linkedList0.size());

        TextNode textNode0 = new TextNode((ContentNode) null, "");
        assertNotNull(textNode0);
        assertEquals("", textNode0.getTextContent());

        boolean boolean0 = linkedList0.add(textNode0);
        assertEquals(1, linkedList0.size());
        assertEquals("", textNode0.getTextContent());
        assertTrue(boolean0);
        assertTrue(linkedList0.contains(textNode0));

        // Undeclared exception!
        try {
            X8lPathUtil.subList((List<TextNode>) linkedList0, (-406), (-406));
            fail("Expecting exception: IndexOutOfBoundsException");

        } catch (IndexOutOfBoundsException e) {
            //
            // fromIndex = -406
            //
            verifyException("java.util.SubList", e);
        }
    }

    @Test(timeout = 4000)
    public void test01() throws Throwable {
        LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
        assertNotNull(linkedList0);
        assertEquals(0, linkedList0.size());

        Integer integer0 = new Integer((-1811));
        assertNotNull(integer0);
        assertEquals((-1811), (int) integer0);

        boolean boolean0 = linkedList0.offer(integer0);
        assertEquals(1, linkedList0.size());
        assertTrue(boolean0);
        assertTrue(linkedList0.contains(integer0));

        boolean boolean1 = linkedList0.add(integer0);
        assertTrue(boolean1 == boolean0);
        assertEquals(2, linkedList0.size());
        assertTrue(boolean1);
        assertTrue(linkedList0.contains(integer0));

        List<Integer> list0 = X8lPathUtil.subList((List<Integer>) linkedList0, 2, 2);
        assertNotNull(list0);
        assertEquals(2, linkedList0.size());
        assertTrue(list0.isEmpty());
        assertEquals(0, list0.size());
        assertTrue(linkedList0.contains(integer0));
        assertFalse(linkedList0.contains(2));
        assertFalse(list0.contains(2));
    }

    @Test(timeout = 4000)
    public void test02() throws Throwable {
        RootNode rootNode0 = new RootNode((ContentNode) null, 37);
        assertNotNull(rootNode0);
        assertEquals("", rootNode0.getName());

        RootNode rootNode1 = new RootNode(rootNode0);
        assertNotNull(rootNode1);
        assertFalse(rootNode1.equals((Object) rootNode0));
        assertEquals("", rootNode0.getName());
        assertEquals("", rootNode1.getName());

        rootNode1.copy(rootNode0);
        assertFalse(rootNode0.equals((Object) rootNode1));
        assertFalse(rootNode1.equals((Object) rootNode0));
        assertEquals("", rootNode0.getName());
        assertEquals("", rootNode1.getName());
        assertNotSame(rootNode0, rootNode1);
        assertNotSame(rootNode1, rootNode0);

        List<AbstractTreeNode> list0 = rootNode0.getChildren();
        assertNotNull(list0);
        assertFalse(rootNode0.equals((Object) rootNode1));
        assertEquals("", rootNode0.getName());
        assertEquals(1, list0.size());
        assertFalse(list0.isEmpty());
        assertNotSame(rootNode0, rootNode1);

        List<Object> list1 = X8lPathUtil.fetch(list0, "");
        assertNotNull(list1);
        assertFalse(rootNode0.equals((Object) rootNode1));
        assertEquals("", rootNode0.getName());
        assertEquals(1, list0.size());
        assertFalse(list0.isEmpty());
        assertEquals(1, list1.size());
        assertFalse(list1.isEmpty());
        assertNotSame(rootNode0, rootNode1);
        assertFalse(list1.contains(""));
    }

    @Test(timeout = 4000)
    public void test03() throws Throwable {
        RootNode rootNode0 = new RootNode((ContentNode) null, 12);
        assertNotNull(rootNode0);
        assertEquals("", rootNode0.getName());

        ContentNode contentNode0 = new ContentNode(rootNode0);
        assertNotNull(contentNode0);
        assertEquals("", rootNode0.getName());
        assertEquals("", contentNode0.getName());

        String[] stringArray0 = new String[8];
        stringArray0[0] = "@7`z<NJ=ehHzs";
        stringArray0[1] = "";
        stringArray0[2] = " ";
        stringArray0[3] = "";
        stringArray0[4] = "com/xenoamess/x8l/databind/x8lpath/X8lPathUtil";
        stringArray0[5] = " ";
        stringArray0[6] = " ";
        stringArray0[7] = "";
        List<Object> list0 = X8lPathUtil.fetch((AbstractTreeNode) rootNode0, stringArray0);
        assertNotNull(list0);
        assertEquals(8, stringArray0.length);
        assertEquals("", rootNode0.getName());
        assertEquals(3, list0.size());
        assertFalse(list0.isEmpty());
        assertFalse(list0.contains("@7`z<NJ=ehHzs"));
    }

    @Test(timeout = 4000)
    public void test04() throws Throwable {
        RootNode rootNode0 = new RootNode((ContentNode) null);
        assertNotNull(rootNode0);
        assertEquals("", rootNode0.getName());

        ContentNode contentNode0 = new ContentNode(rootNode0);
        assertNotNull(contentNode0);
        assertEquals("", rootNode0.getName());
        assertEquals("", contentNode0.getName());

        Class<AbstractTreeNode> class0 = AbstractTreeNode.class;
        List<AbstractTreeNode> list0 = X8lPathUtil.fetch((AbstractTreeNode) rootNode0, "", class0);
        assertNotNull(list0);
        assertEquals("", rootNode0.getName());
        assertFalse(list0.isEmpty());
        assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test05() throws Throwable {
        CommentNode commentNode0 = new CommentNode((ContentNode) null, "))#");
        assertNotNull(commentNode0);
        assertEquals("))#", commentNode0.getTextContent());

        List<Object> list0 = X8lPathUtil.fetch((AbstractTreeNode) commentNode0, "))#");
        assertNotNull(list0);
        assertEquals("))#", commentNode0.getTextContent());
        assertEquals(0, list0.size());
        assertTrue(list0.isEmpty());
        assertFalse(list0.contains("))#"));
    }

    @Test(timeout = 4000)
    public void test06() throws Throwable {
        TextNode textNode0 = new TextNode((ContentNode) null, "vJ-!");
        assertNotNull(textNode0);
        assertEquals("vJ-!", textNode0.getTextContent());

        RootNode rootNode0 = new RootNode((ContentNode) null, 7);
        assertNotNull(rootNode0);
        assertEquals("", rootNode0.getName());

        List<AbstractTreeNode> list0 = rootNode0.getChildren();
        assertNotNull(list0);
        assertEquals("", rootNode0.getName());
        assertEquals(0, list0.size());
        assertTrue(list0.isEmpty());

        StringReader stringReader0 = new StringReader("");
        assertNotNull(stringReader0);

        String[] stringArray0 = new String[2];
        stringArray0[0] = "";
        stringReader0.close();
        stringArray0[1] = "";
        List<Object> list1 = X8lPathUtil.fetch((AbstractTreeNode) textNode0, stringArray0);
        assertNotNull(list1);
        assertEquals(2, stringArray0.length);
        assertEquals("vJ-!", textNode0.getTextContent());
        assertTrue(list1.isEmpty());
        assertEquals(0, list1.size());
        assertFalse(list1.contains("vJ-!"));

        try {
            X8lPathUtil.fetch((List<AbstractTreeNode>) list0, (Reader) stringReader0, (List<Object>) list1);
            fail("Expecting exception: IOException");

        } catch (IOException e) {
            //
            // Stream closed
            //
            verifyException("java.io.StringReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test07() throws Throwable {
        RootNode rootNode0 = new RootNode((ContentNode) null, 1294);
        assertNotNull(rootNode0);
        assertEquals("", rootNode0.getName());

        // Undeclared exception!
        try {
            X8lPathUtil.fetch((AbstractTreeNode) rootNode0, "oE]@$Z8zUw: 1]~ukk");
            fail("Expecting exception: NumberFormatException");

        } catch (NumberFormatException e) {
            //
            // For input string: \"@$Z8zUw: 1\"
            //
            verifyException("java.lang.NumberFormatException", e);
        }
    }

    @Test(timeout = 4000)
    public void test08() throws Throwable {
        LinkedList<TextNode> linkedList0 = new LinkedList<TextNode>();
        assertNotNull(linkedList0);
        assertEquals(0, linkedList0.size());

        TextNode textNode0 = new TextNode((ContentNode) null, "");
        assertNotNull(textNode0);
        assertEquals("", textNode0.getTextContent());

        boolean boolean0 = linkedList0.add(textNode0);
        assertEquals(1, linkedList0.size());
        assertEquals("", textNode0.getTextContent());
        assertTrue(boolean0);
        assertTrue(linkedList0.contains(textNode0));

        // Undeclared exception!
        try {
            X8lPathUtil.subList((List<TextNode>) linkedList0, (-1), (-1));
            fail("Expecting exception: IndexOutOfBoundsException");

        } catch (IndexOutOfBoundsException e) {
            //
            // fromIndex = -1
            //
            verifyException("java.util.SubList", e);
        }
    }

    @Test(timeout = 4000)
    public void test09() throws Throwable {
        TextNode textNode0 = new TextNode((ContentNode) null, 345, "not implemented for this class : ");
        assertNotNull(textNode0);
        assertEquals("not implemented for this class : ", textNode0.getTextContent());

        RootNode rootNode0 = new RootNode((ContentNode) null, 7);
        assertNotNull(rootNode0);
        assertEquals("", rootNode0.getName());

        RootNode rootNode1 = new RootNode(rootNode0);
        assertNotNull(rootNode1);
        assertFalse(rootNode1.equals((Object) rootNode0));
        assertEquals("", rootNode0.getName());
        assertEquals("", rootNode1.getName());

        List<AbstractTreeNode> list0 = rootNode1.getChildren();
        assertNotNull(list0);
        assertFalse(rootNode0.equals((Object) rootNode1));
        assertFalse(rootNode1.equals((Object) rootNode0));
        assertEquals("", rootNode0.getName());
        assertEquals("", rootNode1.getName());
        assertTrue(list0.isEmpty());
        assertEquals(0, list0.size());
        assertNotSame(rootNode0, rootNode1);
        assertNotSame(rootNode1, rootNode0);

        StringReader stringReader0 = new StringReader("");
        assertNotNull(stringReader0);

        String[] stringArray0 = new String[2];
        rootNode1.copy(rootNode0);
        assertFalse(rootNode0.equals((Object) rootNode1));
        assertFalse(rootNode1.equals((Object) rootNode0));
        assertEquals("", rootNode0.getName());
        assertEquals("", rootNode1.getName());
        assertNotSame(rootNode0, rootNode1);
        assertNotSame(rootNode1, rootNode0);

        stringArray0[0] = "";
        stringArray0[1] = "";
        List<Object> list1 = X8lPathUtil.fetch((AbstractTreeNode) textNode0, stringArray0);
        assertNotNull(list1);
        assertEquals(2, stringArray0.length);
        assertEquals("not implemented for this class : ", textNode0.getTextContent());
        assertEquals(0, list1.size());
        assertTrue(list1.isEmpty());
        assertFalse(list1.contains(345));

        boolean boolean0 = X8lPathUtil.fetch((List<AbstractTreeNode>) list0, (Reader) stringReader0, (List<Object>) list1);
        assertFalse(rootNode0.equals((Object) rootNode1));
        assertFalse(rootNode1.equals((Object) rootNode0));
        assertEquals(2, stringArray0.length);
        assertEquals("not implemented for this class : ", textNode0.getTextContent());
        assertEquals("", rootNode0.getName());
        assertEquals("", rootNode1.getName());
        assertFalse(list0.isEmpty());
        assertEquals(1, list0.size());
        assertEquals(0, list1.size());
        assertTrue(list1.isEmpty());
        assertTrue(boolean0);
        assertNotSame(rootNode0, rootNode1);
        assertNotSame(rootNode1, rootNode0);
        assertFalse(list1.contains(345));
    }

    @Test(timeout = 4000)
    public void test10() throws Throwable {
        LinkedList<AbstractTreeNode> linkedList0 = new LinkedList<AbstractTreeNode>();
        assertNotNull(linkedList0);
        assertEquals(0, linkedList0.size());

        boolean boolean0 = linkedList0.add((AbstractTreeNode) null);
        assertEquals(1, linkedList0.size());
        assertTrue(boolean0);

        List<Object> list0 = X8lPathUtil.fetch((List<AbstractTreeNode>) linkedList0, "`");
        assertNotNull(list0);
        assertEquals(1, linkedList0.size());
        assertEquals(0, list0.size());
        assertTrue(list0.isEmpty());
        assertFalse(list0.contains("`"));

        StringReader stringReader0 = new StringReader("`");
        assertNotNull(stringReader0);

        boolean boolean1 = X8lPathUtil.fetch((List<AbstractTreeNode>) linkedList0, (Reader) stringReader0, (List<Object>) list0);
        assertTrue(boolean1 == boolean0);
        assertEquals(1, linkedList0.size());
        assertEquals(0, list0.size());
        assertTrue(list0.isEmpty());
        assertTrue(boolean1);
        assertFalse(list0.contains("`"));
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        CommentNode commentNode0 = new CommentNode((ContentNode) null, 1, ">mbgs \r` ?(tmni");
        assertNotNull(commentNode0);
        assertEquals(">mbgs \r` ?(tmni", commentNode0.getTextContent());

        String[] stringArray0 = new String[5];
        stringArray0[0] = ">mbgs \r` ?(tmni";
        stringArray0[1] = ">mbgs \r` ?(tmni";
        stringArray0[2] = ">mbgs \r` ?(tmni";
        stringArray0[3] = ">mbgs \r` ?(tmni";
        stringArray0[4] = ">mbgs \r` ?(tmni";
        Class<AbstractTreeNode> class0 = AbstractTreeNode.class;
        List<AbstractTreeNode> list0 = commentNode0.fetch(stringArray0, class0);
        assertNotNull(list0);
        assertEquals(5, stringArray0.length);
        assertEquals(">mbgs \r` ?(tmni", commentNode0.getTextContent());
        assertEquals(0, list0.size());
        assertTrue(list0.isEmpty());

        StringReader stringReader0 = new StringReader(">mbgs \r` ?(tmni");
        assertNotNull(stringReader0);

        X8lDataBeanFieldScheme x8lDataBeanFieldScheme0 = X8lDataBeanFieldScheme.X8LPATH;
        Class<Object> class1 = Object.class;
        List<Object> list1 = commentNode0.fetch(x8lDataBeanFieldScheme0, ">mbgs \r` ?(tmni", class1);
        assertNotNull(list1);
        assertEquals(">mbgs \r` ?(tmni", commentNode0.getTextContent());
        assertEquals(0, list1.size());
        assertTrue(list1.isEmpty());
        assertFalse(list1.contains(">mbgs \r` ?(tmni"));

        boolean boolean0 = X8lPathUtil.fetch(list0, (Reader) stringReader0, list1);
        assertEquals(5, stringArray0.length);
        assertEquals(">mbgs \r` ?(tmni", commentNode0.getTextContent());
        assertEquals(0, list0.size());
        assertTrue(list0.isEmpty());
        assertEquals(0, list1.size());
        assertTrue(list1.isEmpty());
        assertFalse(boolean0);
        assertFalse(list1.contains(">mbgs \r` ?(tmni"));
    }

    @Test(timeout = 4000)
    public void test12() throws Throwable {
        LinkedList<AbstractTreeNode> linkedList0 = new LinkedList<AbstractTreeNode>();
        assertNotNull(linkedList0);
        assertEquals(0, linkedList0.size());

        List<Object> list0 = X8lPathUtil.fetch((List<AbstractTreeNode>) linkedList0, "%5fPkwX\bo");
        assertNotNull(list0);
        assertEquals(0, linkedList0.size());
        assertTrue(list0.isEmpty());
        assertEquals(0, list0.size());
        assertFalse(list0.contains("%5fPkwX\bo"));

        StringReader stringReader0 = new StringReader("%5fPkwX\bo");
        assertNotNull(stringReader0);

        boolean boolean0 = X8lPathUtil.fetch((List<AbstractTreeNode>) linkedList0, (Reader) stringReader0, (List<Object>) list0);
        assertEquals(0, linkedList0.size());
        assertTrue(list0.isEmpty());
        assertEquals(0, list0.size());
        assertTrue(boolean0);
        assertFalse(list0.contains("%5fPkwX\bo"));
    }

    @Test(timeout = 4000)
    public void test13() throws Throwable {
        LinkedList<AbstractTreeNode> linkedList0 = new LinkedList<AbstractTreeNode>();
        assertNotNull(linkedList0);
        assertEquals(0, linkedList0.size());

        // Undeclared exception!
        try {
            X8lPathUtil.fetch((List<AbstractTreeNode>) linkedList0, "XXtSo^*x]C|?{A");
            fail("Expecting exception: NumberFormatException");

        } catch (NumberFormatException e) {
            //
            // For input string: \"XXtSo^*x\"
            //
            verifyException("java.lang.NumberFormatException", e);
        }
    }

    @Test(timeout = 4000)
    public void test14() throws Throwable {
        LinkedList<AbstractTreeNode> linkedList0 = new LinkedList<AbstractTreeNode>();
        assertNotNull(linkedList0);
        assertEquals(0, linkedList0.size());

        List<Object> list0 = X8lPathUtil.fetch((List<AbstractTreeNode>) linkedList0, ">2]Mqkp");
        assertNotNull(list0);
        assertEquals(0, linkedList0.size());
        assertEquals(0, list0.size());
        assertTrue(list0.isEmpty());
        assertFalse(list0.contains(">2]Mqkp"));
    }

    @Test(timeout = 4000)
    public void test15() throws Throwable {
        CommentNode commentNode0 = new CommentNode((ContentNode) null, (-864), "u[y>*<wN");
        assertNotNull(commentNode0);
        assertEquals("u[y>*<wN", commentNode0.getTextContent());

        String[] stringArray0 = new String[4];
        stringArray0[0] = "u[y>*<wN";
        stringArray0[1] = "u[y>*<wN";
        stringArray0[2] = "";
        stringArray0[3] = "u[y>*<wN";
        List<Object> list0 = X8lPathUtil.fetch((AbstractTreeNode) commentNode0, stringArray0);
        assertNotNull(list0);
        assertEquals(4, stringArray0.length);
        assertEquals("u[y>*<wN", commentNode0.getTextContent());
        assertTrue(list0.isEmpty());
        assertEquals(0, list0.size());
        assertFalse(list0.contains("u[y>*<wN"));
    }

    @Test(timeout = 4000)
    public void test16() throws Throwable {
        RootNode rootNode0 = new RootNode((ContentNode) null, 144);
        assertNotNull(rootNode0);
        assertEquals("", rootNode0.getName());

        // Undeclared exception!
        try {
            X8lPathUtil.fetch((AbstractTreeNode) rootNode0, (String) null);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Argument for @NotNull parameter 'x8lPath' of com/xenoamess/x8l/databind/x8lpath/X8lPathUtil.fetch must not be null
            //
            verifyException("com.xenoamess.x8l.databind.x8lpath.X8lPathUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test17() throws Throwable {
        LinkedList<TextNode> linkedList0 = new LinkedList<TextNode>();
        assertNotNull(linkedList0);
        assertEquals(0, linkedList0.size());

        TextNode textNode0 = new TextNode((ContentNode) null, "");
        assertNotNull(textNode0);
        assertEquals("", textNode0.getTextContent());

        boolean boolean0 = linkedList0.add(textNode0);
        assertEquals(1, linkedList0.size());
        assertEquals("", textNode0.getTextContent());
        assertTrue(boolean0);
        assertTrue(linkedList0.contains(textNode0));

        List<TextNode> list0 = X8lPathUtil.subList((List<TextNode>) linkedList0, 0, 1097);
        assertNotNull(list0);
        assertEquals(1, linkedList0.size());
        assertEquals(1, list0.size());
        assertFalse(list0.isEmpty());
        assertTrue(linkedList0.contains(textNode0));
        assertTrue(list0.contains(textNode0));
    }

    @Test(timeout = 4000)
    public void test18() throws Throwable {
        LinkedList<TextNode> linkedList0 = new LinkedList<TextNode>();
        assertNotNull(linkedList0);
        assertEquals(0, linkedList0.size());

        TextNode textNode0 = new TextNode((ContentNode) null, "");
        assertNotNull(textNode0);
        assertEquals("", textNode0.getTextContent());

        boolean boolean0 = linkedList0.add(textNode0);
        assertEquals(1, linkedList0.size());
        assertEquals("", textNode0.getTextContent());
        assertTrue(boolean0);
        assertTrue(linkedList0.contains(textNode0));

        List<TextNode> list0 = X8lPathUtil.subList((List<TextNode>) linkedList0, 0, 0);
        assertNotNull(list0);
        assertEquals(1, linkedList0.size());
        assertEquals(1, list0.size());
        assertFalse(list0.isEmpty());
        assertTrue(linkedList0.contains(textNode0));
        assertTrue(list0.contains(textNode0));

        boolean boolean1 = linkedList0.add(textNode0);
        assertTrue(boolean1 == boolean0);
        assertEquals(2, linkedList0.size());
        assertEquals("", textNode0.getTextContent());
        assertTrue(boolean1);
        assertTrue(linkedList0.contains(textNode0));

        // Undeclared exception!
        try {
            X8lPathUtil.subList((List<TextNode>) list0, 0, 1097);
            fail("Expecting exception: ConcurrentModificationException");

        } catch (ConcurrentModificationException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.util.SubList", e);
        }
    }

    @Test(timeout = 4000)
    public void test19() throws Throwable {
        LinkedList<TextNode> linkedList0 = new LinkedList<TextNode>();
        assertNotNull(linkedList0);
        assertEquals(0, linkedList0.size());

        TextNode textNode0 = new TextNode((ContentNode) null, 345, "not implemented for this class : ");
        assertNotNull(textNode0);
        assertEquals("not implemented for this class : ", textNode0.getTextContent());

        boolean boolean0 = linkedList0.add(textNode0);
        assertEquals(1, linkedList0.size());
        assertEquals("not implemented for this class : ", textNode0.getTextContent());
        assertTrue(boolean0);
        assertTrue(linkedList0.contains(textNode0));

        List<TextNode> list0 = X8lPathUtil.subList((List<TextNode>) linkedList0, 2028, 2028);
        assertNotNull(list0);
        assertEquals(1, linkedList0.size());
        assertTrue(list0.isEmpty());
        assertEquals(0, list0.size());
        assertTrue(linkedList0.contains(textNode0));
        assertFalse(list0.contains(textNode0));
    }

    @Test(timeout = 4000)
    public void test20() throws Throwable {
        TextNode textNode0 = new TextNode((ContentNode) null, "");
        assertNotNull(textNode0);
        assertEquals("", textNode0.getTextContent());

        X8lDataBeanFieldScheme x8lDataBeanFieldScheme0 = X8lDataBeanFieldScheme.X8LPATH;
        Class<Object> class0 = Object.class;
        List<Object> list0 = textNode0.fetch(x8lDataBeanFieldScheme0, "CONTENT_NODE", class0);
        assertNotNull(list0);
        assertEquals("", textNode0.getTextContent());
        assertEquals(0, list0.size());
        assertTrue(list0.isEmpty());
        assertFalse(list0.contains(""));
    }

    @Test(timeout = 4000)
    public void test21() throws Throwable {
        String[] stringArray0 = new String[7];
        stringArray0[0] = "CONTENT_NODE";
        RootNode rootNode0 = new RootNode((ContentNode) null, 1778406868);
        assertNotNull(rootNode0);
        assertEquals("", rootNode0.getName());

        // Undeclared exception!
        try {
            X8lPathUtil.fetch((AbstractTreeNode) rootNode0, stringArray0);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Argument for @NotNull parameter 'x8lPath' of com/xenoamess/x8l/databind/x8lpath/X8lPathUtil.fetch must not be null
            //
            verifyException("com.xenoamess.x8l.databind.x8lpath.X8lPathUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
        RootNode rootNode0 = new RootNode((ContentNode) null, (-2687));
        assertNotNull(rootNode0);
        assertEquals("", rootNode0.getName());

        CommentNode commentNode0 = new CommentNode(rootNode0, "COMMENT_NODE");
        assertNotNull(commentNode0);
        assertEquals("", rootNode0.getName());
        assertEquals("COMMENT_NODE", commentNode0.getTextContent());

        String[] stringArray0 = new String[8];
        stringArray0[0] = "";
        stringArray0[1] = "";
        stringArray0[2] = "[0JJ[e3,j26-";
        stringArray0[3] = "COMMENT_NODE";
        // Undeclared exception!
        try {
            commentNode0.fetch(stringArray0);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Argument for @NotNull parameter 'x8lPath' of com/xenoamess/x8l/databind/x8lpath/X8lPathUtil.fetch must not be null
            //
            verifyException("com.xenoamess.x8l.databind.x8lpath.X8lPathUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test23() throws Throwable {
        RootNode rootNode0 = new RootNode((ContentNode) null);
        assertNotNull(rootNode0);
        assertEquals("", rootNode0.getName());

        List<Object> list0 = X8lPathUtil.fetch((AbstractTreeNode) rootNode0, "ATTRIBUTE");
        assertNotNull(list0);
        assertEquals("", rootNode0.getName());
        assertFalse(list0.isEmpty());
        assertEquals(1, list0.size());
        assertFalse(list0.contains("ATTRIBUTE"));
    }

    @Test(timeout = 4000)
    public void test24() throws Throwable {
        String[] stringArray0 = new String[3];
        stringArray0[0] = "(JM:]c({R!Y";
        RootNode rootNode0 = new RootNode((ContentNode) null, 1778406868);
        assertNotNull(rootNode0);
        assertEquals("", rootNode0.getName());

        // Undeclared exception!
        try {
            X8lPathUtil.fetch((AbstractTreeNode) rootNode0, stringArray0);
            fail("Expecting exception: NumberFormatException");

        } catch (NumberFormatException e) {
            //
            // For input string: \"JM:\"
            //
            verifyException("java.lang.NumberFormatException", e);
        }
    }

    @Test(timeout = 4000)
    public void test25() throws Throwable {
        RootNode rootNode0 = new RootNode((ContentNode) null, 37);
        assertNotNull(rootNode0);
        assertEquals("", rootNode0.getName());

        RootNode rootNode1 = new RootNode(rootNode0);
        assertNotNull(rootNode1);
        assertFalse(rootNode1.equals((Object) rootNode0));
        assertEquals("", rootNode0.getName());
        assertEquals("", rootNode1.getName());

        String[] stringArray0 = new String[6];
        stringArray0[0] = "";
        stringArray0[1] = "";
        stringArray0[2] = "";
        stringArray0[3] = "";
        stringArray0[4] = "";
        stringArray0[5] = "";
        Class<ContentNode> class0 = ContentNode.class;
        List<ContentNode> list0 = X8lPathUtil.fetch((AbstractTreeNode) rootNode0, stringArray0, class0);
        assertNotNull(list0);
        assertFalse(rootNode0.equals((Object) rootNode1));
        assertEquals(6, stringArray0.length);
        assertEquals("", rootNode0.getName());
        assertEquals(6, list0.size());
        assertFalse(list0.isEmpty());
        assertNotSame(rootNode0, rootNode1);
    }

    @Test(timeout = 4000)
    public void test26() throws Throwable {
        // Undeclared exception!
        try {
            X8lPathUtil.fetch((AbstractTreeNode) null, "isSingleNameTextPair");
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Argument for @NotNull parameter 'originalNode' of com/xenoamess/x8l/databind/x8lpath/X8lPathUtil.fetch must not be null
            //
            verifyException("com.xenoamess.x8l.databind.x8lpath.X8lPathUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test27() throws Throwable {
        LinkedList<AbstractTreeNode> linkedList0 = new LinkedList<AbstractTreeNode>();
        assertNotNull(linkedList0);
        assertEquals(0, linkedList0.size());

        StringReader stringReader0 = new StringReader("-4>U+)7EmeAvc4RP");
        assertNotNull(stringReader0);

        // Undeclared exception!
        try {
            X8lPathUtil.fetch((List<AbstractTreeNode>) linkedList0, (Reader) stringReader0, (List<Object>) null);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Argument for @NotNull parameter 'resultList' of com/xenoamess/x8l/databind/x8lpath/X8lPathUtil.fetch must not be null
            //
            verifyException("com.xenoamess.x8l.databind.x8lpath.X8lPathUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test28() throws Throwable {
        RootNode rootNode0 = new RootNode((ContentNode) null, 0);
        List<AbstractTreeNode> list0 = rootNode0.getChildren();
        List<Object> list1 = X8lPathUtil.fetch(list0, "Pl:.J5u");
        // Undeclared exception!
        try {
            X8lPathUtil.fetch(list0, (Reader) null, list1);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Argument for @NotNull parameter 'reader' of com/xenoamess/x8l/databind/x8lpath/X8lPathUtil.fetch must not be null
            //
            verifyException("com.xenoamess.x8l.databind.x8lpath.X8lPathUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test29() throws Throwable {
        StringReader stringReader0 = new StringReader("WC\"}k?S}(9XW8");
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        // Undeclared exception!
        try {
            X8lPathUtil.fetch((List<AbstractTreeNode>) null, (Reader) stringReader0, (List<Object>) linkedList0);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Argument for @NotNull parameter 'originalNodes' of com/xenoamess/x8l/databind/x8lpath/X8lPathUtil.fetch must not be null
            //
            verifyException("com.xenoamess.x8l.databind.x8lpath.X8lPathUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test30() throws Throwable {
        RootNode rootNode0 = new RootNode((ContentNode) null);
        Class<String> class0 = String.class;
        // Undeclared exception!
        try {
            X8lPathUtil.fetch((AbstractTreeNode) rootNode0, (String[]) null, class0);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Argument for @NotNull parameter 'x8lPaths' of com/xenoamess/x8l/databind/x8lpath/X8lPathUtil.fetch must not be null
            //
            verifyException("com.xenoamess.x8l.databind.x8lpath.X8lPathUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test31() throws Throwable {
        CommentNode commentNode0 = new CommentNode((ContentNode) null, "@NotNull method %s.%s must not return null");
        // Undeclared exception!
        try {
            X8lPathUtil.fetch((AbstractTreeNode) commentNode0, (String[]) null);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Argument for @NotNull parameter 'x8lPaths' of com/xenoamess/x8l/databind/x8lpath/X8lPathUtil.fetch must not be null
            //
            verifyException("com.xenoamess.x8l.databind.x8lpath.X8lPathUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test32() throws Throwable {
        String[] stringArray0 = new String[4];
        // Undeclared exception!
        try {
            X8lPathUtil.fetch((AbstractTreeNode) null, stringArray0);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Argument for @NotNull parameter 'originalNode' of com/xenoamess/x8l/databind/x8lpath/X8lPathUtil.fetch must not be null
            //
            verifyException("com.xenoamess.x8l.databind.x8lpath.X8lPathUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test33() throws Throwable {
        CommentNode commentNode0 = new CommentNode((ContentNode) null, "CONTENT_NODE");
        // Undeclared exception!
        try {
            X8lPathUtil.fetch((AbstractTreeNode) commentNode0, "subList", (Class<String>) null);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Argument for @NotNull parameter 'tClass' of com/xenoamess/x8l/databind/x8lpath/X8lPathUtil.fetch must not be null
            //
            verifyException("com.xenoamess.x8l.databind.x8lpath.X8lPathUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test34() throws Throwable {
        CommentNode commentNode0 = new CommentNode((ContentNode) null, 78, "");
        Class<RootNode> class0 = RootNode.class;
        // Undeclared exception!
        try {
            X8lPathUtil.fetch((AbstractTreeNode) commentNode0, (String) null, class0);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Argument for @NotNull parameter 'x8lPath' of com/xenoamess/x8l/databind/x8lpath/X8lPathUtil.fetch must not be null
            //
            verifyException("com.xenoamess.x8l.databind.x8lpath.X8lPathUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test35() throws Throwable {
        Class<RootNode> class0 = RootNode.class;
        // Undeclared exception!
        try {
            X8lPathUtil.fetch((AbstractTreeNode) null, "CHILD", class0);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Argument for @NotNull parameter 'originalNode' of com/xenoamess/x8l/databind/x8lpath/X8lPathUtil.fetch must not be null
            //
            verifyException("com.xenoamess.x8l.databind.x8lpath.X8lPathUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test36() throws Throwable {
        // Undeclared exception!
        try {
            X8lPathUtil.subList((List<String>) null, 0, 1097);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Argument for @NotNull parameter 'original' of com/xenoamess/x8l/databind/x8lpath/X8lPathUtil.subList must not be null
            //
            verifyException("com.xenoamess.x8l.databind.x8lpath.X8lPathUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test37() throws Throwable {
        LinkedList<TextNode> linkedList0 = new LinkedList<TextNode>();
        List<TextNode> list0 = X8lPathUtil.subList((List<TextNode>) linkedList0, 2028, 2028);
        assertEquals(0, list0.size());
    }

    @Test(timeout = 4000)
    public void test38() throws Throwable {
        LinkedList<AbstractTreeNode> linkedList0 = new LinkedList<AbstractTreeNode>();
        // Undeclared exception!
        try {
            X8lPathUtil.fetch((List<AbstractTreeNode>) linkedList0, (String) null);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Argument for @NotNull parameter 'x8lPath' of com/xenoamess/x8l/databind/x8lpath/X8lPathUtil.fetch must not be null
            //
            verifyException("com.xenoamess.x8l.databind.x8lpath.X8lPathUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test39() throws Throwable {
        // Undeclared exception!
        try {
            X8lPathUtil.fetch((List<AbstractTreeNode>) null, "B%~+!M;)I.gR");
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Argument for @NotNull parameter 'originalNodes' of com/xenoamess/x8l/databind/x8lpath/X8lPathUtil.fetch must not be null
            //
            verifyException("com.xenoamess.x8l.databind.x8lpath.X8lPathUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test40() throws Throwable {
        X8lPathUtil x8lPathUtil0 = new X8lPathUtil();
    }
}
