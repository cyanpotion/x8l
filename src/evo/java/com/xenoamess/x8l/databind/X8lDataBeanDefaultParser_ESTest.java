/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 05 20:54:17 GMT 2022
 */

package com.xenoamess.x8l.databind;

import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import static org.evosuite.runtime.EvoAssertions.verifyException;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertSame;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class X8lDataBeanDefaultParser_ESTest extends X8lDataBeanDefaultParser_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        linkedList0.add((Object) linkedList0);
        linkedList0.add((Object) linkedList0);
        // Undeclared exception!
        try {
            X8lDataBeanDefaultParser.getint(linkedList0);
            fail("Expecting exception: NumberFormatException");

        } catch (NumberFormatException e) {
            //
            // For input string: \"java.util.LinkedList@0000000001\"
            //
            verifyException("java.lang.NumberFormatException", e);
        }
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        long long0 = X8lDataBeanDefaultParser.getlong(linkedList0);
        assertEquals((-1L), long0);
    }

    @Test(timeout = 4000)
    public void test002() throws Throwable {
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        hashMap0.put("", (String) null);
        String string0 = X8lDataBeanDefaultParser.getString((Map<String, String>) hashMap0, "", "$(JJ");
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test003() throws Throwable {
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        hashMap0.put("", "");
        String string0 = X8lDataBeanDefaultParser.getString((Map<String, String>) hashMap0, "");
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test004() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        linkedList0.add((Object) ":A");
        String string0 = X8lDataBeanDefaultParser.getString((List<Object>) linkedList0);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test005() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        Object object0 = new Object();
        linkedList0.add(object0);
        Object object1 = X8lDataBeanDefaultParser.getObject(linkedList0);
        assertSame(object1, object0);
    }

    @Test(timeout = 4000)
    public void test006() throws Throwable {
        long long0 = X8lDataBeanDefaultParser.getLong("0");
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test007() throws Throwable {
        long long0 = X8lDataBeanDefaultParser.getLong("9");
        assertEquals(9L, long0);
    }

    @Test(timeout = 4000)
    public void test008() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        Integer integer0 = new Integer((-2447));
        linkedList0.add((Object) integer0);
        List<Object> list0 = X8lDataBeanDefaultParser.getList(linkedList0);
        assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test009() throws Throwable {
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        int int0 = X8lDataBeanDefaultParser.getInteger((Map<String, String>) hashMap0, ".Do:v!Gb", (-1));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test010() throws Throwable {
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        hashMap0.put("0", "0");
        int int0 = X8lDataBeanDefaultParser.getInteger((Map<String, String>) hashMap0, "0");
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        hashMap0.put("2", "2");
        int int0 = X8lDataBeanDefaultParser.getInteger((Map<String, String>) hashMap0, "2");
        assertEquals(2, int0);
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        int int0 = X8lDataBeanDefaultParser.getInteger("0");
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        int int0 = X8lDataBeanDefaultParser.getInteger("1");
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test014() throws Throwable {
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        float float0 = X8lDataBeanDefaultParser.getFloat((Map<String, String>) hashMap0, "com.xenoamess.commons.primitive.iterators.AbstractFloatSpliterator", 0.0F);
        assertEquals(0.0F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test015() throws Throwable {
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        float float0 = X8lDataBeanDefaultParser.getFloat((Map<String, String>) hashMap0, ";yIKo#t", 1.0F);
        assertEquals(1.0F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test016() throws Throwable {
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        hashMap0.put("0", "0");
        float float0 = X8lDataBeanDefaultParser.getFloat((Map<String, String>) hashMap0, "0");
        assertEquals(0.0F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test017() throws Throwable {
        float float0 = X8lDataBeanDefaultParser.getFloat("0");
        assertEquals(0.0F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test018() throws Throwable {
        float float0 = X8lDataBeanDefaultParser.getFloat("1");
        assertEquals(1.0F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test019() throws Throwable {
        double double0 = X8lDataBeanDefaultParser.getDouble("0");
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test020() throws Throwable {
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        boolean boolean0 = X8lDataBeanDefaultParser.getBoolean((Map<String, String>) hashMap0, "1", false);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test021() throws Throwable {
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        hashMap0.put("", "");
        boolean boolean0 = X8lDataBeanDefaultParser.getBoolean((Map<String, String>) hashMap0, "");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        boolean boolean0 = X8lDataBeanDefaultParser.getBoolean((Map<String, String>) hashMap0, "0Qn`p>WRd!W?");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        Integer integer0 = new Integer((-2447));
        linkedList0.add((Object) integer0);
        // Undeclared exception!
        try {
            X8lDataBeanDefaultParser.getfloat(linkedList0);
            fail("Expecting exception: NumberFormatException");

        } catch (NumberFormatException e) {
        }
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        Integer integer0 = new Integer((-1850));
        linkedList0.add((Object) integer0);
        // Undeclared exception!
        try {
            X8lDataBeanDefaultParser.getdouble(linkedList0);
            fail("Expecting exception: NumberFormatException");

        } catch (NumberFormatException e) {
        }
    }

    @Test(timeout = 4000)
    public void test025() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        linkedList0.add((Object) "1");
        // Undeclared exception!
        try {
            X8lDataBeanDefaultParser.getboolean(linkedList0);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // java.lang.String@0000000001
            //
            verifyException("com.xenoamess.x8l.databind.X8lDataBeanDefaultParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test026() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        Integer integer0 = new Integer((-2568));
        linkedList0.addFirst(integer0);
        // Undeclared exception!
        try {
            X8lDataBeanDefaultParser.getLong((List<Object>) linkedList0);
            fail("Expecting exception: NumberFormatException");

        } catch (NumberFormatException e) {
            //
            // For input string: \"java.lang.Integer@0000000001\"
            //
            verifyException("java.lang.NumberFormatException", e);
        }
    }

    @Test(timeout = 4000)
    public void test027() throws Throwable {
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        hashMap0.put("false", "false");
        // Undeclared exception!
        try {
            X8lDataBeanDefaultParser.getInteger((Map<String, String>) hashMap0, "false", 16384);
            fail("Expecting exception: NumberFormatException");

        } catch (NumberFormatException e) {
            //
            // For input string: \"false\"
            //
            verifyException("java.lang.NumberFormatException", e);
        }
    }

    @Test(timeout = 4000)
    public void test028() throws Throwable {
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        hashMap0.put("", "3e7vJ\"aRT2X__JUA=h");
        // Undeclared exception!
        try {
            X8lDataBeanDefaultParser.getInteger((Map<String, String>) hashMap0, "");
            fail("Expecting exception: NumberFormatException");

        } catch (NumberFormatException e) {
            //
            // For input string: \"3e7vJ\"aRT2X__JUA=h\"
            //
            verifyException("java.lang.NumberFormatException", e);
        }
    }

    @Test(timeout = 4000)
    public void test029() throws Throwable {
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        // Undeclared exception!
        try {
            X8lDataBeanDefaultParser.getInteger((Map<String, String>) hashMap0, (String) null);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Argument for @NotNull parameter 'key' of com/xenoamess/x8l/databind/X8lDataBeanDefaultParser.getInteger must not be null
            //
            verifyException("com.xenoamess.x8l.databind.X8lDataBeanDefaultParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test030() throws Throwable {
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        hashMap0.put("4zF>t|{", "key");
        // Undeclared exception!
        try {
            X8lDataBeanDefaultParser.getFloat((Map<String, String>) hashMap0, "4zF>t|{");
            fail("Expecting exception: NumberFormatException");

        } catch (NumberFormatException e) {
        }
    }

    @Test(timeout = 4000)
    public void test031() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        Integer integer0 = new Integer(64);
        linkedList0.add((Object) integer0);
        // Undeclared exception!
        try {
            X8lDataBeanDefaultParser.getFloat((List<Object>) linkedList0);
            fail("Expecting exception: NumberFormatException");

        } catch (NumberFormatException e) {
        }
    }

    @Test(timeout = 4000)
    public void test032() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        linkedList0.add((Object) "F");
        // Undeclared exception!
        try {
            X8lDataBeanDefaultParser.getDouble((List<Object>) linkedList0);
            fail("Expecting exception: NumberFormatException");

        } catch (NumberFormatException e) {
        }
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        // Undeclared exception!
        try {
            X8lDataBeanDefaultParser.getDouble("DrF@A");
            fail("Expecting exception: NumberFormatException");

        } catch (NumberFormatException e) {
        }
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        hashMap0.put("hZ^<<;gAAX-7l<Q[Y^", "getBoolean");
        // Undeclared exception!
        try {
            X8lDataBeanDefaultParser.getBoolean((Map<String, String>) hashMap0, "hZ^<<;gAAX-7l<Q[Y^", true);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // getBoolean
            //
            verifyException("com.xenoamess.x8l.databind.X8lDataBeanDefaultParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        hashMap0.put("", "getObject");
        // Undeclared exception!
        try {
            X8lDataBeanDefaultParser.getBoolean((Map<String, String>) hashMap0, "");
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // getObject
            //
            verifyException("com.xenoamess.x8l.databind.X8lDataBeanDefaultParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test036() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        linkedList0.add((Object) hashMap0);
        // Undeclared exception!
        try {
            X8lDataBeanDefaultParser.getBoolean((List<Object>) linkedList0);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // java.util.HashMap@0000000001
            //
            verifyException("com.xenoamess.x8l.databind.X8lDataBeanDefaultParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test037() throws Throwable {
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        hashMap0.put("", "");
        String string0 = X8lDataBeanDefaultParser.getString((Map<String, String>) hashMap0, "", "");
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test038() throws Throwable {
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        hashMap0.put("rL:%Rj", "rL:%Rj");
        // Undeclared exception!
        try {
            X8lDataBeanDefaultParser.getFloat((Map<String, String>) hashMap0, "rL:%Rj", 1.0F);
            fail("Expecting exception: NumberFormatException");

        } catch (NumberFormatException e) {
        }
    }

    @Test(timeout = 4000)
    public void test039() throws Throwable {
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        int int0 = X8lDataBeanDefaultParser.getInteger((Map<String, String>) hashMap0, "", 3382);
        assertEquals(3382, int0);
    }

    @Test(timeout = 4000)
    public void test040() throws Throwable {
        boolean boolean0 = X8lDataBeanDefaultParser.getBoolean((String) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test041() throws Throwable {
        double double0 = X8lDataBeanDefaultParser.getDouble("");
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test042() throws Throwable {
        // Undeclared exception!
        try {
            X8lDataBeanDefaultParser.getFloat("yes");
            fail("Expecting exception: NumberFormatException");

        } catch (NumberFormatException e) {
        }
    }

    @Test(timeout = 4000)
    public void test043() throws Throwable {
        float float0 = X8lDataBeanDefaultParser.getFloat((String) null);
        assertEquals(Float.NaN, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        long long0 = X8lDataBeanDefaultParser.getLong("");
        assertEquals((-1L), long0);
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        // Undeclared exception!
        try {
            X8lDataBeanDefaultParser.getLong("o");
            fail("Expecting exception: NumberFormatException");

        } catch (NumberFormatException e) {
            //
            // For input string: \"o\"
            //
            verifyException("java.lang.NumberFormatException", e);
        }
    }

    @Test(timeout = 4000)
    public void test046() throws Throwable {
        // Undeclared exception!
        try {
            X8lDataBeanDefaultParser.getInteger("com.xenoamess.commons.primitive.iterators.AbstractCharSpliterator");
            fail("Expecting exception: NumberFormatException");

        } catch (NumberFormatException e) {
            //
            // For input string: \"com.xenoamess.commons.primitive.iterators.AbstractCharSpliterator\"
            //
            verifyException("java.lang.NumberFormatException", e);
        }
    }

    @Test(timeout = 4000)
    public void test047() throws Throwable {
        int int0 = X8lDataBeanDefaultParser.getInteger((String) null);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test048() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        linkedList0.add((Object) ":A");
        String string0 = X8lDataBeanDefaultParser.getLastFromListString(linkedList0);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test049() throws Throwable {
        LinkedList<String> linkedList0 = new LinkedList<String>();
        linkedList0.add("Sw\"");
        String string0 = X8lDataBeanDefaultParser.getLastFromList((List<String>) linkedList0);
        assertTrue(linkedList0.contains(string0));
    }

    @Test(timeout = 4000)
    public void test050() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        int int0 = X8lDataBeanDefaultParser.getint(linkedList0);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test051() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        float float0 = X8lDataBeanDefaultParser.getfloat(linkedList0);
        assertEquals(Float.NaN, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test052() throws Throwable {
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        String string0 = X8lDataBeanDefaultParser.getString((Map<String, String>) hashMap0, "getList", "getdouble");
        assertEquals("getdouble", string0);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test053() throws Throwable {
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        // Undeclared exception!
        try {
            X8lDataBeanDefaultParser.getString((Map<String, String>) hashMap0, (String) null, "com.xenoamess.commons.primitive.iterators.AbstractFloatSpliterator");
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Argument for @NotNull parameter 'key' of com/xenoamess/x8l/databind/X8lDataBeanDefaultParser.getString must not be null
            //
            verifyException("com.xenoamess.x8l.databind.X8lDataBeanDefaultParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test054() throws Throwable {
        // Undeclared exception!
        try {
            X8lDataBeanDefaultParser.getBoolean((Map<String, String>) null, "6!e", false);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Argument for @NotNull parameter 'settingMap' of com/xenoamess/x8l/databind/X8lDataBeanDefaultParser.getBoolean must not be null
            //
            verifyException("com.xenoamess.x8l.databind.X8lDataBeanDefaultParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        String string0 = X8lDataBeanDefaultParser.getLastFromListString(linkedList0);
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        LinkedList<String> linkedList0 = new LinkedList<String>();
        String string0 = X8lDataBeanDefaultParser.getLastFromList((List<String>) linkedList0);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test057() throws Throwable {
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        float float0 = X8lDataBeanDefaultParser.getFloat((Map<String, String>) hashMap0, "@2b^-]c)Bw|4>u4l", (-1.0F));
        assertEquals((-1.0F), float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test058() throws Throwable {
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        // Undeclared exception!
        try {
            X8lDataBeanDefaultParser.getFloat((Map<String, String>) hashMap0, (String) null, (float) 2);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Argument for @NotNull parameter 'key' of com/xenoamess/x8l/databind/X8lDataBeanDefaultParser.getFloat must not be null
            //
            verifyException("com.xenoamess.x8l.databind.X8lDataBeanDefaultParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test059() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        double double0 = X8lDataBeanDefaultParser.getdouble(linkedList0);
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test060() throws Throwable {
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        hashMap0.put("nRh?k-E$@Z]w$Py", "Sw\"");
        String string0 = X8lDataBeanDefaultParser.getString((Map<String, String>) hashMap0, "nRh?k-E$@Z]w$Py");
        assertEquals("Sw\"", string0);
    }

    @Test(timeout = 4000)
    public void test061() throws Throwable {
        HashMap<String, String> hashMap0 = new HashMap<String, String>(0);
        hashMap0.put("", "");
        boolean boolean0 = X8lDataBeanDefaultParser.getBoolean((Map<String, String>) hashMap0, "", true);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test062() throws Throwable {
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        hashMap0.put("0", "0");
        int int0 = X8lDataBeanDefaultParser.getInteger((Map<String, String>) hashMap0, "0", 29);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test063() throws Throwable {
        // Undeclared exception!
        try {
            X8lDataBeanDefaultParser.getBoolean("N");
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // N
            //
            verifyException("com.xenoamess.x8l.databind.X8lDataBeanDefaultParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test064() throws Throwable {
        boolean boolean0 = X8lDataBeanDefaultParser.getBoolean("true");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test065() throws Throwable {
        boolean boolean0 = X8lDataBeanDefaultParser.getBoolean("yes");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        boolean boolean0 = X8lDataBeanDefaultParser.getBoolean("no");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        boolean boolean0 = X8lDataBeanDefaultParser.getBoolean("1");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test068() throws Throwable {
        boolean boolean0 = X8lDataBeanDefaultParser.getBoolean("0");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test069() throws Throwable {
        boolean boolean0 = X8lDataBeanDefaultParser.getBoolean("false");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test070() throws Throwable {
        double double0 = X8lDataBeanDefaultParser.getDouble("1");
        assertEquals(1.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test071() throws Throwable {
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        hashMap0.put("1", "1");
        float float0 = X8lDataBeanDefaultParser.getFloat((Map<String, String>) hashMap0, "1");
        assertEquals(1.0F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test072() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        linkedList0.add((Object) "2");
        // Undeclared exception!
        try {
            X8lDataBeanDefaultParser.getlong(linkedList0);
            fail("Expecting exception: NumberFormatException");

        } catch (NumberFormatException e) {
            //
            // For input string: \"java.lang.String@0000000001\"
            //
            verifyException("java.lang.NumberFormatException", e);
        }
    }

    @Test(timeout = 4000)
    public void test073() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        Object object0 = new Object();
        linkedList0.add(object0);
        // Undeclared exception!
        try {
            X8lDataBeanDefaultParser.getInteger((List<Object>) linkedList0);
            fail("Expecting exception: NumberFormatException");

        } catch (NumberFormatException e) {
            //
            // For input string: \"java.lang.Object@0000000001\"
            //
            verifyException("java.lang.NumberFormatException", e);
        }
    }

    @Test(timeout = 4000)
    public void test074() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        linkedList0.add((Object) null);
        Integer integer0 = X8lDataBeanDefaultParser.getInteger((List<Object>) linkedList0);
        assertEquals((-1), (int) integer0);
    }

    @Test(timeout = 4000)
    public void test075() throws Throwable {
        // Undeclared exception!
        try {
            X8lDataBeanDefaultParser.getdouble((List<Object>) null);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Argument for @NotNull parameter 'list' of com/xenoamess/x8l/databind/X8lDataBeanDefaultParser.getdouble must not be null
            //
            verifyException("com.xenoamess.x8l.databind.X8lDataBeanDefaultParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test076() throws Throwable {
        // Undeclared exception!
        try {
            X8lDataBeanDefaultParser.getDouble((List<Object>) null);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Argument for @NotNull parameter 'list' of com/xenoamess/x8l/databind/X8lDataBeanDefaultParser.getDouble must not be null
            //
            verifyException("com.xenoamess.x8l.databind.X8lDataBeanDefaultParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        Double double0 = X8lDataBeanDefaultParser.getDouble((List<Object>) linkedList0);
        assertEquals(Double.NaN, (double) double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        // Undeclared exception!
        try {
            X8lDataBeanDefaultParser.getfloat((List<Object>) null);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Argument for @NotNull parameter 'list' of com/xenoamess/x8l/databind/X8lDataBeanDefaultParser.getfloat must not be null
            //
            verifyException("com.xenoamess.x8l.databind.X8lDataBeanDefaultParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        // Undeclared exception!
        try {
            X8lDataBeanDefaultParser.getString((Map<String, String>) hashMap0, (String) null);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Argument for @NotNull parameter 'key' of com/xenoamess/x8l/databind/X8lDataBeanDefaultParser.getString must not be null
            //
            verifyException("com.xenoamess.x8l.databind.X8lDataBeanDefaultParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test080() throws Throwable {
        // Undeclared exception!
        try {
            X8lDataBeanDefaultParser.getString((Map<String, String>) null, ";p3&5:0,", ";p3&5:0,");
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Argument for @NotNull parameter 'settingMap' of com/xenoamess/x8l/databind/X8lDataBeanDefaultParser.getString must not be null
            //
            verifyException("com.xenoamess.x8l.databind.X8lDataBeanDefaultParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test081() throws Throwable {
        // Undeclared exception!
        try {
            X8lDataBeanDefaultParser.getObject((List<Object>) null);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Argument for @NotNull parameter 'list' of com/xenoamess/x8l/databind/X8lDataBeanDefaultParser.getObject must not be null
            //
            verifyException("com.xenoamess.x8l.databind.X8lDataBeanDefaultParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test082() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        Object object0 = X8lDataBeanDefaultParser.getObject(linkedList0);
        assertNull(object0);
    }

    @Test(timeout = 4000)
    public void test083() throws Throwable {
        // Undeclared exception!
        try {
            X8lDataBeanDefaultParser.getLastFromList((List<Integer>) null);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Argument for @NotNull parameter 'list' of com/xenoamess/x8l/databind/X8lDataBeanDefaultParser.getLastFromList must not be null
            //
            verifyException("com.xenoamess.x8l.databind.X8lDataBeanDefaultParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test084() throws Throwable {
        // Undeclared exception!
        try {
            X8lDataBeanDefaultParser.getList((List<Object>) null);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Argument for @NotNull parameter 'list' of com/xenoamess/x8l/databind/X8lDataBeanDefaultParser.getList must not be null
            //
            verifyException("com.xenoamess.x8l.databind.X8lDataBeanDefaultParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test085() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        List<Object> list0 = X8lDataBeanDefaultParser.getList(linkedList0);
        assertTrue(list0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test086() throws Throwable {
        // Undeclared exception!
        try {
            X8lDataBeanDefaultParser.getBoolean((List<Object>) null);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Argument for @NotNull parameter 'list' of com/xenoamess/x8l/databind/X8lDataBeanDefaultParser.getBoolean must not be null
            //
            verifyException("com.xenoamess.x8l.databind.X8lDataBeanDefaultParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test087() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        Boolean boolean0 = X8lDataBeanDefaultParser.getBoolean((List<Object>) linkedList0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        // Undeclared exception!
        try {
            X8lDataBeanDefaultParser.getFloat((List<Object>) null);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Argument for @NotNull parameter 'list' of com/xenoamess/x8l/databind/X8lDataBeanDefaultParser.getFloat must not be null
            //
            verifyException("com.xenoamess.x8l.databind.X8lDataBeanDefaultParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        Float float0 = X8lDataBeanDefaultParser.getFloat((List<Object>) linkedList0);
        assertEquals(Float.NaN, (float) float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test090() throws Throwable {
        // Undeclared exception!
        try {
            X8lDataBeanDefaultParser.getLong((List<Object>) null);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Argument for @NotNull parameter 'list' of com/xenoamess/x8l/databind/X8lDataBeanDefaultParser.getLong must not be null
            //
            verifyException("com.xenoamess.x8l.databind.X8lDataBeanDefaultParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test091() throws Throwable {
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        // Undeclared exception!
        try {
            X8lDataBeanDefaultParser.getInteger((Map<String, String>) hashMap0, (String) null, 0);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Argument for @NotNull parameter 'key' of com/xenoamess/x8l/databind/X8lDataBeanDefaultParser.getInteger must not be null
            //
            verifyException("com.xenoamess.x8l.databind.X8lDataBeanDefaultParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test092() throws Throwable {
        // Undeclared exception!
        try {
            X8lDataBeanDefaultParser.getInteger((Map<String, String>) null, "5Mu", (-105));
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Argument for @NotNull parameter 'settingMap' of com/xenoamess/x8l/databind/X8lDataBeanDefaultParser.getInteger must not be null
            //
            verifyException("com.xenoamess.x8l.databind.X8lDataBeanDefaultParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test093() throws Throwable {
        // Undeclared exception!
        try {
            X8lDataBeanDefaultParser.getInteger((List<Object>) null);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Argument for @NotNull parameter 'list' of com/xenoamess/x8l/databind/X8lDataBeanDefaultParser.getInteger must not be null
            //
            verifyException("com.xenoamess.x8l.databind.X8lDataBeanDefaultParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test094() throws Throwable {
        // Undeclared exception!
        try {
            X8lDataBeanDefaultParser.getLastFromListString((List<Object>) null);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Argument for @NotNull parameter 'list' of com/xenoamess/x8l/databind/X8lDataBeanDefaultParser.getLastFromListString must not be null
            //
            verifyException("com.xenoamess.x8l.databind.X8lDataBeanDefaultParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test095() throws Throwable {
        // Undeclared exception!
        try {
            X8lDataBeanDefaultParser.getString((List<Object>) null);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Argument for @NotNull parameter 'list' of com/xenoamess/x8l/databind/X8lDataBeanDefaultParser.getString must not be null
            //
            verifyException("com.xenoamess.x8l.databind.X8lDataBeanDefaultParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test096() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        String string0 = X8lDataBeanDefaultParser.getString((List<Object>) linkedList0);
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test097() throws Throwable {
        // Undeclared exception!
        try {
            X8lDataBeanDefaultParser.getboolean((List<Object>) null);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Argument for @NotNull parameter 'list' of com/xenoamess/x8l/databind/X8lDataBeanDefaultParser.getboolean must not be null
            //
            verifyException("com.xenoamess.x8l.databind.X8lDataBeanDefaultParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test098() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        boolean boolean0 = X8lDataBeanDefaultParser.getboolean(linkedList0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        // Undeclared exception!
        try {
            X8lDataBeanDefaultParser.getint((List<Object>) null);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Argument for @NotNull parameter 'list' of com/xenoamess/x8l/databind/X8lDataBeanDefaultParser.getint must not be null
            //
            verifyException("com.xenoamess.x8l.databind.X8lDataBeanDefaultParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test100() throws Throwable {
        // Undeclared exception!
        try {
            X8lDataBeanDefaultParser.getlong((List<Object>) null);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Argument for @NotNull parameter 'list' of com/xenoamess/x8l/databind/X8lDataBeanDefaultParser.getlong must not be null
            //
            verifyException("com.xenoamess.x8l.databind.X8lDataBeanDefaultParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test101() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        Long long0 = X8lDataBeanDefaultParser.getLong((List<Object>) linkedList0);
        assertEquals((-1L), (long) long0);
    }

    @Test(timeout = 4000)
    public void test102() throws Throwable {
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        // Undeclared exception!
        try {
            X8lDataBeanDefaultParser.getFloat((Map<String, String>) hashMap0, (String) null);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Argument for @NotNull parameter 'key' of com/xenoamess/x8l/databind/X8lDataBeanDefaultParser.getFloat must not be null
            //
            verifyException("com.xenoamess.x8l.databind.X8lDataBeanDefaultParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test103() throws Throwable {
        // Undeclared exception!
        try {
            X8lDataBeanDefaultParser.getFloat((Map<String, String>) null, "", 1994.603F);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Argument for @NotNull parameter 'settingMap' of com/xenoamess/x8l/databind/X8lDataBeanDefaultParser.getFloat must not be null
            //
            verifyException("com.xenoamess.x8l.databind.X8lDataBeanDefaultParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test104() throws Throwable {
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        // Undeclared exception!
        try {
            X8lDataBeanDefaultParser.getBoolean((Map<String, String>) hashMap0, (String) null, true);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Argument for @NotNull parameter 'key' of com/xenoamess/x8l/databind/X8lDataBeanDefaultParser.getBoolean must not be null
            //
            verifyException("com.xenoamess.x8l.databind.X8lDataBeanDefaultParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test105() throws Throwable {
        // Undeclared exception!
        try {
            X8lDataBeanDefaultParser.getBoolean((Map<String, String>) null, "");
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Argument for @NotNull parameter 'settingMap' of com/xenoamess/x8l/databind/X8lDataBeanDefaultParser.getBoolean must not be null
            //
            verifyException("com.xenoamess.x8l.databind.X8lDataBeanDefaultParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test106() throws Throwable {
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        int int0 = X8lDataBeanDefaultParser.getInteger((Map<String, String>) hashMap0, "2");
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test107() throws Throwable {
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        String string0 = X8lDataBeanDefaultParser.getString((Map<String, String>) hashMap0, "O;lNWCRZs&L(!l{{3");
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test108() throws Throwable {
        X8lDataBeanDefaultParser x8lDataBeanDefaultParser0 = new X8lDataBeanDefaultParser();
    }
}
