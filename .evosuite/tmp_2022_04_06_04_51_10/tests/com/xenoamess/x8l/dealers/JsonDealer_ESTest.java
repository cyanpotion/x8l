/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 05 20:53:37 GMT 2022
 */

package com.xenoamess.x8l.dealers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.xenoamess.x8l.CommentNode;
import com.xenoamess.x8l.ContentNode;
import com.xenoamess.x8l.RootNode;
import com.xenoamess.x8l.TextNode;
import com.xenoamess.x8l.dealers.JsonDealer;
import com.xenoamess.x8l.dealers.LanguageDealer;
import java.io.CharArrayWriter;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.Writer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JsonDealer_ESTest extends JsonDealer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ContentNode contentNode0 = new ContentNode((ContentNode) null);
      RootNode rootNode0 = new RootNode(contentNode0, 0);
      RootNode rootNode1 = new RootNode(rootNode0, 0);
      rootNode0.addAttribute("[");
      JsonDealer jsonDealer0 = JsonDealer.INSTANCE;
      MockFileWriter mockFileWriter0 = new MockFileWriter(" ");
      boolean boolean0 = jsonDealer0.write((Writer) mockFileWriter0, rootNode0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JsonDealer jsonDealer0 = JsonDealer.INSTANCE;
      ContentNode contentNode0 = new ContentNode((ContentNode) null, (byte)62);
      RootNode rootNode0 = new RootNode(contentNode0);
      TextNode textNode0 = new TextNode(rootNode0, "_text");
      MockFile mockFile0 = new MockFile("HSe&MVcbW", "");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      contentNode0.write((Writer) mockFileWriter0, (LanguageDealer) jsonDealer0);
      assertEquals(23L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ContentNode contentNode0 = new ContentNode((ContentNode) null);
      RootNode rootNode0 = new RootNode(contentNode0, 0);
      rootNode0.addAttribute("[");
      JsonDealer jsonDealer0 = JsonDealer.INSTANCE;
      MockFileWriter mockFileWriter0 = new MockFileWriter(" ");
      boolean boolean0 = jsonDealer0.INSTANCE.write((Writer) mockFileWriter0, contentNode0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JsonDealer jsonDealer0 = JsonDealer.INSTANCE;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(4321);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);
      RootNode rootNode0 = new RootNode((ContentNode) null, 2147483645);
      CommentNode commentNode0 = new CommentNode(rootNode0, "target type");
      rootNode0.write((Writer) mockPrintWriter0, (LanguageDealer) jsonDealer0);
      assertEquals("{\"_comment0\":\"target type\"}", charArrayWriter0.toString());
      assertEquals(27, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ContentNode contentNode0 = new ContentNode((ContentNode) null);
      contentNode0.addAttribute("", "", "^Ikz3*vzF9x|");
      JsonDealer jsonDealer0 = JsonDealer.INSTANCE;
      MockFileWriter mockFileWriter0 = new MockFileWriter(" ");
      boolean boolean0 = jsonDealer0.INSTANCE.write((Writer) mockFileWriter0, contentNode0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ContentNode contentNode0 = new ContentNode((ContentNode) null);
      RootNode rootNode0 = new RootNode(contentNode0, 0);
      RootNode rootNode1 = new RootNode(rootNode0, 0);
      rootNode0.addAttribute("Path ");
      boolean boolean0 = JsonDealer.isSingleNameTextPair(rootNode0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RootNode rootNode0 = new RootNode((ContentNode) null);
      rootNode0.addAttribute(" cA]", "commentNode", "commentNode");
      boolean boolean0 = JsonDealer.isSingleNameTextPair(rootNode0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ContentNode contentNode0 = new ContentNode((ContentNode) null);
      RootNode rootNode0 = new RootNode(contentNode0, 0);
      rootNode0.addAttribute("Path ");
      boolean boolean0 = JsonDealer.isSingleNameTextPair(rootNode0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ContentNode contentNode0 = new ContentNode((ContentNode) null);
      contentNode0.addAttribute("", "[", "");
      boolean boolean0 = JsonDealer.isSingleNameTextPair(contentNode0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ContentNode contentNode0 = new ContentNode((ContentNode) null, 0);
      JsonDealer jsonDealer0 = JsonDealer.INSTANCE;
      StringReader stringReader0 = new StringReader("");
      boolean boolean0 = jsonDealer0.read((Reader) stringReader0, contentNode0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JsonDealer jsonDealer0 = JsonDealer.INSTANCE;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(4321);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);
      RootNode rootNode0 = new RootNode((ContentNode) null, 2147483645);
      TextNode textNode0 = new TextNode(rootNode0, "_text");
      boolean boolean0 = jsonDealer0.INSTANCE.write((Writer) mockPrintWriter0, textNode0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JsonDealer jsonDealer0 = JsonDealer.INSTANCE;
      StringReader stringReader0 = new StringReader("_attributes");
      ContentNode contentNode0 = new ContentNode((ContentNode) null, (byte)62);
      RootNode rootNode0 = new RootNode(contentNode0);
      TextNode textNode0 = new TextNode(rootNode0, "_text");
      boolean boolean0 = jsonDealer0.read((Reader) stringReader0, textNode0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JsonDealer jsonDealer0 = JsonDealer.INSTANCE;
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CommentNode commentNode0 = new CommentNode((ContentNode) null, "");
      boolean boolean0 = jsonDealer0.read((Reader) pipedReader0, commentNode0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JsonDealer jsonDealer0 = JsonDealer.INSTANCE;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(4321);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);
      RootNode rootNode0 = new RootNode((ContentNode) null, 2147483645);
      CommentNode commentNode0 = new CommentNode(rootNode0, "target type");
      boolean boolean0 = jsonDealer0.write((Writer) mockPrintWriter0, commentNode0);
      assertEquals(15, charArrayWriter0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonDealer.isSingleNameTextPair((ContentNode) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument for @NotNull parameter 'contentNode' of com/xenoamess/x8l/dealers/JsonDealer.isSingleNameTextPair must not be null
         //
         verifyException("com.xenoamess.x8l.dealers.JsonDealer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ContentNode contentNode0 = new ContentNode((ContentNode) null);
      boolean boolean0 = JsonDealer.isSingleNameTextPair(contentNode0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JsonDealer jsonDealer0 = JsonDealer.INSTANCE;
      String string0 = jsonDealer0.toString();
      assertEquals("com.xenoamess.x8l.dealers.JsonDealer", string0);
  }
}
