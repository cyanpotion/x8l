/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 05 20:55:41 GMT 2022
 */

package com.xenoamess.x8l;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.xenoamess.x8l.AbstractTreeNode;
import com.xenoamess.x8l.CommentNode;
import com.xenoamess.x8l.ContentNode;
import com.xenoamess.x8l.RootNode;
import com.xenoamess.x8l.TextNode;
import com.xenoamess.x8l.databind.X8lDataBeanFieldScheme;
import com.xenoamess.x8l.dealers.LanguageDealer;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ContentNode_ESTest extends ContentNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ContentNode contentNode0 = new ContentNode((ContentNode) null);
      assertNotNull(contentNode0);
      assertEquals("", contentNode0.getName());
      
      RootNode rootNode0 = new RootNode(contentNode0);
      assertNotNull(rootNode0);
      assertEquals("", contentNode0.getName());
      assertEquals("", rootNode0.getName());
      
      rootNode0.trimAttributeSegments();
      assertEquals("", contentNode0.getName());
      assertEquals("", rootNode0.getName());
      
      HashSet<String> hashSet0 = contentNode0.asStringSet();
      assertNotNull(hashSet0);
      assertEquals("", contentNode0.getName());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      contentNode0.addAttribute("}1<I<Cw<6X.J+23I}", "attributes : ", " ");
      assertEquals("}1<I<Cw<6X.J+23I}", contentNode0.getName());
      
      RootNode rootNode1 = (RootNode)rootNode0.changeParent((ContentNode) null);
      assertNotNull(rootNode1);
      assertSame(rootNode0, rootNode1);
      assertSame(rootNode1, rootNode0);
      assertEquals("}1<I<Cw<6X.J+23I}", contentNode0.getName());
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      
      List<ContentNode> list0 = contentNode0.getContentNodesFromChildrenThatNameIs((String) null);
      assertNotNull(list0);
      assertFalse(list0.contains(contentNode0));
      assertEquals("}1<I<Cw<6X.J+23I}", contentNode0.getName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      UnaryOperator<AbstractTreeNode> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      List<AbstractTreeNode> list1 = contentNode0.applyToAllNodes((Function<AbstractTreeNode, AbstractTreeNode>) unaryOperator0);
      assertNotNull(list1);
      assertEquals("}1<I<Cw<6X.J+23I}", contentNode0.getName());
      assertEquals(1, list1.size());
      assertFalse(list1.isEmpty());
      
      contentNode0.appendAll(list1);
      assertEquals("}1<I<Cw<6X.J+23I}", contentNode0.getName());
      assertEquals(1, list1.size());
      assertFalse(list1.isEmpty());
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(" "));
      assertEquals(0, linkedList0.size());
      
      List<ContentNode> list2 = contentNode0.getContentNodesFromChildren();
      assertNotNull(list2);
      assertFalse(list2.equals((Object)list0));
      assertNotSame(list2, list0);
      assertTrue(list2.contains(contentNode0));
      assertEquals("}1<I<Cw<6X.J+23I}", contentNode0.getName());
      assertFalse(list2.isEmpty());
      assertEquals(1, list2.size());
      
      LinkedList<AbstractTreeNode> linkedList1 = new LinkedList<AbstractTreeNode>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      CommentNode commentNode0 = new CommentNode(contentNode0, "");
      assertNotNull(commentNode0);
      assertEquals("}1<I<Cw<6X.J+23I}", contentNode0.getName());
      assertEquals("", commentNode0.getTextContent());
      
      boolean boolean0 = linkedList1.add((AbstractTreeNode) commentNode0);
      assertTrue(boolean0);
      assertEquals("}1<I<Cw<6X.J+23I}", contentNode0.getName());
      assertEquals(1, linkedList1.size());
      assertEquals("", commentNode0.getTextContent());
      
      CommentNode commentNode1 = (CommentNode)linkedList1.removeFirst();
      assertNotNull(commentNode1);
      assertSame(commentNode1, commentNode0);
      assertEquals(0, linkedList1.size());
      assertEquals("", commentNode1.getTextContent());
      
      String string0 = contentNode0.getName();
      assertNotNull(string0);
      assertEquals("}1<I<Cw<6X.J+23I}", string0);
      assertEquals("}1<I<Cw<6X.J+23I}", contentNode0.getName());
      
      rootNode0.appendAll(linkedList1);
      assertSame(rootNode0, rootNode1);
      assertEquals("}1<I<Cw<6X.J+23I}", contentNode0.getName());
      assertEquals("", rootNode0.getName());
      assertEquals(0, linkedList1.size());
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      HashMap<String, String> hashMap1 = rootNode0.asStringMapTrimmedFill(hashMap0);
      assertNotNull(hashMap1);
      assertSame(rootNode0, rootNode1);
      assertSame(hashMap0, hashMap1);
      assertSame(hashMap1, hashMap0);
      assertEquals("}1<I<Cw<6X.J+23I}", contentNode0.getName());
      assertEquals("", rootNode0.getName());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      rootNode0.addAttribute("}1<I<Cw<6X.J+23I}", "}1<I<Cw<6X.J+23I}", "3D~=?\f+Rq,/7U`,M");
      assertSame(rootNode0, rootNode1);
      assertEquals("}1<I<Cw<6X.J+23I}", contentNode0.getName());
      assertEquals("}1<I<Cw<6X.J+23I}", rootNode0.getName());
      
      List<CommentNode> list3 = contentNode0.getCommentNodesFromChildren();
      assertNotNull(list3);
      assertTrue(list3.contains(commentNode0));
      assertEquals("}1<I<Cw<6X.J+23I}", contentNode0.getName());
      assertEquals(1, list3.size());
      assertFalse(list3.isEmpty());
      
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      assertNotNull(hashMap2);
      assertEquals(0, hashMap2.size());
      assertTrue(hashMap2.isEmpty());
      
      String string1 = contentNode0.getName();
      assertNotNull(string1);
      assertEquals("}1<I<Cw<6X.J+23I}", string1);
      assertEquals("}1<I<Cw<6X.J+23I}", contentNode0.getName());
      
      List<String> list4 = contentNode0.asStringListTrimmed();
      assertNotNull(list4);
      assertFalse(list4.contains(" "));
      assertEquals("}1<I<Cw<6X.J+23I}", contentNode0.getName());
      assertTrue(list4.isEmpty());
      assertEquals(0, list4.size());
      
      HashSet<String> hashSet1 = rootNode0.asStringSetTrimmed();
      assertNotNull(hashSet1);
      assertSame(rootNode0, rootNode1);
      assertFalse(hashSet1.contains(" "));
      assertEquals("}1<I<Cw<6X.J+23I}", contentNode0.getName());
      assertEquals("}1<I<Cw<6X.J+23I}", rootNode0.getName());
      assertTrue(hashSet1.isEmpty());
      assertEquals(0, hashSet1.size());
      
      rootNode0.addAttribute("com.xenoamess.x8l.ContentNode", "com.xenoamess.x8l.ContentNode", " is not implemented yet.");
      assertSame(rootNode0, rootNode1);
      assertEquals("}1<I<Cw<6X.J+23I}", contentNode0.getName());
      assertEquals("}1<I<Cw<6X.J+23I}", rootNode0.getName());
      
      HashMap<String, String> hashMap3 = rootNode0.asStringMapTrimmedFill((HashMap<String, String>) hashMap0);
      assertNotNull(hashMap3);
      assertTrue(hashMap3.equals((Object)hashMap2));
      assertSame(rootNode0, rootNode1);
      assertSame(hashMap0, hashMap1);
      assertNotSame(hashMap3, hashMap2);
      assertEquals("}1<I<Cw<6X.J+23I}", contentNode0.getName());
      assertEquals("}1<I<Cw<6X.J+23I}", rootNode0.getName());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap3.isEmpty());
      assertEquals(0, hashMap3.size());
      
      // Undeclared exception!
      try { 
        contentNode0.trimForce();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RootNode rootNode0 = new RootNode((ContentNode) null, (-2166));
      assertNotNull(rootNode0);
      assertEquals("", rootNode0.getName());
      
      RootNode rootNode1 = new RootNode(rootNode0);
      assertNotNull(rootNode1);
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      
      RootNode rootNode2 = rootNode1.copy();
      assertNotNull(rootNode2);
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertFalse(rootNode2.equals((Object)rootNode0));
      assertTrue(rootNode2.equals((Object)rootNode1));
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode0, rootNode2);
      assertNotSame(rootNode1, rootNode2);
      assertNotSame(rootNode1, rootNode0);
      assertNotSame(rootNode2, rootNode0);
      assertNotSame(rootNode2, rootNode1);
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      assertEquals("", rootNode2.getName());
      
      List<ContentNode> list0 = rootNode1.getContentNodesFromChildren(1722);
      assertNotNull(list0);
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertFalse(rootNode0.equals((Object)rootNode2));
      assertTrue(rootNode1.equals((Object)rootNode2));
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode0, rootNode2);
      assertNotSame(rootNode1, rootNode2);
      assertNotSame(rootNode1, rootNode0);
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      List<TextNode> list1 = rootNode0.getTextNodesFromChildren((-2166));
      assertNotNull(list1);
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertFalse(rootNode0.equals((Object)rootNode2));
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode0, rootNode2);
      assertEquals("", rootNode0.getName());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      
      X8lDataBeanFieldScheme x8lDataBeanFieldScheme0 = X8lDataBeanFieldScheme.X8LPATH;
      String[] stringArray0 = new String[0];
      List<Object> list2 = rootNode2.fetch(x8lDataBeanFieldScheme0, stringArray0);
      assertNotNull(list2);
      assertEquals(0, stringArray0.length);
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertFalse(rootNode0.equals((Object)rootNode2));
      assertTrue(rootNode1.equals((Object)rootNode2));
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertFalse(rootNode2.equals((Object)rootNode0));
      assertTrue(rootNode2.equals((Object)rootNode1));
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode0, rootNode2);
      assertNotSame(rootNode1, rootNode2);
      assertNotSame(rootNode1, rootNode0);
      assertNotSame(rootNode2, rootNode0);
      assertNotSame(rootNode2, rootNode1);
      assertFalse(list2.contains((-2166)));
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      assertEquals("", rootNode2.getName());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      
      ContentNode contentNode0 = new ContentNode(rootNode2);
      assertNotNull(contentNode0);
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertFalse(rootNode0.equals((Object)rootNode2));
      assertFalse(rootNode1.equals((Object)rootNode2));
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertFalse(rootNode2.equals((Object)rootNode0));
      assertFalse(rootNode2.equals((Object)rootNode1));
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      assertEquals("", rootNode2.getName());
      assertEquals("", contentNode0.getName());
      
      List<ContentNode> list3 = contentNode0.getContentNodesFromChildrenThatNameIs(" vs ", 4086);
      assertNotNull(list3);
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertFalse(rootNode0.equals((Object)rootNode2));
      assertFalse(rootNode1.equals((Object)rootNode2));
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertFalse(rootNode2.equals((Object)rootNode0));
      assertFalse(rootNode2.equals((Object)rootNode1));
      assertTrue(list3.equals((Object)list0));
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode0, rootNode2);
      assertNotSame(rootNode1, rootNode2);
      assertNotSame(rootNode1, rootNode0);
      assertNotSame(rootNode2, rootNode0);
      assertNotSame(rootNode2, rootNode1);
      assertNotSame(list3, list0);
      assertFalse(list3.contains(contentNode0));
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      assertEquals("", rootNode2.getName());
      assertEquals("", contentNode0.getName());
      assertEquals(0, list3.size());
      assertTrue(list3.isEmpty());
      
      HashMap<String, String> hashMap0 = contentNode0.asStringMapFill((HashMap<String, String>) null);
      assertNull(hashMap0);
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertFalse(rootNode0.equals((Object)rootNode2));
      assertFalse(rootNode1.equals((Object)rootNode2));
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertFalse(rootNode2.equals((Object)rootNode0));
      assertFalse(rootNode2.equals((Object)rootNode1));
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode0, rootNode2);
      assertNotSame(rootNode1, rootNode2);
      assertNotSame(rootNode1, rootNode0);
      assertNotSame(rootNode2, rootNode0);
      assertNotSame(rootNode2, rootNode1);
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      assertEquals("", rootNode2.getName());
      assertEquals("", contentNode0.getName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RootNode rootNode0 = new RootNode((ContentNode) null);
      assertNotNull(rootNode0);
      assertEquals("", rootNode0.getName());
      
      List<ContentNode> list0 = rootNode0.getContentNodesFromChildren();
      assertNotNull(list0);
      assertEquals("", rootNode0.getName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      ContentNode contentNode0 = new ContentNode(rootNode0, 0);
      assertNotNull(contentNode0);
      assertEquals("", rootNode0.getName());
      assertEquals("", contentNode0.getName());
      
      ContentNode contentNode1 = contentNode0.copy();
      assertNotNull(contentNode1);
      assertTrue(contentNode1.equals((Object)contentNode0));
      assertNotSame(contentNode0, contentNode1);
      assertNotSame(contentNode1, contentNode0);
      assertEquals("", rootNode0.getName());
      assertEquals("", contentNode0.getName());
      assertEquals("", contentNode1.getName());
      
      contentNode1.append(rootNode0);
      assertFalse(contentNode0.equals((Object)contentNode1));
      assertFalse(contentNode1.equals((Object)contentNode0));
      assertNotSame(contentNode0, contentNode1);
      assertNotSame(contentNode1, contentNode0);
      assertEquals("", rootNode0.getName());
      assertEquals("", contentNode0.getName());
      assertEquals("", contentNode1.getName());
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = " ";
      stringArray0[1] = " ";
      stringArray0[2] = "";
      stringArray0[3] = " ";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = " ";
      List<Integer> list1 = new LinkedList<Integer>();
      assertNotNull(list1);
      assertFalse(list1.contains(0));
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      
      List<String> list2 = contentNode0.asStringList();
      assertNotNull(list2);
      assertFalse(contentNode0.equals((Object)contentNode1));
      assertNotSame(contentNode0, contentNode1);
      assertFalse(list2.contains(" "));
      assertEquals("", rootNode0.getName());
      assertEquals("", contentNode0.getName());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(" "));
      assertEquals(0, linkedList0.size());
      
      LinkedList<String> linkedList1 = rootNode0.asStringCollectionTrimmedFill(linkedList0);
      assertNotNull(linkedList1);
      assertSame(linkedList1, linkedList0);
      assertSame(linkedList0, linkedList1);
      assertFalse(linkedList1.contains(" "));
      assertFalse(linkedList0.contains(" "));
      assertEquals(0, linkedList1.size());
      assertEquals("", rootNode0.getName());
      assertEquals(0, linkedList0.size());
      
      contentNode0.clear();
      assertFalse(contentNode0.equals((Object)contentNode1));
      assertNotSame(contentNode0, contentNode1);
      assertEquals("", rootNode0.getName());
      assertEquals("", contentNode0.getName());
      
      boolean boolean0 = contentNode0.removeChild((AbstractTreeNode) null);
      assertFalse(contentNode0.equals((Object)contentNode1));
      assertNotSame(contentNode0, contentNode1);
      assertFalse(boolean0);
      assertEquals("", rootNode0.getName());
      assertEquals("", contentNode0.getName());
      
      List<ContentNode> list3 = contentNode0.getContentNodesFromChildrenThatNameIs("");
      assertNotNull(list3);
      assertFalse(contentNode0.equals((Object)contentNode1));
      assertTrue(list3.equals((Object)list0));
      assertNotSame(contentNode0, contentNode1);
      assertNotSame(list3, list0);
      assertFalse(list3.contains(contentNode0));
      assertEquals("", rootNode0.getName());
      assertEquals("", contentNode0.getName());
      assertTrue(list3.isEmpty());
      assertEquals(0, list3.size());
      
      contentNode1.show();
      assertFalse(contentNode0.equals((Object)contentNode1));
      assertFalse(contentNode1.equals((Object)contentNode0));
      assertNotSame(contentNode0, contentNode1);
      assertNotSame(contentNode1, contentNode0);
      assertEquals("", rootNode0.getName());
      assertEquals("", contentNode0.getName());
      assertEquals("", contentNode1.getName());
      
      contentNode0.addAttributeFromTranscodedExpression("uZx,3#");
      assertFalse(contentNode0.equals((Object)contentNode1));
      assertNotSame(contentNode0, contentNode1);
      assertEquals("", rootNode0.getName());
      assertEquals("uZx,3#", contentNode0.getName());
      
      rootNode0.format(0);
      assertEquals("", rootNode0.getName());
      
      contentNode0.addAttributeFromTranscodedExpression("");
      assertFalse(contentNode0.equals((Object)contentNode1));
      assertNotSame(contentNode0, contentNode1);
      assertEquals("", rootNode0.getName());
      assertEquals("uZx,3#", contentNode0.getName());
      
      HashSet<String> hashSet0 = contentNode1.asStringSetTrimmed();
      assertNotNull(hashSet0);
      assertFalse(contentNode0.equals((Object)contentNode1));
      assertFalse(contentNode1.equals((Object)contentNode0));
      assertNotSame(contentNode0, contentNode1);
      assertNotSame(contentNode1, contentNode0);
      assertFalse(hashSet0.contains(" "));
      assertEquals("", rootNode0.getName());
      assertEquals("uZx,3#", contentNode0.getName());
      assertEquals("", contentNode1.getName());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      StringWriter stringWriter0 = new StringWriter(1371);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      contentNode0.write((Writer) stringWriter0);
      assertFalse(contentNode0.equals((Object)contentNode1));
      assertNotSame(contentNode0, contentNode1);
      assertEquals("", rootNode0.getName());
      assertEquals("uZx,3#", contentNode0.getName());
      assertEquals("<uZx,3# >>", stringWriter0.toString());
      
      List<String> list4 = contentNode1.asStringList();
      assertNotNull(list4);
      assertFalse(contentNode0.equals((Object)contentNode1));
      assertFalse(contentNode1.equals((Object)contentNode0));
      assertTrue(list4.equals((Object)list2));
      assertNotSame(contentNode0, contentNode1);
      assertNotSame(contentNode1, contentNode0);
      assertNotSame(list4, list2);
      assertFalse(list4.contains(" "));
      assertEquals("", rootNode0.getName());
      assertEquals("uZx,3#", contentNode0.getName());
      assertEquals("", contentNode1.getName());
      assertEquals(0, list4.size());
      assertTrue(list4.isEmpty());
      
      List<ContentNode> list5 = contentNode0.getContentNodesFromChildren((-267));
      assertNotNull(list5);
      assertFalse(contentNode0.equals((Object)contentNode1));
      assertTrue(list5.equals((Object)list3));
      assertTrue(list5.equals((Object)list0));
      assertNotSame(contentNode0, contentNode1);
      assertNotSame(list5, list0);
      assertNotSame(list5, list3);
      assertFalse(list5.contains(contentNode0));
      assertEquals("", rootNode0.getName());
      assertEquals("uZx,3#", contentNode0.getName());
      assertTrue(list5.isEmpty());
      assertEquals(0, list5.size());
      
      LinkedList<String> linkedList2 = rootNode0.asStringCollectionTrimmedFill(linkedList0);
      assertNotNull(linkedList2);
      assertSame(linkedList2, linkedList1);
      assertSame(linkedList2, linkedList0);
      assertSame(linkedList0, linkedList1);
      assertSame(linkedList0, linkedList2);
      assertTrue(linkedList2.contains(""));
      assertFalse(linkedList2.contains(" "));
      assertTrue(linkedList0.contains(""));
      assertFalse(linkedList0.contains(" "));
      assertEquals("", rootNode0.getName());
      assertEquals(2, linkedList2.size());
      assertEquals(2, linkedList0.size());
      
      boolean boolean1 = contentNode0.removeChild((AbstractTreeNode) null);
      assertFalse(contentNode0.equals((Object)contentNode1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(contentNode0, contentNode1);
      assertFalse(boolean1);
      assertEquals("", rootNode0.getName());
      assertEquals("uZx,3#", contentNode0.getName());
      
      Map<String, String> map0 = contentNode0.getAttributes();
      assertNotNull(map0);
      assertFalse(contentNode0.equals((Object)contentNode1));
      assertNotSame(contentNode0, contentNode1);
      assertEquals("", rootNode0.getName());
      assertEquals("uZx,3#", contentNode0.getName());
      assertEquals(2, map0.size());
      assertFalse(map0.isEmpty());
      
      rootNode0.trimForce();
      assertEquals("", rootNode0.getName());
      
      List<String> list6 = contentNode0.asStringList();
      assertNotNull(list6);
      assertTrue(list6.equals((Object)list4));
      assertTrue(list6.equals((Object)list2));
      assertFalse(contentNode0.equals((Object)contentNode1));
      assertNotSame(list6, list4);
      assertNotSame(list6, list2);
      assertNotSame(contentNode0, contentNode1);
      assertFalse(list6.contains(" "));
      assertEquals("", rootNode0.getName());
      assertTrue(list6.isEmpty());
      assertEquals(0, list6.size());
      assertEquals("uZx,3#", contentNode0.getName());
      
      boolean boolean2 = contentNode1.equals(list2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(contentNode0.equals((Object)contentNode1));
      assertFalse(contentNode1.equals((Object)contentNode0));
      assertTrue(list2.equals((Object)list6));
      assertTrue(list2.equals((Object)list4));
      assertNotSame(contentNode0, contentNode1);
      assertNotSame(contentNode1, contentNode0);
      assertNotSame(list2, list4);
      assertNotSame(list2, list6);
      assertFalse(list2.contains(" "));
      assertFalse(boolean2);
      assertEquals("", rootNode0.getName());
      assertEquals("uZx,3#", contentNode0.getName());
      assertEquals("", contentNode1.getName());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      
      contentNode0.removeAttribute("uZx,3#");
      assertFalse(contentNode0.equals((Object)contentNode1));
      assertNotSame(contentNode0, contentNode1);
      assertEquals("", rootNode0.getName());
      assertEquals("", contentNode0.getName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RootNode rootNode0 = new RootNode((ContentNode) null);
      assertNotNull(rootNode0);
      assertEquals("", rootNode0.getName());
      
      StringReader stringReader0 = new StringReader("]ha';?l+O R}^`p");
      assertNotNull(stringReader0);
      
      rootNode0.read((Reader) stringReader0);
      assertEquals("", rootNode0.getName());
      
      rootNode0.trimForce();
      assertEquals("", rootNode0.getName());
      
      rootNode0.trim();
      assertEquals("", rootNode0.getName());
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>(3, 3);
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      HashMap<String, String> hashMap1 = rootNode0.asStringMapTrimmedFill(hashMap0);
      assertNotNull(hashMap1);
      assertSame(hashMap0, hashMap1);
      assertSame(hashMap1, hashMap0);
      assertEquals("", rootNode0.getName());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      RootNode rootNode1 = new RootNode((ContentNode) null, 313);
      assertNotNull(rootNode1);
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertEquals("", rootNode1.getName());
      
      rootNode1.addAttribute("com.xenoamess.commons.primitive.iterators.AbstractShortSpliterator", " ");
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertNotSame(rootNode1, rootNode0);
      assertEquals("com.xenoamess.commons.primitive.iterators.AbstractShortSpliterator", rootNode1.getName());
      
      HashSet<String> hashSet0 = rootNode1.asStringSet();
      assertNotNull(hashSet0);
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertNotSame(rootNode1, rootNode0);
      assertFalse(hashSet0.contains("com.xenoamess.commons.primitive.iterators.AbstractShortSpliterator"));
      assertEquals("com.xenoamess.commons.primitive.iterators.AbstractShortSpliterator", rootNode1.getName());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      boolean boolean0 = rootNode0.equals(rootNode1);
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode1, rootNode0);
      assertFalse(boolean0);
      assertEquals("", rootNode0.getName());
      assertEquals("com.xenoamess.commons.primitive.iterators.AbstractShortSpliterator", rootNode1.getName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RootNode rootNode0 = new RootNode((ContentNode) null);
      assertNotNull(rootNode0);
      assertEquals("", rootNode0.getName());
      
      StringReader stringReader0 = new StringReader("]ha';?l+O R}^`p");
      assertNotNull(stringReader0);
      
      rootNode0.trimForce();
      assertEquals("", rootNode0.getName());
      
      rootNode0.trim();
      assertEquals("", rootNode0.getName());
      
      RootNode rootNode1 = new RootNode((ContentNode) null, 313);
      assertNotNull(rootNode1);
      assertTrue(rootNode1.equals((Object)rootNode0));
      assertEquals("", rootNode1.getName());
      
      rootNode1.addAttribute("com.xenoamess.commons.primitive.iterators.AbstractShortSpliterator", " ");
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertNotSame(rootNode1, rootNode0);
      assertEquals("com.xenoamess.commons.primitive.iterators.AbstractShortSpliterator", rootNode1.getName());
      
      HashSet<String> hashSet0 = rootNode1.asStringSet();
      assertNotNull(hashSet0);
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertNotSame(rootNode1, rootNode0);
      assertFalse(hashSet0.contains(" "));
      assertEquals("com.xenoamess.commons.primitive.iterators.AbstractShortSpliterator", rootNode1.getName());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      boolean boolean0 = rootNode0.equals(rootNode1);
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode1, rootNode0);
      assertFalse(boolean0);
      assertEquals("", rootNode0.getName());
      assertEquals("com.xenoamess.commons.primitive.iterators.AbstractShortSpliterator", rootNode1.getName());
      
      List<String> list0 = rootNode0.getAttributeSegments();
      assertNotNull(list0);
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertNotSame(rootNode0, rootNode1);
      assertFalse(list0.contains(" "));
      assertEquals("", rootNode0.getName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      List<CommentNode> list1 = rootNode1.getCommentNodesFromChildren(3);
      assertNotNull(list1);
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertNotSame(rootNode1, rootNode0);
      assertEquals("com.xenoamess.commons.primitive.iterators.AbstractShortSpliterator", rootNode1.getName());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RootNode rootNode0 = new RootNode((ContentNode) null);
      assertNotNull(rootNode0);
      assertEquals("", rootNode0.getName());
      
      StringReader stringReader0 = new StringReader("]ha';?l+O R}^b}");
      assertNotNull(stringReader0);
      
      rootNode0.addAttributeFromTranscodedExpression("Argument for @NotNull parameter '%s' of %s.%s must not be null");
      assertEquals("Argument for @NotNull parameter '%s' of %s.%s must not be null", rootNode0.getName());
      
      stringReader0.reset();
      rootNode0.read((Reader) stringReader0);
      assertEquals("", rootNode0.getName());
      
      rootNode0.trimForce();
      assertEquals("", rootNode0.getName());
      
      rootNode0.trim();
      assertEquals("", rootNode0.getName());
      
      String string0 = rootNode0.getName();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("", rootNode0.getName());
      
      HashSet<String> hashSet0 = rootNode0.asStringSetTrimmed();
      assertNotNull(hashSet0);
      assertFalse(hashSet0.contains(string0));
      assertTrue(hashSet0.contains("]ha';?l+O R}^b}"));
      assertEquals("", rootNode0.getName());
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ContentNode contentNode0 = new ContentNode((ContentNode) null);
      assertNotNull(contentNode0);
      assertEquals("", contentNode0.getName());
      
      RootNode rootNode0 = new RootNode(contentNode0);
      assertNotNull(rootNode0);
      assertEquals("", contentNode0.getName());
      assertEquals("", rootNode0.getName());
      
      rootNode0.trimAttributeSegments();
      assertEquals("", contentNode0.getName());
      assertEquals("", rootNode0.getName());
      
      HashSet<String> hashSet0 = contentNode0.asStringSet();
      assertNotNull(hashSet0);
      assertEquals("", contentNode0.getName());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      contentNode0.addAttribute("}1<I<Cw<6X.J+23I}", "attributes : ", " ");
      assertEquals("}1<I<Cw<6X.J+23I}", contentNode0.getName());
      
      List<ContentNode> list0 = contentNode0.getContentNodesFromChildrenThatNameIs((String) null);
      assertNotNull(list0);
      assertFalse(list0.contains(contentNode0));
      assertEquals("}1<I<Cw<6X.J+23I}", contentNode0.getName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      UnaryOperator<AbstractTreeNode> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      List<AbstractTreeNode> list1 = contentNode0.applyToAllNodes((Function<AbstractTreeNode, AbstractTreeNode>) unaryOperator0);
      assertNotNull(list1);
      assertEquals("}1<I<Cw<6X.J+23I}", contentNode0.getName());
      assertEquals(2, list1.size());
      assertFalse(list1.isEmpty());
      
      contentNode0.appendAll(list1);
      assertEquals("}1<I<Cw<6X.J+23I}", contentNode0.getName());
      assertEquals(2, list1.size());
      assertFalse(list1.isEmpty());
      
      List<String> list2 = rootNode0.asStringList();
      assertNotNull(list2);
      assertFalse(list2.contains("}1<I<Cw<6X.J+23I}"));
      assertEquals("}1<I<Cw<6X.J+23I}", contentNode0.getName());
      assertEquals("", rootNode0.getName());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      
      List<ContentNode> list3 = contentNode0.getContentNodesFromChildren();
      assertNotNull(list3);
      assertFalse(list3.equals((Object)list0));
      assertNotSame(list3, list0);
      assertTrue(list3.contains(contentNode0));
      assertEquals("}1<I<Cw<6X.J+23I}", contentNode0.getName());
      assertEquals(3, list3.size());
      assertFalse(list3.isEmpty());
      
      LinkedList<AbstractTreeNode> linkedList0 = new LinkedList<AbstractTreeNode>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      CommentNode commentNode0 = new CommentNode(contentNode0, "");
      assertNotNull(commentNode0);
      assertEquals("}1<I<Cw<6X.J+23I}", contentNode0.getName());
      assertEquals("", commentNode0.getTextContent());
      
      boolean boolean0 = linkedList0.add((AbstractTreeNode) commentNode0);
      assertTrue(boolean0);
      assertEquals("}1<I<Cw<6X.J+23I}", contentNode0.getName());
      assertEquals(1, linkedList0.size());
      assertEquals("", commentNode0.getTextContent());
      
      String string0 = contentNode0.getName();
      assertNotNull(string0);
      assertEquals("}1<I<Cw<6X.J+23I}", string0);
      assertEquals("}1<I<Cw<6X.J+23I}", contentNode0.getName());
      
      rootNode0.appendAll(linkedList0);
      assertEquals("}1<I<Cw<6X.J+23I}", contentNode0.getName());
      assertEquals("", rootNode0.getName());
      assertEquals(1, linkedList0.size());
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      HashMap<String, String> hashMap1 = rootNode0.asStringMapTrimmedFill(hashMap0);
      assertNotNull(hashMap1);
      assertSame(hashMap0, hashMap1);
      assertSame(hashMap1, hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("}1<I<Cw<6X.J+23I}", contentNode0.getName());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertEquals("", rootNode0.getName());
      
      rootNode0.addAttribute("}1<I<Cw<6X.J+23I}", "}1<I<Cw<6X.J+23I}", "3D~=?\f+Rq,/7U`,M");
      assertEquals("}1<I<Cw<6X.J+23I}", contentNode0.getName());
      assertEquals("}1<I<Cw<6X.J+23I}", rootNode0.getName());
      
      List<CommentNode> list4 = contentNode0.getCommentNodesFromChildren();
      assertNotNull(list4);
      assertTrue(list4.contains(commentNode0));
      assertEquals("}1<I<Cw<6X.J+23I}", contentNode0.getName());
      assertEquals(1, list4.size());
      assertFalse(list4.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RootNode rootNode0 = new RootNode((ContentNode) null);
      assertNotNull(rootNode0);
      assertEquals("", rootNode0.getName());
      
      ContentNode contentNode0 = new ContentNode(rootNode0);
      assertNotNull(contentNode0);
      assertEquals("", rootNode0.getName());
      assertEquals("", contentNode0.getName());
      
      contentNode0.close();
      assertEquals("", rootNode0.getName());
      assertEquals("", contentNode0.getName());
      
      X8lDataBeanFieldScheme x8lDataBeanFieldScheme0 = X8lDataBeanFieldScheme.X8LPATH;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      ContentNode contentNode1 = (ContentNode)contentNode0.removeParent();
      assertNotNull(contentNode1);
      assertSame(contentNode0, contentNode1);
      assertSame(contentNode1, contentNode0);
      assertEquals("", rootNode0.getName());
      assertEquals("", contentNode0.getName());
      assertEquals("", contentNode1.getName());
      
      stringArray0[1] = "";
      stringArray0[2] = " ";
      stringArray0[4] = "";
      stringArray0[5] = " ";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(""));
      assertEquals(0, linkedList0.size());
      
      LinkedList<String> linkedList1 = rootNode0.asStringCollectionFill(linkedList0);
      assertNotNull(linkedList1);
      assertSame(linkedList0, linkedList1);
      assertSame(linkedList1, linkedList0);
      assertFalse(linkedList0.contains(""));
      assertFalse(linkedList1.contains(""));
      assertEquals("", rootNode0.getName());
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      
      boolean boolean0 = linkedList1.add(" ");
      assertSame(linkedList0, linkedList1);
      assertSame(linkedList1, linkedList0);
      assertTrue(linkedList0.contains(" "));
      assertFalse(linkedList0.contains(""));
      assertTrue(linkedList1.contains(" "));
      assertFalse(linkedList1.contains(""));
      assertTrue(boolean0);
      assertEquals("", rootNode0.getName());
      assertEquals(1, linkedList0.size());
      assertEquals(1, linkedList1.size());
      
      stringArray0[6] = "";
      List<Object> list0 = contentNode1.fetch(x8lDataBeanFieldScheme0, "");
      assertNotNull(list0);
      assertSame(contentNode0, contentNode1);
      assertSame(contentNode1, contentNode0);
      assertFalse(list0.contains(""));
      assertEquals("", rootNode0.getName());
      assertEquals("", contentNode0.getName());
      assertEquals("", contentNode1.getName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      RootNode rootNode1 = new RootNode(contentNode0, 0);
      assertNotNull(rootNode1);
      assertTrue(rootNode1.equals((Object)rootNode0));
      assertEquals("", rootNode1.getName());
      assertEquals("", rootNode0.getName());
      assertEquals("", contentNode0.getName());
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      contentNode0.read((Reader) stringReader0);
      assertTrue(rootNode0.equals((Object)rootNode1));
      assertNotSame(rootNode0, rootNode1);
      assertSame(contentNode0, contentNode1);
      assertEquals("", rootNode0.getName());
      assertEquals("", contentNode0.getName());
      
      String string0 = "PHv6kJ#.p";
      Map<String, String> map0 = contentNode0.asStringMapTrimmed();
      assertNotNull(map0);
      assertTrue(rootNode0.equals((Object)rootNode1));
      assertNotSame(rootNode0, rootNode1);
      assertSame(contentNode0, contentNode1);
      assertEquals("", rootNode0.getName());
      assertEquals("", contentNode0.getName());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      assertNotNull(linkedList2);
      assertFalse(linkedList2.contains(0));
      assertEquals(0, linkedList2.size());
      
      // Undeclared exception!
      try { 
        rootNode1.applyToAllNodes((List<Integer>) linkedList2, (Function<AbstractTreeNode, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.xenoamess.x8l.ContentNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RootNode rootNode0 = new RootNode((ContentNode) null, 37);
      assertNotNull(rootNode0);
      assertEquals("", rootNode0.getName());
      
      RootNode rootNode1 = rootNode0.copy();
      assertNotNull(rootNode1);
      assertTrue(rootNode1.equals((Object)rootNode0));
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode1, rootNode0);
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = " ";
      stringArray0[1] = "";
      stringArray0[2] = " ";
      List<Object> list0 = rootNode0.fetch(stringArray0);
      assertNotNull(list0);
      assertEquals(3, stringArray0.length);
      assertTrue(rootNode0.equals((Object)rootNode1));
      assertNotSame(rootNode0, rootNode1);
      assertFalse(list0.contains(""));
      assertEquals("", rootNode0.getName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      rootNode1.addAttribute(" ");
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode1, rootNode0);
      assertEquals("", rootNode0.getName());
      assertEquals(" ", rootNode1.getName());
      
      List<ContentNode> list1 = rootNode1.getContentNodesFromChildren();
      assertNotNull(list1);
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode1, rootNode0);
      assertEquals("", rootNode0.getName());
      assertEquals(" ", rootNode1.getName());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      
      rootNode1.addAttributeFromTranscodedExpression("LmrClv=]l7UIo");
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode1, rootNode0);
      assertEquals("", rootNode0.getName());
      assertEquals(" ", rootNode1.getName());
      
      rootNode1.append((AbstractTreeNode) null);
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode1, rootNode0);
      assertEquals("", rootNode0.getName());
      assertEquals(" ", rootNode1.getName());
      
      rootNode1.addAttribute("", "");
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode1, rootNode0);
      assertEquals("", rootNode0.getName());
      assertEquals(" ", rootNode1.getName());
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals((-1), int0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      rootNode1.read((Reader) stringReader0);
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode1, rootNode0);
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      
      // Undeclared exception!
      try { 
        rootNode0.removeAttribute("';Y49.:8tS+");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ContentNode contentNode0 = new ContentNode((ContentNode) null);
      assertNotNull(contentNode0);
      assertEquals("", contentNode0.getName());
      
      ContentNode contentNode1 = new ContentNode(contentNode0, 0);
      assertNotNull(contentNode1);
      assertFalse(contentNode1.equals((Object)contentNode0));
      assertEquals("", contentNode0.getName());
      assertEquals("", contentNode1.getName());
      
      RootNode rootNode0 = new RootNode(contentNode1);
      assertNotNull(rootNode0);
      assertFalse(contentNode0.equals((Object)contentNode1));
      assertFalse(contentNode1.equals((Object)contentNode0));
      assertEquals("", contentNode0.getName());
      assertEquals("", contentNode1.getName());
      assertEquals("", rootNode0.getName());
      
      RootNode rootNode1 = new RootNode(rootNode0, 0);
      assertNotNull(rootNode1);
      assertFalse(contentNode0.equals((Object)contentNode1));
      assertFalse(contentNode1.equals((Object)contentNode0));
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertEquals("", contentNode0.getName());
      assertEquals("", contentNode1.getName());
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      
      RootNode rootNode2 = rootNode1.copy();
      assertNotNull(rootNode2);
      assertFalse(contentNode0.equals((Object)contentNode1));
      assertFalse(contentNode1.equals((Object)contentNode0));
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertTrue(rootNode2.equals((Object)rootNode1));
      assertFalse(rootNode2.equals((Object)rootNode0));
      assertNotSame(contentNode0, contentNode1);
      assertNotSame(contentNode1, contentNode0);
      assertNotSame(rootNode0, rootNode2);
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode1, rootNode0);
      assertNotSame(rootNode1, rootNode2);
      assertNotSame(rootNode2, rootNode0);
      assertNotSame(rootNode2, rootNode1);
      assertEquals("", contentNode0.getName());
      assertEquals("", contentNode1.getName());
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      assertEquals("", rootNode2.getName());
      
      String string0 = rootNode2.getName();
      assertNotNull(string0);
      assertFalse(contentNode0.equals((Object)contentNode1));
      assertFalse(contentNode1.equals((Object)contentNode0));
      assertFalse(rootNode0.equals((Object)rootNode2));
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertTrue(rootNode1.equals((Object)rootNode2));
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertTrue(rootNode2.equals((Object)rootNode1));
      assertFalse(rootNode2.equals((Object)rootNode0));
      assertNotSame(contentNode0, contentNode1);
      assertNotSame(contentNode1, contentNode0);
      assertNotSame(rootNode0, rootNode2);
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode1, rootNode0);
      assertNotSame(rootNode1, rootNode2);
      assertNotSame(rootNode2, rootNode0);
      assertNotSame(rootNode2, rootNode1);
      assertEquals("", string0);
      assertEquals("", contentNode0.getName());
      assertEquals("", contentNode1.getName());
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      assertEquals("", rootNode2.getName());
      
      List<CommentNode> list0 = contentNode1.getCommentNodesFromChildren((-4166));
      assertNotNull(list0);
      assertFalse(contentNode0.equals((Object)contentNode1));
      assertFalse(contentNode1.equals((Object)contentNode0));
      assertNotSame(contentNode0, contentNode1);
      assertNotSame(contentNode1, contentNode0);
      assertEquals("", contentNode0.getName());
      assertEquals("", contentNode1.getName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      HashSet<String> hashSet0 = rootNode1.asStringSetTrimmed();
      assertNotNull(hashSet0);
      assertFalse(contentNode0.equals((Object)contentNode1));
      assertFalse(contentNode1.equals((Object)contentNode0));
      assertFalse(rootNode0.equals((Object)rootNode2));
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertTrue(rootNode1.equals((Object)rootNode2));
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertNotSame(contentNode0, contentNode1);
      assertNotSame(contentNode1, contentNode0);
      assertNotSame(rootNode0, rootNode2);
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode1, rootNode0);
      assertNotSame(rootNode1, rootNode2);
      assertFalse(hashSet0.contains(string0));
      assertEquals("", contentNode0.getName());
      assertEquals("", contentNode1.getName());
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      StringReader stringReader0 = new StringReader("V9");
      assertNotNull(stringReader0);
      
      HashSet<String> hashSet1 = rootNode0.asStringSetTrimmed();
      assertNotNull(hashSet1);
      assertFalse(contentNode0.equals((Object)contentNode1));
      assertFalse(contentNode1.equals((Object)contentNode0));
      assertFalse(rootNode0.equals((Object)rootNode2));
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertTrue(hashSet1.equals((Object)hashSet0));
      assertNotSame(contentNode0, contentNode1);
      assertNotSame(contentNode1, contentNode0);
      assertNotSame(rootNode0, rootNode2);
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(hashSet1, hashSet0);
      assertFalse(hashSet1.contains(string0));
      assertEquals("", contentNode0.getName());
      assertEquals("", contentNode1.getName());
      assertEquals("", rootNode0.getName());
      assertTrue(hashSet1.isEmpty());
      assertEquals(0, hashSet1.size());
      
      // Undeclared exception!
      try { 
        contentNode0.asStringMapTrimmed();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ContentNode contentNode0 = new ContentNode((ContentNode) null, 3);
      assertNotNull(contentNode0);
      assertEquals("", contentNode0.getName());
      
      HashSet<String> hashSet0 = contentNode0.asStringSetTrimmed();
      assertNotNull(hashSet0);
      assertEquals("", contentNode0.getName());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      contentNode0.trimAttributeSegments();
      assertEquals("", contentNode0.getName());
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add("");
      assertTrue(linkedList0.contains(""));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      boolean boolean1 = linkedList0.add(" ");
      assertTrue(boolean1 == boolean0);
      assertTrue(linkedList0.contains(" "));
      assertTrue(boolean1);
      assertEquals(2, linkedList0.size());
      
      List<String> list0 = contentNode0.asStringList();
      assertNotNull(list0);
      assertFalse(list0.contains(" "));
      assertEquals("", contentNode0.getName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      linkedList0.push((String) null);
      assertTrue(linkedList0.contains(" "));
      assertEquals(3, linkedList0.size());
      
      boolean boolean2 = linkedList0.add("");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(linkedList0.contains(""));
      assertTrue(boolean2);
      assertEquals(4, linkedList0.size());
      
      String string0 = "DSaIzfL/Sl*WiJ";
      contentNode0.addAttribute("DSaIzfL/Sl*WiJ");
      assertEquals("DSaIzfL/Sl*WiJ", contentNode0.getName());
      
      boolean boolean3 = linkedList0.addAll((Collection<? extends String>) list0);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(linkedList0.contains(""));
      assertFalse(linkedList0.contains(string0));
      assertFalse(list0.contains(string0));
      assertFalse(boolean3);
      assertEquals("DSaIzfL/Sl*WiJ", contentNode0.getName());
      assertEquals(4, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      LinkedList<String> linkedList1 = contentNode0.asStringCollectionTrimmedFill(linkedList0);
      assertNotNull(linkedList1);
      assertSame(linkedList0, linkedList1);
      assertSame(linkedList1, linkedList0);
      assertTrue(linkedList0.contains(""));
      assertFalse(linkedList0.contains(string0));
      assertFalse(linkedList1.contains(string0));
      assertTrue(linkedList1.contains(""));
      assertEquals("DSaIzfL/Sl*WiJ", contentNode0.getName());
      assertEquals(4, linkedList0.size());
      assertEquals(4, linkedList1.size());
      
      Map<String, String> map0 = contentNode0.asStringMap();
      assertNotNull(map0);
      assertEquals("DSaIzfL/Sl*WiJ", contentNode0.getName());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      contentNode0.trimAttributeSegments();
      assertEquals("DSaIzfL/Sl*WiJ", contentNode0.getName());
      
      contentNode0.show();
      assertEquals("DSaIzfL/Sl*WiJ", contentNode0.getName());
      
      List<AbstractTreeNode> list1 = contentNode0.getChildren();
      assertNotNull(list1);
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals("DSaIzfL/Sl*WiJ", contentNode0.getName());
      
      contentNode0.addAttribute((String) null, (String) null, "");
      assertEquals("DSaIzfL/Sl*WiJ", contentNode0.getName());
      
      List<TextNode> list2 = contentNode0.getTextNodesFromChildren(3);
      assertNotNull(list2);
      assertEquals("DSaIzfL/Sl*WiJ", contentNode0.getName());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      
      List<String> list3 = contentNode0.getAttributeSegments();
      assertNotNull(list3);
      assertFalse(list3.equals((Object)list0));
      assertNotSame(list3, list0);
      assertTrue(list3.contains(""));
      assertFalse(list3.contains(string0));
      assertEquals("DSaIzfL/Sl*WiJ", contentNode0.getName());
      assertFalse(list3.isEmpty());
      assertEquals(2, list3.size());
      
      contentNode0.trim();
      assertEquals("DSaIzfL/Sl*WiJ", contentNode0.getName());
      
      // Undeclared exception!
      try { 
        contentNode0.changeParentAndRegister((ContentNode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.xenoamess.x8l.AbstractTreeNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RootNode rootNode0 = new RootNode((ContentNode) null);
      assertNotNull(rootNode0);
      assertEquals("", rootNode0.getName());
      
      rootNode0.trimForce();
      assertEquals("", rootNode0.getName());
      
      rootNode0.addAttributeFromTranscodedExpression("");
      assertEquals("", rootNode0.getName());
      
      List<String> list0 = rootNode0.asStringListTrimmed();
      assertNotNull(list0);
      assertFalse(list0.contains(""));
      assertEquals("", rootNode0.getName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      List<String> list1 = rootNode0.getAttributesKeyList();
      assertNotNull(list1);
      assertFalse(list1.equals((Object)list0));
      assertNotSame(list1, list0);
      assertTrue(list1.contains(""));
      assertEquals("", rootNode0.getName());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      
      List<String> list2 = rootNode0.asStringList();
      assertNotNull(list2);
      assertFalse(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list0));
      assertNotSame(list2, list1);
      assertNotSame(list2, list0);
      assertFalse(list2.contains(""));
      assertEquals("", rootNode0.getName());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      
      rootNode0.addAttribute("");
      assertEquals("", rootNode0.getName());
      
      List<TextNode> list3 = rootNode0.getTextNodesFromChildren(0);
      assertNotNull(list3);
      assertEquals("", rootNode0.getName());
      assertEquals(0, list3.size());
      assertTrue(list3.isEmpty());
      
      LinkedList<String> linkedList0 = rootNode0.asStringCollectionTrimmedFill((LinkedList<String>) null);
      assertNull(linkedList0);
      assertEquals("", rootNode0.getName());
      
      List<TextNode> list4 = rootNode0.getTextNodesFromChildren(0);
      assertNotNull(list4);
      assertTrue(list4.equals((Object)list3));
      assertNotSame(list4, list3);
      assertEquals("", rootNode0.getName());
      assertTrue(list4.isEmpty());
      assertEquals(0, list4.size());
      
      boolean boolean0 = rootNode0.removeChild((AbstractTreeNode) null);
      assertFalse(boolean0);
      assertEquals("", rootNode0.getName());
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains(""));
      assertEquals(0, linkedList1.size());
      
      LinkedList<String> linkedList2 = rootNode0.asStringCollectionTrimmedFill(linkedList1);
      assertNotNull(linkedList2);
      assertSame(linkedList1, linkedList2);
      assertSame(linkedList2, linkedList1);
      assertFalse(linkedList1.contains(""));
      assertFalse(linkedList2.contains(""));
      assertEquals("", rootNode0.getName());
      assertEquals(0, linkedList1.size());
      assertEquals(0, linkedList2.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ContentNode contentNode0 = new ContentNode((ContentNode) null);
      assertNotNull(contentNode0);
      assertEquals("", contentNode0.getName());
      
      List<ContentNode> list0 = contentNode0.getContentNodesFromChildren();
      assertNotNull(list0);
      assertFalse(list0.contains(contentNode0));
      assertEquals("", contentNode0.getName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      contentNode0.addAttribute("");
      assertEquals("", contentNode0.getName());
      
      int int0 = stringReader0.read();
      assertEquals((-1), int0);
      
      HashSet<String> hashSet0 = contentNode0.asStringSet();
      assertNotNull(hashSet0);
      assertFalse(hashSet0.contains(""));
      assertEquals("", contentNode0.getName());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      stringReader0.mark(23);
      List<TextNode> list1 = contentNode0.getTextNodesFromChildren();
      assertNotNull(list1);
      assertEquals("", contentNode0.getName());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      
      long long0 = stringReader0.skip(0L);
      assertEquals(0L, long0);
      
      contentNode0.read((Reader) stringReader0);
      assertEquals("", contentNode0.getName());
      
      Map<String, String> map0 = contentNode0.getAttributes();
      assertNotNull(map0);
      assertEquals("", contentNode0.getName());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      Map<String, String> map1 = contentNode0.asStringMapTrimmed();
      assertNotNull(map1);
      assertTrue(map1.equals((Object)map0));
      assertNotSame(map1, map0);
      assertEquals("", contentNode0.getName());
      assertEquals(0, map1.size());
      assertTrue(map1.isEmpty());
      
      List<TextNode> list2 = contentNode0.getTextNodesFromChildren(23);
      assertNotNull(list2);
      assertFalse(list2.equals((Object)list1));
      assertNotSame(list2, list1);
      assertEquals("", contentNode0.getName());
      assertEquals(1, list2.size());
      assertFalse(list2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ContentNode contentNode0 = null;
      int int0 = 0;
      ContentNode contentNode1 = new ContentNode((ContentNode) null, 0);
      assertNotNull(contentNode1);
      assertEquals("", contentNode1.getName());
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String string0 = "m=2|h28k]wrw<)*P2";
      StringReader stringReader0 = new StringReader("m=2|h28k]wrw<)*P2");
      assertNotNull(stringReader0);
      
      int int1 = stringReader0.read();
      assertFalse(int1 == int0);
      assertEquals(109, int1);
      
      // Undeclared exception!
      try { 
        contentNode1.read((Reader) stringReader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unexpected stop of x8l file.
         //
         verifyException("com.xenoamess.x8l.dealers.X8lDealer$2", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RootNode rootNode0 = new RootNode((ContentNode) null);
      assertNotNull(rootNode0);
      assertEquals("", rootNode0.getName());
      
      rootNode0.trimForce();
      assertEquals("", rootNode0.getName());
      
      List<TextNode> list0 = rootNode0.getTextNodesFromChildren();
      assertNotNull(list0);
      assertEquals("", rootNode0.getName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      rootNode0.append((AbstractTreeNode) null);
      assertEquals("", rootNode0.getName());
      
      rootNode0.format(37);
      assertEquals("", rootNode0.getName());
      
      StringReader stringReader0 = new StringReader(" ");
      assertNotNull(stringReader0);
      
      long long0 = stringReader0.skip(575L);
      assertEquals(1L, long0);
      
      long long1 = stringReader0.skip((-295L));
      assertFalse(long1 == long0);
      assertEquals(0L, long1);
      
      rootNode0.read((Reader) stringReader0);
      assertEquals("", rootNode0.getName());
      
      List<ContentNode> list1 = rootNode0.getContentNodesFromChildrenThatNameIs("", 0);
      assertNotNull(list1);
      assertEquals("", rootNode0.getName());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      
      String string0 = rootNode0.getName();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("", rootNode0.getName());
      
      rootNode0.show();
      assertEquals("", rootNode0.getName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RootNode rootNode0 = new RootNode((ContentNode) null);
      assertNotNull(rootNode0);
      assertEquals("", rootNode0.getName());
      
      ContentNode contentNode0 = new ContentNode(rootNode0);
      assertNotNull(contentNode0);
      assertEquals("", rootNode0.getName());
      assertEquals("", contentNode0.getName());
      
      contentNode0.close();
      assertEquals("", rootNode0.getName());
      assertEquals("", contentNode0.getName());
      
      X8lDataBeanFieldScheme x8lDataBeanFieldScheme0 = X8lDataBeanFieldScheme.X8LPATH;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      ContentNode contentNode1 = (ContentNode)contentNode0.removeParent();
      assertNotNull(contentNode1);
      assertSame(contentNode0, contentNode1);
      assertSame(contentNode1, contentNode0);
      assertEquals("", rootNode0.getName());
      assertEquals("", contentNode0.getName());
      assertEquals("", contentNode1.getName());
      
      stringArray0[1] = "";
      stringArray0[2] = " ";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = " ";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(" "));
      assertEquals(0, linkedList0.size());
      
      LinkedList<String> linkedList1 = rootNode0.asStringCollectionFill(linkedList0);
      assertNotNull(linkedList1);
      assertSame(linkedList0, linkedList1);
      assertSame(linkedList1, linkedList0);
      assertFalse(linkedList0.contains(" "));
      assertFalse(linkedList1.contains(" "));
      assertEquals("", rootNode0.getName());
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      
      stringArray0[6] = "";
      List<Object> list0 = contentNode0.fetch(x8lDataBeanFieldScheme0, stringArray0);
      assertNotNull(list0);
      assertEquals(7, stringArray0.length);
      assertSame(contentNode0, contentNode1);
      assertFalse(list0.contains(""));
      assertEquals("", rootNode0.getName());
      assertEquals("", contentNode0.getName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      RootNode rootNode1 = new RootNode(contentNode0, 0);
      assertNotNull(rootNode1);
      assertTrue(rootNode1.equals((Object)rootNode0));
      assertEquals("", rootNode1.getName());
      assertEquals("", rootNode0.getName());
      assertEquals("", contentNode0.getName());
      
      String string0 = "PHv6kJ#.p";
      Function<AbstractTreeNode, Integer> function0 = null;
      // Undeclared exception!
      try { 
        rootNode1.applyToAllNodes((Function<AbstractTreeNode, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.xenoamess.x8l.ContentNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RootNode rootNode0 = new RootNode((ContentNode) null);
      assertNotNull(rootNode0);
      assertEquals("", rootNode0.getName());
      
      ContentNode contentNode0 = new ContentNode(rootNode0);
      assertNotNull(contentNode0);
      assertEquals("", rootNode0.getName());
      assertEquals("", contentNode0.getName());
      
      HashSet<AbstractTreeNode> hashSet0 = new HashSet<AbstractTreeNode>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      boolean boolean0 = hashSet0.add(contentNode0);
      assertTrue(boolean0);
      assertEquals("", rootNode0.getName());
      assertEquals("", contentNode0.getName());
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      
      boolean boolean1 = hashSet0.add(rootNode0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals("", rootNode0.getName());
      assertEquals(2, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String string0 = hashMap0.put("", " ");
      assertNull(string0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      // Undeclared exception!
      try { 
        rootNode0.asStringMapFill(hashMap0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ContentNode contentNode0 = new ContentNode((ContentNode) null);
      assertNotNull(contentNode0);
      assertEquals("", contentNode0.getName());
      
      ContentNode contentNode1 = new ContentNode(contentNode0, 0);
      assertNotNull(contentNode1);
      assertFalse(contentNode1.equals((Object)contentNode0));
      assertEquals("", contentNode0.getName());
      assertEquals("", contentNode1.getName());
      
      List<String> list0 = contentNode1.asStringListTrimmed();
      assertNotNull(list0);
      assertFalse(contentNode0.equals((Object)contentNode1));
      assertFalse(contentNode1.equals((Object)contentNode0));
      assertNotSame(contentNode0, contentNode1);
      assertNotSame(contentNode1, contentNode0);
      assertEquals("", contentNode0.getName());
      assertEquals("", contentNode1.getName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      List<TextNode> list1 = contentNode1.getTextNodesFromChildren(0);
      assertNotNull(list1);
      assertFalse(contentNode0.equals((Object)contentNode1));
      assertFalse(contentNode1.equals((Object)contentNode0));
      assertNotSame(contentNode0, contentNode1);
      assertNotSame(contentNode1, contentNode0);
      assertEquals("", contentNode0.getName());
      assertEquals("", contentNode1.getName());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      
      String string0 = hashMap0.put((String) null, "Tat{Dg");
      assertNull(string0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      String string1 = hashMap0.put("com.xenoamess.x8l.ContentNode", "");
      assertNull(string1);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      String string2 = hashMap0.put(" ", " ");
      assertNull(string2);
      assertEquals(3, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      assertNotNull(hashSet0);
      assertFalse(hashSet0.contains(0));
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      String string3 = hashMap0.put(" ", "read");
      assertNotNull(string3);
      assertEquals(" ", string3);
      assertEquals(3, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      boolean boolean0 = hashSet0.add(integer0);
      assertTrue(hashSet0.contains(0));
      assertTrue(boolean0);
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      
      String string4 = hashMap0.remove((Object) hashSet0);
      assertNull(string4);
      assertTrue(hashSet0.contains(0));
      assertEquals(3, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      
      String string5 = hashMap0.put(" ", " ");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertEquals("read", string5);
      assertEquals(3, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      HashMap<String, String> hashMap1 = contentNode1.asStringMapTrimmedFill(hashMap0);
      assertNotNull(hashMap1);
      assertFalse(contentNode0.equals((Object)contentNode1));
      assertFalse(contentNode1.equals((Object)contentNode0));
      assertNotSame(contentNode0, contentNode1);
      assertNotSame(contentNode1, contentNode0);
      assertSame(hashMap0, hashMap1);
      assertSame(hashMap1, hashMap0);
      assertEquals("", contentNode0.getName());
      assertEquals("", contentNode1.getName());
      assertEquals(3, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(hashMap1.isEmpty());
      assertEquals(3, hashMap1.size());
      
      List<ContentNode> list2 = contentNode1.getContentNodesFromChildren();
      assertNotNull(list2);
      assertFalse(contentNode0.equals((Object)contentNode1));
      assertFalse(contentNode1.equals((Object)contentNode0));
      assertNotSame(contentNode0, contentNode1);
      assertNotSame(contentNode1, contentNode0);
      assertFalse(list2.contains(contentNode1));
      assertEquals("", contentNode0.getName());
      assertEquals("", contentNode1.getName());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      
      List<String> list3 = contentNode0.asStringList();
      assertNotNull(list3);
      assertTrue(list3.equals((Object)list0));
      assertFalse(contentNode0.equals((Object)contentNode1));
      assertNotSame(list3, list0);
      assertNotSame(contentNode0, contentNode1);
      assertFalse(list3.contains(string5));
      assertTrue(list3.isEmpty());
      assertEquals(0, list3.size());
      assertEquals("", contentNode0.getName());
      
      contentNode1.trim();
      assertFalse(contentNode0.equals((Object)contentNode1));
      assertFalse(contentNode1.equals((Object)contentNode0));
      assertNotSame(contentNode0, contentNode1);
      assertNotSame(contentNode1, contentNode0);
      assertEquals("", contentNode0.getName());
      assertEquals("", contentNode1.getName());
      
      List<AbstractTreeNode> list4 = contentNode0.getChildren();
      assertNotNull(list4);
      assertFalse(contentNode0.equals((Object)contentNode1));
      assertNotSame(contentNode0, contentNode1);
      assertEquals("", contentNode0.getName());
      assertFalse(list4.isEmpty());
      assertEquals(1, list4.size());
      
      List<ContentNode> list5 = contentNode0.getContentNodesFromChildren();
      assertNotNull(list5);
      assertFalse(contentNode0.equals((Object)contentNode1));
      assertFalse(list5.equals((Object)list2));
      assertNotSame(contentNode0, contentNode1);
      assertNotSame(list5, list2);
      assertTrue(list5.contains(contentNode1));
      assertFalse(list5.contains(contentNode0));
      assertEquals("", contentNode0.getName());
      assertEquals(1, list5.size());
      assertFalse(list5.isEmpty());
      
      List<String> list6 = contentNode0.getAttributesKeyList();
      assertNotNull(list6);
      assertFalse(contentNode0.equals((Object)contentNode1));
      assertTrue(list6.equals((Object)list0));
      assertTrue(list6.equals((Object)list3));
      assertNotSame(contentNode0, contentNode1);
      assertNotSame(list6, list0);
      assertNotSame(list6, list3);
      assertFalse(list6.contains(string5));
      assertEquals("", contentNode0.getName());
      assertTrue(list6.isEmpty());
      assertEquals(0, list6.size());
      
      boolean boolean1 = contentNode0.removeChild(contentNode1);
      assertTrue(contentNode0.equals((Object)contentNode1));
      assertTrue(contentNode1.equals((Object)contentNode0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(contentNode0, contentNode1);
      assertNotSame(contentNode1, contentNode0);
      assertTrue(boolean1);
      assertEquals("", contentNode0.getName());
      assertEquals("", contentNode1.getName());
      
      List<ContentNode> list7 = contentNode1.getContentNodesFromChildren(0);
      assertNotNull(list7);
      assertTrue(contentNode0.equals((Object)contentNode1));
      assertTrue(contentNode1.equals((Object)contentNode0));
      assertTrue(list7.equals((Object)list2));
      assertFalse(list7.equals((Object)list5));
      assertNotSame(contentNode0, contentNode1);
      assertNotSame(contentNode1, contentNode0);
      assertNotSame(list7, list2);
      assertNotSame(list7, list5);
      assertFalse(list7.contains(contentNode1));
      assertEquals("", contentNode0.getName());
      assertEquals("", contentNode1.getName());
      assertEquals(0, list7.size());
      assertTrue(list7.isEmpty());
      
      contentNode0.append((AbstractTreeNode) null);
      assertTrue(contentNode0.equals((Object)contentNode1));
      assertNotSame(contentNode0, contentNode1);
      assertEquals("", contentNode0.getName());
      
      List<CommentNode> list8 = contentNode1.getCommentNodesFromChildren(23);
      assertNotNull(list8);
      assertTrue(contentNode0.equals((Object)contentNode1));
      assertTrue(contentNode1.equals((Object)contentNode0));
      assertNotSame(contentNode0, contentNode1);
      assertNotSame(contentNode1, contentNode0);
      assertEquals("", contentNode0.getName());
      assertEquals("", contentNode1.getName());
      assertEquals(0, list8.size());
      assertTrue(list8.isEmpty());
      
      LanguageDealer languageDealer0 = new LanguageDealer();
      assertNotNull(languageDealer0);
      
      // Undeclared exception!
      try { 
        contentNode1.read((Reader) null, languageDealer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument for @NotNull parameter 'reader' of com/xenoamess/x8l/ContentNode.read must not be null
         //
         verifyException("com.xenoamess.x8l.ContentNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ContentNode contentNode0 = new ContentNode((ContentNode) null);
      assertNotNull(contentNode0);
      assertEquals("", contentNode0.getName());
      
      LanguageDealer languageDealer0 = new LanguageDealer();
      assertNotNull(languageDealer0);
      
      // Undeclared exception!
      try { 
        contentNode0.read((Reader) null, languageDealer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument for @NotNull parameter 'reader' of com/xenoamess/x8l/ContentNode.read must not be null
         //
         verifyException("com.xenoamess.x8l.ContentNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ContentNode contentNode0 = new ContentNode((ContentNode) null, 0);
      assertNotNull(contentNode0);
      assertEquals("", contentNode0.getName());
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      contentNode0.append((AbstractTreeNode) null);
      assertEquals("", contentNode0.getName());
      
      LanguageDealer languageDealer0 = new LanguageDealer();
      assertNotNull(languageDealer0);
      
      contentNode0.read((Reader) stringReader0, languageDealer0);
      assertEquals("", contentNode0.getName());
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      String string0 = hashMap0.put("", "");
      assertNull(string0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      HashMap<String, String> hashMap1 = contentNode0.asStringMapFill(hashMap0);
      assertNotNull(hashMap1);
      assertSame(hashMap0, hashMap1);
      assertSame(hashMap1, hashMap0);
      assertEquals("", contentNode0.getName());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(""));
      assertEquals(0, linkedList0.size());
      
      LinkedList<String> linkedList1 = contentNode0.asStringCollectionTrimmedFill(linkedList0);
      assertNotNull(linkedList1);
      assertSame(linkedList0, linkedList1);
      assertSame(linkedList1, linkedList0);
      assertFalse(linkedList0.contains(""));
      assertFalse(linkedList1.contains(""));
      assertEquals("", contentNode0.getName());
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      
      List<ContentNode> list0 = contentNode0.getContentNodesFromChildrenThatNameIs("z$s^fPmk;c+");
      assertNotNull(list0);
      assertFalse(list0.contains(contentNode0));
      assertEquals("", contentNode0.getName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      contentNode0.read((Reader) stringReader0);
      assertEquals("", contentNode0.getName());
      
      List<String> list1 = contentNode0.getAttributeSegments();
      assertNotNull(list1);
      assertFalse(list1.contains(""));
      assertEquals("", contentNode0.getName());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      
      contentNode0.trim();
      assertEquals("", contentNode0.getName());
      
      List<String> list2 = contentNode0.asStringList();
      assertNotNull(list2);
      assertTrue(list2.equals((Object)list1));
      assertNotSame(list2, list1);
      assertFalse(list2.contains(""));
      assertEquals("", contentNode0.getName());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ContentNode contentNode0 = null;
      int int0 = 113;
      RootNode rootNode0 = new RootNode((ContentNode) null, 113);
      assertNotNull(rootNode0);
      assertEquals("", rootNode0.getName());
      
      HashMap<String, String> hashMap0 = rootNode0.asStringMapTrimmedFill((HashMap<String, String>) null);
      assertNull(hashMap0);
      assertEquals("", rootNode0.getName());
      
      RootNode rootNode1 = rootNode0.copy();
      assertNotNull(rootNode1);
      assertTrue(rootNode1.equals((Object)rootNode0));
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode1, rootNode0);
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      
      rootNode1.format(113);
      assertTrue(rootNode0.equals((Object)rootNode1));
      assertTrue(rootNode1.equals((Object)rootNode0));
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode1, rootNode0);
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      
      ContentNode contentNode1 = null;
      try {
        contentNode1 = new ContentNode(rootNode1, 113);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 113, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RootNode rootNode0 = new RootNode((ContentNode) null);
      assertNotNull(rootNode0);
      assertEquals("", rootNode0.getName());
      
      List<ContentNode> list0 = rootNode0.getContentNodesFromChildren(1);
      assertNotNull(list0);
      assertEquals("", rootNode0.getName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      List<ContentNode> list1 = rootNode0.getContentNodesFromChildren(0);
      assertNotNull(list1);
      assertTrue(list1.equals((Object)list0));
      assertNotSame(list1, list0);
      assertEquals("", rootNode0.getName());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      
      Map<String, String> map0 = rootNode0.asStringMap();
      assertNotNull(map0);
      assertEquals("", rootNode0.getName());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      RootNode rootNode1 = rootNode0.copy();
      assertNotNull(rootNode1);
      assertTrue(rootNode1.equals((Object)rootNode0));
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode1, rootNode0);
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      
      // Undeclared exception!
      try { 
        rootNode0.read((Reader) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument for @NotNull parameter 'reader' of com/xenoamess/x8l/ContentNode.read must not be null
         //
         verifyException("com.xenoamess.x8l.ContentNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RootNode rootNode0 = new RootNode((ContentNode) null, 7);
      assertNotNull(rootNode0);
      assertEquals("", rootNode0.getName());
      
      rootNode0.addAttribute("");
      assertEquals("", rootNode0.getName());
      
      List<String> list0 = rootNode0.asStringListTrimmed();
      assertNotNull(list0);
      assertFalse(list0.contains(""));
      assertEquals("", rootNode0.getName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      RootNode rootNode1 = rootNode0.copy();
      assertNotNull(rootNode1);
      assertTrue(rootNode1.equals((Object)rootNode0));
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode1, rootNode0);
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      
      rootNode1.format(1747);
      assertTrue(rootNode0.equals((Object)rootNode1));
      assertTrue(rootNode1.equals((Object)rootNode0));
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode1, rootNode0);
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      
      rootNode1.close();
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode1, rootNode0);
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      
      rootNode1.setParent((ContentNode) null);
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode1, rootNode0);
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      
      rootNode0.copy(rootNode1);
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode1, rootNode0);
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      
      String string0 = rootNode1.toString();
      assertNotNull(string0);
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode1, rootNode0);
      assertEquals("", string0);
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      
      List<TextNode> list1 = rootNode0.getTextNodesFromChildren(64);
      assertNotNull(list1);
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertNotSame(rootNode0, rootNode1);
      assertEquals("", rootNode0.getName());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      
      List<TextNode> list2 = rootNode0.getTextNodesFromChildren(1618);
      assertNotNull(list2);
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertTrue(list2.equals((Object)list1));
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(list2, list1);
      assertEquals("", rootNode0.getName());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      
      rootNode0.format((-1013));
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertNotSame(rootNode0, rootNode1);
      assertEquals("", rootNode0.getName());
      
      List<CommentNode> list3 = rootNode1.getCommentNodesFromChildren(1618);
      assertNotNull(list3);
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode1, rootNode0);
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      assertTrue(list3.isEmpty());
      assertEquals(0, list3.size());
      
      rootNode0.removeAttribute("");
      assertTrue(rootNode0.equals((Object)rootNode1));
      assertNotSame(rootNode0, rootNode1);
      assertEquals("", rootNode0.getName());
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(""));
      assertEquals(0, linkedList0.size());
      
      CommentNode commentNode0 = new CommentNode((ContentNode) null, (String) null);
      assertNotNull(commentNode0);
      assertEquals("", commentNode0.getTextContent());
      
      boolean boolean0 = linkedList0.remove((Object) commentNode0);
      assertFalse(linkedList0.contains(""));
      assertFalse(boolean0);
      assertEquals(0, linkedList0.size());
      assertEquals("", commentNode0.getTextContent());
      
      LinkedList<String> linkedList1 = rootNode1.asStringCollectionTrimmedFill(linkedList0);
      assertNotNull(linkedList1);
      assertTrue(rootNode0.equals((Object)rootNode1));
      assertTrue(rootNode1.equals((Object)rootNode0));
      assertNotSame(rootNode0, rootNode1);
      assertSame(linkedList1, linkedList0);
      assertNotSame(rootNode1, rootNode0);
      assertSame(linkedList0, linkedList1);
      assertFalse(linkedList1.contains(""));
      assertFalse(linkedList0.contains(""));
      assertEquals("", rootNode0.getName());
      assertEquals(0, linkedList1.size());
      assertEquals("", rootNode1.getName());
      assertEquals(0, linkedList0.size());
      
      rootNode1.append(rootNode0);
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode1, rootNode0);
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      
      StringReader stringReader0 = new StringReader(": U-}]%$o8");
      assertNotNull(stringReader0);
      
      rootNode0.read((Reader) stringReader0);
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertNotSame(rootNode0, rootNode1);
      assertEquals("", rootNode0.getName());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ContentNode contentNode0 = new ContentNode((ContentNode) null);
      assertNotNull(contentNode0);
      assertEquals("", contentNode0.getName());
      
      contentNode0.addAttribute((String) null, (String) null);
      assertNull(contentNode0.getName());
      
      boolean boolean0 = contentNode0.removeChild((AbstractTreeNode) null);
      assertFalse(boolean0);
      assertNull(contentNode0.getName());
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      HashMap<String, String> hashMap1 = contentNode0.asStringMapTrimmedFill(hashMap0);
      assertNotNull(hashMap1);
      assertSame(hashMap0, hashMap1);
      assertSame(hashMap1, hashMap0);
      assertNull(contentNode0.getName());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      contentNode0.format((-1));
      assertNull(contentNode0.getName());
      
      List<String> list0 = contentNode0.asStringListTrimmed();
      assertNotNull(list0);
      assertNull(contentNode0.getName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      List<String> list1 = contentNode0.asStringList();
      assertNotNull(list1);
      assertTrue(list1.equals((Object)list0));
      assertNotSame(list1, list0);
      assertNull(contentNode0.getName());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      
      int int0 = 1340;
      // Undeclared exception!
      try { 
        contentNode0.show();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument for @NotNull parameter 'originalString' of com/xenoamess/x8l/X8lTree.transcodeKey must not be null
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ContentNode contentNode0 = new ContentNode((ContentNode) null, 2615);
      assertNotNull(contentNode0);
      assertEquals("", contentNode0.getName());
      
      Function<AbstractTreeNode, AbstractTreeNode> function0 = Function.identity();
      assertNotNull(function0);
      
      CommentNode commentNode0 = new CommentNode(contentNode0, "");
      assertNotNull(commentNode0);
      assertEquals("", contentNode0.getName());
      assertEquals("", commentNode0.getTextContent());
      
      Function<Object, CommentNode> function1 = (Function<Object, CommentNode>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(commentNode0, (Object) null, (Object) null).when(function1).apply(any());
      Function<AbstractTreeNode, AbstractTreeNode> function2 = function0.compose((Function<? super AbstractTreeNode, ? extends AbstractTreeNode>) function1);
      assertNotNull(function2);
      assertFalse(function2.equals((Object)function0));
      assertEquals("", contentNode0.getName());
      assertEquals("", commentNode0.getTextContent());
      
      RootNode rootNode0 = new RootNode(contentNode0);
      assertNotNull(rootNode0);
      assertEquals("", contentNode0.getName());
      assertEquals("", rootNode0.getName());
      
      Function<Object, RootNode> function3 = (Function<Object, RootNode>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(rootNode0, (Object) null, (Object) null).when(function3).apply(any());
      Function<AbstractTreeNode, AbstractTreeNode> function4 = function2.andThen((Function<? super AbstractTreeNode, ? extends AbstractTreeNode>) function3);
      assertNotNull(function4);
      assertFalse(function0.equals((Object)function2));
      assertFalse(function2.equals((Object)function0));
      assertFalse(function4.equals((Object)function0));
      assertFalse(function4.equals((Object)function2));
      assertEquals("", contentNode0.getName());
      assertEquals("", commentNode0.getTextContent());
      assertEquals("", rootNode0.getName());
      
      List<AbstractTreeNode> list0 = contentNode0.applyToAllNodes((Function<AbstractTreeNode, AbstractTreeNode>) function4);
      assertNotNull(list0);
      assertFalse(function0.equals((Object)function2));
      assertFalse(function0.equals((Object)function4));
      assertFalse(function2.equals((Object)function0));
      assertFalse(function2.equals((Object)function4));
      assertFalse(function4.equals((Object)function0));
      assertFalse(function4.equals((Object)function2));
      assertEquals("", contentNode0.getName());
      assertEquals("", commentNode0.getTextContent());
      assertEquals("", rootNode0.getName());
      assertEquals(3, list0.size());
      assertFalse(list0.isEmpty());
      
      contentNode0.appendAll(list0);
      assertFalse(function0.equals((Object)function2));
      assertFalse(function0.equals((Object)function4));
      assertFalse(function2.equals((Object)function0));
      assertFalse(function2.equals((Object)function4));
      assertFalse(function4.equals((Object)function0));
      assertFalse(function4.equals((Object)function2));
      assertEquals("", contentNode0.getName());
      assertEquals("", commentNode0.getTextContent());
      assertEquals("", rootNode0.getName());
      assertEquals(3, list0.size());
      assertFalse(list0.isEmpty());
      
      contentNode0.addAttributeFromTranscodedExpression("com.xenoamess.x8l.AbstractTreeNode");
      assertEquals("com.xenoamess.x8l.AbstractTreeNode", contentNode0.getName());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ContentNode contentNode0 = new ContentNode((ContentNode) null);
      assertNotNull(contentNode0);
      assertEquals("", contentNode0.getName());
      
      RootNode rootNode0 = new RootNode(contentNode0);
      assertNotNull(rootNode0);
      assertEquals("", contentNode0.getName());
      assertEquals("", rootNode0.getName());
      
      int int0 = 944;
      List<ContentNode> list0 = contentNode0.getContentNodesFromChildren(944);
      assertNotNull(list0);
      assertFalse(list0.contains(contentNode0));
      assertEquals("", contentNode0.getName());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      List<Object> list1 = rootNode0.fetch("");
      assertNotNull(list1);
      assertFalse(list1.contains(944));
      assertEquals("", contentNode0.getName());
      assertEquals("", rootNode0.getName());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      
      RootNode rootNode1 = null;
      try {
        rootNode1 = new RootNode(rootNode0, (-4100));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -4100, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ContentNode contentNode0 = new ContentNode((ContentNode) null);
      assertNotNull(contentNode0);
      assertEquals("", contentNode0.getName());
      
      RootNode rootNode0 = new RootNode(contentNode0);
      assertNotNull(rootNode0);
      assertEquals("", contentNode0.getName());
      assertEquals("", rootNode0.getName());
      
      boolean boolean0 = rootNode0.removeChild(contentNode0);
      assertFalse(boolean0);
      assertEquals("", contentNode0.getName());
      assertEquals("", rootNode0.getName());
      
      LinkedList<String> linkedList0 = rootNode0.asStringCollectionFill((LinkedList<String>) null);
      assertNull(linkedList0);
      assertEquals("", contentNode0.getName());
      assertEquals("", rootNode0.getName());
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      // Undeclared exception!
      try { 
        contentNode0.read((Reader) stringReader0, (LanguageDealer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument for @NotNull parameter 'languageDealer' of com/xenoamess/x8l/ContentNode.read must not be null
         //
         verifyException("com.xenoamess.x8l.ContentNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ContentNode contentNode0 = new ContentNode((ContentNode) null);
      assertNotNull(contentNode0);
      assertEquals("", contentNode0.getName());
      
      RootNode rootNode0 = new RootNode(contentNode0);
      assertNotNull(rootNode0);
      assertEquals("", contentNode0.getName());
      assertEquals("", rootNode0.getName());
      
      rootNode0.setParent(contentNode0);
      assertEquals("", contentNode0.getName());
      assertEquals("", rootNode0.getName());
      
      rootNode0.addAttributeFromTranscodedExpression(" ");
      assertEquals("", contentNode0.getName());
      assertEquals(" ", rootNode0.getName());
      
      contentNode0.addAttribute("L", "", "L");
      assertEquals("L", contentNode0.getName());
      
      rootNode0.setParent((ContentNode) null);
      assertEquals("L", contentNode0.getName());
      assertEquals(" ", rootNode0.getName());
      
      LinkedList<String> linkedList0 = rootNode0.asStringCollectionTrimmedFill((LinkedList<String>) null);
      assertNull(linkedList0);
      assertEquals("L", contentNode0.getName());
      assertEquals(" ", rootNode0.getName());
      
      rootNode0.trimForce();
      assertEquals("L", contentNode0.getName());
      assertEquals(" ", rootNode0.getName());
      
      List<String> list0 = contentNode0.asStringList();
      assertNotNull(list0);
      assertFalse(list0.contains(""));
      assertEquals("L", contentNode0.getName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Map<String, String> map0 = rootNode0.asStringMapTrimmed();
      assertNotNull(map0);
      assertEquals("L", contentNode0.getName());
      assertEquals(" ", rootNode0.getName());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      String string0 = rootNode0.getName();
      assertNotNull(string0);
      assertEquals(" ", string0);
      assertEquals("L", contentNode0.getName());
      assertEquals(" ", rootNode0.getName());
      
      List<CommentNode> list1 = contentNode0.getCommentNodesFromChildren(0);
      assertNotNull(list1);
      assertEquals("L", contentNode0.getName());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      
      HashSet<AbstractTreeNode> hashSet0 = new HashSet<AbstractTreeNode>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      boolean boolean0 = hashSet0.add(rootNode0);
      assertTrue(boolean0);
      assertEquals("L", contentNode0.getName());
      assertEquals(" ", rootNode0.getName());
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      
      Stream<AbstractTreeNode> stream0 = hashSet0.stream();
      assertNotNull(stream0);
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      
      rootNode0.appendAll(hashSet0);
      assertEquals("L", contentNode0.getName());
      assertEquals(" ", rootNode0.getName());
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      
      contentNode0.setParent((ContentNode) null);
      assertEquals("L", contentNode0.getName());
      
      List<TextNode> list2 = contentNode0.getTextNodesFromChildren((-2307));
      assertNotNull(list2);
      assertEquals("L", contentNode0.getName());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      
      List<ContentNode> list3 = rootNode0.getContentNodesFromChildrenThatNameIs("ek_", 2471);
      assertNotNull(list3);
      assertFalse(list3.contains(contentNode0));
      assertEquals("L", contentNode0.getName());
      assertEquals(" ", rootNode0.getName());
      assertTrue(list3.isEmpty());
      assertEquals(0, list3.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RootNode rootNode0 = new RootNode((ContentNode) null);
      assertNotNull(rootNode0);
      assertEquals("", rootNode0.getName());
      
      List<ContentNode> list0 = new LinkedList<ContentNode>();
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      HashMap<String, String> hashMap1 = rootNode0.asStringMapFill(hashMap0);
      assertNotNull(hashMap1);
      assertSame(hashMap0, hashMap1);
      assertSame(hashMap1, hashMap0);
      assertEquals("", rootNode0.getName());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ContentNode contentNode0 = new ContentNode((ContentNode) null);
      assertNotNull(contentNode0);
      assertEquals("", contentNode0.getName());
      
      String string0 = contentNode0.toString();
      assertNotNull(string0);
      assertEquals("<>>", string0);
      assertEquals("", contentNode0.getName());
      
      RootNode rootNode0 = new RootNode(contentNode0);
      assertNotNull(rootNode0);
      assertEquals("", contentNode0.getName());
      assertEquals("", rootNode0.getName());
      
      List<ContentNode> list0 = rootNode0.getContentNodesFromChildren();
      assertNotNull(list0);
      assertFalse(list0.contains(contentNode0));
      assertEquals("", contentNode0.getName());
      assertEquals("", rootNode0.getName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      List<String> list1 = contentNode0.asStringListTrimmed();
      assertNotNull(list1);
      assertFalse(list1.contains(string0));
      assertEquals("", contentNode0.getName());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      
      CommentNode commentNode0 = new CommentNode(contentNode0, "");
      assertNotNull(commentNode0);
      assertEquals("", contentNode0.getName());
      assertEquals("", commentNode0.getTextContent());
      
      List<CommentNode> list2 = rootNode0.getCommentNodesFromChildren(3152);
      assertNotNull(list2);
      assertFalse(list2.contains(commentNode0));
      assertEquals("", contentNode0.getName());
      assertEquals("", rootNode0.getName());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      
      commentNode0.format(19);
      assertEquals("", contentNode0.getName());
      assertEquals("", commentNode0.getTextContent());
      
      boolean boolean0 = contentNode0.equals(commentNode0);
      assertFalse(boolean0);
      assertEquals("", contentNode0.getName());
      assertEquals("", commentNode0.getTextContent());
      
      rootNode0.show();
      assertEquals("", contentNode0.getName());
      assertEquals("", rootNode0.getName());
      
      rootNode0.addAttribute("", "", "");
      assertEquals("", contentNode0.getName());
      assertEquals("", rootNode0.getName());
      
      boolean boolean1 = contentNode0.removeChild((AbstractTreeNode) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals("", contentNode0.getName());
      
      List<ContentNode> list3 = contentNode0.getContentNodesFromChildrenThatNameIs("");
      assertNotNull(list3);
      assertFalse(list3.equals((Object)list0));
      assertNotSame(list3, list0);
      assertFalse(list3.contains(contentNode0));
      assertEquals("", contentNode0.getName());
      assertFalse(list3.isEmpty());
      assertEquals(1, list3.size());
      
      rootNode0.addAttribute("", " ", "");
      assertEquals("", contentNode0.getName());
      assertEquals("", rootNode0.getName());
      
      List<CommentNode> list4 = contentNode0.getCommentNodesFromChildren(3152);
      assertNotNull(list4);
      assertFalse(list4.equals((Object)list2));
      assertNotSame(list4, list2);
      assertTrue(list4.contains(commentNode0));
      assertEquals("", contentNode0.getName());
      assertFalse(list4.isEmpty());
      assertEquals(1, list4.size());
      
      // Undeclared exception!
      try { 
        contentNode0.removeAttribute("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RootNode rootNode0 = new RootNode((ContentNode) null);
      assertNotNull(rootNode0);
      assertEquals("", rootNode0.getName());
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      rootNode0.read((Reader) stringReader0);
      assertEquals("", rootNode0.getName());
      
      rootNode0.trimForce();
      assertEquals("", rootNode0.getName());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ContentNode contentNode0 = new ContentNode((ContentNode) null, (-1102));
      assertNotNull(contentNode0);
      assertEquals("", contentNode0.getName());
      
      RootNode rootNode0 = new RootNode(contentNode0);
      assertNotNull(rootNode0);
      assertEquals("", contentNode0.getName());
      assertEquals("", rootNode0.getName());
      
      Map<String, String> map0 = rootNode0.asStringMap();
      assertNotNull(map0);
      assertEquals("", contentNode0.getName());
      assertEquals("", rootNode0.getName());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      List<String> list0 = rootNode0.asStringList();
      assertNotNull(list0);
      assertEquals("", contentNode0.getName());
      assertEquals("", rootNode0.getName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      HashSet<String> hashSet0 = contentNode0.asStringSet();
      assertNotNull(hashSet0);
      assertEquals("", contentNode0.getName());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      HashSet<String> hashSet1 = rootNode0.asStringSet();
      assertNotNull(hashSet1);
      assertTrue(hashSet1.equals((Object)hashSet0));
      assertNotSame(hashSet1, hashSet0);
      assertEquals("", contentNode0.getName());
      assertEquals("", rootNode0.getName());
      assertTrue(hashSet1.isEmpty());
      assertEquals(0, hashSet1.size());
      
      String[] stringArray0 = new String[0];
      rootNode0.formatAttributeSegments((-970));
      assertEquals("", contentNode0.getName());
      assertEquals("", rootNode0.getName());
      
      contentNode0.trimForce();
      assertEquals("", contentNode0.getName());
      
      rootNode0.trimAttributeSegments();
      assertEquals("", contentNode0.getName());
      assertEquals("", rootNode0.getName());
      
      List<ContentNode> list1 = rootNode0.getContentNodesFromChildrenThatNameIs("com.xenoamess.x8l.ContentNode");
      assertNotNull(list1);
      assertFalse(list1.contains(contentNode0));
      assertEquals("", contentNode0.getName());
      assertEquals("", rootNode0.getName());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      
      contentNode0.addAttribute("");
      assertEquals("", contentNode0.getName());
      
      rootNode0.addAttribute(" ");
      assertEquals("", contentNode0.getName());
      assertEquals(" ", rootNode0.getName());
      
      contentNode0.trim();
      assertEquals("", contentNode0.getName());
      
      List<ContentNode> list2 = rootNode0.getContentNodesFromChildren((-1102));
      assertNotNull(list2);
      assertTrue(list2.equals((Object)list1));
      assertNotSame(list2, list1);
      assertFalse(list2.contains(contentNode0));
      assertEquals("", contentNode0.getName());
      assertEquals(" ", rootNode0.getName());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      
      List<ContentNode> list3 = contentNode0.getContentNodesFromChildren();
      assertNotNull(list3);
      assertFalse(list3.equals((Object)list2));
      assertFalse(list3.equals((Object)list1));
      assertNotSame(list3, list2);
      assertNotSame(list3, list1);
      assertFalse(list3.contains(contentNode0));
      assertEquals("", contentNode0.getName());
      assertFalse(list3.isEmpty());
      assertEquals(1, list3.size());
      
      rootNode0.trim();
      assertEquals("", contentNode0.getName());
      assertEquals(" ", rootNode0.getName());
      
      String string0 = contentNode0.getName();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("", contentNode0.getName());
      
      List<ContentNode> list4 = rootNode0.getContentNodesFromChildren((-1102));
      assertNotNull(list4);
      assertTrue(list4.equals((Object)list2));
      assertFalse(list4.equals((Object)list3));
      assertTrue(list4.equals((Object)list1));
      assertNotSame(list4, list1);
      assertNotSame(list4, list2);
      assertNotSame(list4, list3);
      assertFalse(list4.contains(contentNode0));
      assertEquals("", contentNode0.getName());
      assertEquals(" ", rootNode0.getName());
      assertEquals(0, list4.size());
      assertTrue(list4.isEmpty());
      
      contentNode0.clear();
      assertEquals("", contentNode0.getName());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ContentNode contentNode0 = new ContentNode((ContentNode) null);
      assertNotNull(contentNode0);
      assertEquals("", contentNode0.getName());
      
      Map<String, String> map0 = contentNode0.asStringMap();
      assertNotNull(map0);
      assertEquals("", contentNode0.getName());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      HashSet<String> hashSet0 = contentNode0.asStringSet();
      assertNotNull(hashSet0);
      assertEquals("", contentNode0.getName());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      List<TextNode> list0 = contentNode0.getTextNodesFromChildren();
      assertNotNull(list0);
      assertEquals("", contentNode0.getName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ContentNode contentNode0 = new ContentNode((ContentNode) null, 0);
      assertNotNull(contentNode0);
      assertEquals("", contentNode0.getName());
      
      RootNode rootNode0 = new RootNode(contentNode0);
      assertNotNull(rootNode0);
      assertEquals("", contentNode0.getName());
      assertEquals("", rootNode0.getName());
      
      RootNode rootNode1 = rootNode0.copy();
      assertNotNull(rootNode1);
      assertTrue(rootNode1.equals((Object)rootNode0));
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode1, rootNode0);
      assertEquals("", contentNode0.getName());
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      
      ContentNode contentNode1 = new ContentNode(rootNode1);
      assertNotNull(contentNode1);
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertFalse(contentNode1.equals((Object)contentNode0));
      assertEquals("", contentNode0.getName());
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      assertEquals("", contentNode1.getName());
      
      RootNode rootNode2 = new RootNode(contentNode1, 0);
      assertNotNull(rootNode2);
      assertTrue(contentNode0.equals((Object)contentNode1));
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertTrue(contentNode1.equals((Object)contentNode0));
      assertFalse(rootNode2.equals((Object)rootNode1));
      assertTrue(rootNode2.equals((Object)rootNode0));
      assertEquals("", contentNode0.getName());
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      assertEquals("", contentNode1.getName());
      assertEquals("", rootNode2.getName());
      
      List<TextNode> list0 = rootNode2.getTextNodesFromChildren();
      assertNotNull(list0);
      assertTrue(contentNode0.equals((Object)contentNode1));
      assertTrue(rootNode0.equals((Object)rootNode2));
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertFalse(rootNode1.equals((Object)rootNode2));
      assertTrue(contentNode1.equals((Object)contentNode0));
      assertFalse(rootNode2.equals((Object)rootNode1));
      assertTrue(rootNode2.equals((Object)rootNode0));
      assertNotSame(contentNode0, contentNode1);
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode0, rootNode2);
      assertNotSame(rootNode1, rootNode0);
      assertNotSame(rootNode1, rootNode2);
      assertNotSame(contentNode1, contentNode0);
      assertNotSame(rootNode2, rootNode1);
      assertNotSame(rootNode2, rootNode0);
      assertEquals("", contentNode0.getName());
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      assertEquals("", contentNode1.getName());
      assertEquals("", rootNode2.getName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      List<CommentNode> list1 = contentNode0.getCommentNodesFromChildren(726);
      assertNotNull(list1);
      assertTrue(contentNode0.equals((Object)contentNode1));
      assertNotSame(contentNode0, contentNode1);
      assertEquals("", contentNode0.getName());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      
      rootNode2.trim();
      assertTrue(contentNode0.equals((Object)contentNode1));
      assertTrue(rootNode0.equals((Object)rootNode2));
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertFalse(rootNode1.equals((Object)rootNode2));
      assertTrue(contentNode1.equals((Object)contentNode0));
      assertFalse(rootNode2.equals((Object)rootNode1));
      assertTrue(rootNode2.equals((Object)rootNode0));
      assertNotSame(contentNode0, contentNode1);
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode0, rootNode2);
      assertNotSame(rootNode1, rootNode0);
      assertNotSame(rootNode1, rootNode2);
      assertNotSame(contentNode1, contentNode0);
      assertNotSame(rootNode2, rootNode1);
      assertNotSame(rootNode2, rootNode0);
      assertEquals("", contentNode0.getName());
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      assertEquals("", contentNode1.getName());
      assertEquals("", rootNode2.getName());
      
      List<String> list2 = rootNode1.asStringList();
      assertNotNull(list2);
      assertTrue(contentNode0.equals((Object)contentNode1));
      assertTrue(rootNode0.equals((Object)rootNode2));
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertFalse(rootNode1.equals((Object)rootNode2));
      assertNotSame(contentNode0, contentNode1);
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode0, rootNode2);
      assertNotSame(rootNode1, rootNode0);
      assertNotSame(rootNode1, rootNode2);
      assertEquals("", contentNode0.getName());
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      // Undeclared exception!
      try { 
        contentNode1.asStringMapFill(hashMap0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ContentNode contentNode0 = new ContentNode((ContentNode) null, (-1));
      assertNotNull(contentNode0);
      assertEquals("", contentNode0.getName());
      
      StringReader stringReader0 = new StringReader("2lM8/9)xdr`ct");
      assertNotNull(stringReader0);
      
      LanguageDealer languageDealer0 = new LanguageDealer();
      assertNotNull(languageDealer0);
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      RootNode rootNode0 = new RootNode(contentNode0, 0);
      assertNotNull(rootNode0);
      assertEquals("", contentNode0.getName());
      assertEquals("", rootNode0.getName());
      
      boolean boolean1 = languageDealer0.read((Reader) stringReader0, rootNode0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals("", contentNode0.getName());
      assertEquals("", rootNode0.getName());
      
      contentNode0.read((Reader) stringReader0, languageDealer0);
      assertEquals("", contentNode0.getName());
      
      List<TextNode> list0 = contentNode0.getTextNodesFromChildren();
      assertNotNull(list0);
      assertEquals("", contentNode0.getName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      contentNode0.append((AbstractTreeNode) null);
      assertEquals("", contentNode0.getName());
      
      contentNode0.trim();
      assertEquals("", contentNode0.getName());
      
      contentNode0.formatAttributeSegments((-1));
      assertEquals("", contentNode0.getName());
      
      contentNode0.addAttributeFromTranscodedExpression("2lM8/9)xdr`ct");
      assertEquals("2lM8/9)xdr`ct", contentNode0.getName());
      
      contentNode0.trimAttributeSegments();
      assertEquals("2lM8/9)xdr`ct", contentNode0.getName());
      
      List<AbstractTreeNode> list1 = contentNode0.getChildren();
      assertNotNull(list1);
      assertEquals("2lM8/9)xdr`ct", contentNode0.getName());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      
      List<String> list2 = contentNode0.asStringList();
      assertNotNull(list2);
      assertFalse(list2.contains("2lM8/9)xdr`ct"));
      assertEquals("2lM8/9)xdr`ct", contentNode0.getName());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ContentNode contentNode0 = new ContentNode((ContentNode) null, 471);
      assertNotNull(contentNode0);
      assertEquals("", contentNode0.getName());
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedList<String> linkedList1 = contentNode0.asStringCollectionTrimmedFill(linkedList0);
      assertNotNull(linkedList1);
      assertSame(linkedList0, linkedList1);
      assertSame(linkedList1, linkedList0);
      assertEquals("", contentNode0.getName());
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      
      RootNode rootNode0 = new RootNode(contentNode0);
      assertNotNull(rootNode0);
      assertEquals("", contentNode0.getName());
      assertEquals("", rootNode0.getName());
      
      List<Object> list0 = rootNode0.fetch("");
      assertNotNull(list0);
      assertFalse(list0.contains(471));
      assertEquals("", contentNode0.getName());
      assertEquals("", rootNode0.getName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      List<TextNode> list1 = rootNode0.getTextNodesFromChildren((-1691));
      assertNotNull(list1);
      assertEquals("", contentNode0.getName());
      assertEquals("", rootNode0.getName());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      
      RootNode rootNode1 = rootNode0.copy();
      assertNotNull(rootNode1);
      assertTrue(rootNode1.equals((Object)rootNode0));
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode1, rootNode0);
      assertEquals("", contentNode0.getName());
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      
      rootNode1.format(471);
      assertTrue(rootNode0.equals((Object)rootNode1));
      assertTrue(rootNode1.equals((Object)rootNode0));
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode1, rootNode0);
      assertEquals("", contentNode0.getName());
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      
      List<CommentNode> list2 = contentNode0.getCommentNodesFromChildren(471);
      assertNotNull(list2);
      assertEquals("", contentNode0.getName());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      
      rootNode0.trim();
      assertTrue(rootNode0.equals((Object)rootNode1));
      assertNotSame(rootNode0, rootNode1);
      assertEquals("", contentNode0.getName());
      assertEquals("", rootNode0.getName());
      
      rootNode1.addAttribute("");
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode1, rootNode0);
      assertEquals("", contentNode0.getName());
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      
      List<String> list3 = rootNode1.asStringListTrimmed();
      assertNotNull(list3);
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode1, rootNode0);
      assertFalse(list3.contains(""));
      assertEquals("", contentNode0.getName());
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      assertTrue(list3.isEmpty());
      assertEquals(0, list3.size());
      
      rootNode1.show();
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode1, rootNode0);
      assertEquals("", contentNode0.getName());
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RootNode rootNode0 = new RootNode((ContentNode) null);
      assertNotNull(rootNode0);
      assertEquals("", rootNode0.getName());
      
      ContentNode contentNode0 = new ContentNode(rootNode0, 0);
      assertNotNull(contentNode0);
      assertEquals("", rootNode0.getName());
      assertEquals("", contentNode0.getName());
      
      RootNode rootNode1 = new RootNode(contentNode0, 0);
      assertNotNull(rootNode1);
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertEquals("", rootNode0.getName());
      assertEquals("", contentNode0.getName());
      assertEquals("", rootNode1.getName());
      
      RootNode rootNode2 = rootNode1.copy();
      assertNotNull(rootNode2);
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertTrue(rootNode2.equals((Object)rootNode1));
      assertFalse(rootNode2.equals((Object)rootNode0));
      assertNotSame(rootNode0, rootNode2);
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode1, rootNode0);
      assertNotSame(rootNode1, rootNode2);
      assertNotSame(rootNode2, rootNode1);
      assertNotSame(rootNode2, rootNode0);
      assertEquals("", rootNode0.getName());
      assertEquals("", contentNode0.getName());
      assertEquals("", rootNode1.getName());
      assertEquals("", rootNode2.getName());
      
      List<String> list0 = rootNode2.getAttributesKeyList();
      assertNotNull(list0);
      assertFalse(rootNode0.equals((Object)rootNode2));
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertTrue(rootNode1.equals((Object)rootNode2));
      assertTrue(rootNode2.equals((Object)rootNode1));
      assertFalse(rootNode2.equals((Object)rootNode0));
      assertNotSame(rootNode0, rootNode2);
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode1, rootNode0);
      assertNotSame(rootNode1, rootNode2);
      assertNotSame(rootNode2, rootNode1);
      assertNotSame(rootNode2, rootNode0);
      assertEquals("", rootNode0.getName());
      assertEquals("", contentNode0.getName());
      assertEquals("", rootNode1.getName());
      assertEquals("", rootNode2.getName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedList<String> linkedList1 = rootNode0.asStringCollectionTrimmedFill(linkedList0);
      assertNotNull(linkedList1);
      assertFalse(rootNode0.equals((Object)rootNode2));
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertNotSame(rootNode0, rootNode2);
      assertNotSame(rootNode0, rootNode1);
      assertSame(linkedList0, linkedList1);
      assertSame(linkedList1, linkedList0);
      assertEquals("", rootNode0.getName());
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ContentNode contentNode0 = new ContentNode((ContentNode) null);
      assertNotNull(contentNode0);
      assertEquals("", contentNode0.getName());
      
      String string0 = contentNode0.toString();
      assertNotNull(string0);
      assertEquals("<>>", string0);
      assertEquals("", contentNode0.getName());
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      HashMap<String, String> hashMap1 = contentNode0.asStringMapFill((HashMap<String, String>) null);
      assertNull(hashMap1);
      assertEquals("", contentNode0.getName());
      
      RootNode rootNode0 = new RootNode(contentNode0);
      assertNotNull(rootNode0);
      assertEquals("", contentNode0.getName());
      assertEquals("", rootNode0.getName());
      
      List<ContentNode> list0 = rootNode0.getContentNodesFromChildren();
      assertNotNull(list0);
      assertFalse(list0.contains(contentNode0));
      assertEquals("", contentNode0.getName());
      assertEquals("", rootNode0.getName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      List<String> list1 = contentNode0.asStringListTrimmed();
      assertNotNull(list1);
      assertFalse(list1.contains(string0));
      assertEquals("", contentNode0.getName());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      
      List<ContentNode> list2 = contentNode0.getContentNodesFromChildren();
      assertNotNull(list2);
      assertFalse(list2.equals((Object)list0));
      assertNotSame(list2, list0);
      assertFalse(list2.contains(contentNode0));
      assertEquals("", contentNode0.getName());
      assertEquals(1, list2.size());
      assertFalse(list2.isEmpty());
      
      HashMap<String, String> hashMap2 = rootNode0.asStringMapFill((HashMap<String, String>) null);
      assertNull(hashMap2);
      assertEquals("", contentNode0.getName());
      assertEquals("", rootNode0.getName());
      
      CommentNode commentNode0 = new CommentNode((ContentNode) null, 469, "");
      assertNotNull(commentNode0);
      assertEquals("", commentNode0.getTextContent());
      
      List<CommentNode> list3 = rootNode0.getCommentNodesFromChildren(3152);
      assertNotNull(list3);
      assertFalse(list3.contains(commentNode0));
      assertEquals("", contentNode0.getName());
      assertEquals("", rootNode0.getName());
      assertTrue(list3.isEmpty());
      assertEquals(0, list3.size());
      
      commentNode0.format(19);
      assertEquals("", commentNode0.getTextContent());
      
      boolean boolean0 = contentNode0.equals(commentNode0);
      assertFalse(boolean0);
      assertEquals("", contentNode0.getName());
      assertEquals("", commentNode0.getTextContent());
      
      rootNode0.show();
      assertEquals("", contentNode0.getName());
      assertEquals("", rootNode0.getName());
      
      rootNode0.addAttribute("", "", "");
      assertEquals("", contentNode0.getName());
      assertEquals("", rootNode0.getName());
      
      boolean boolean1 = contentNode0.removeChild((AbstractTreeNode) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals("", contentNode0.getName());
      
      String string1 = contentNode0.toString();
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("<>>", string1);
      assertEquals("", contentNode0.getName());
      
      List<ContentNode> list4 = contentNode0.getContentNodesFromChildrenThatNameIs("");
      assertNotNull(list4);
      assertTrue(list4.equals((Object)list2));
      assertFalse(list4.equals((Object)list0));
      assertNotSame(list4, list2);
      assertNotSame(list4, list0);
      assertFalse(list4.contains(contentNode0));
      assertEquals("", contentNode0.getName());
      assertEquals(1, list4.size());
      assertFalse(list4.isEmpty());
      
      HashMap<String, String> hashMap3 = rootNode0.asStringMapTrimmedFill((HashMap<String, String>) null);
      assertNull(hashMap3);
      assertEquals("", contentNode0.getName());
      assertEquals("", rootNode0.getName());
      
      rootNode0.addAttribute("", " ", "");
      assertEquals("", contentNode0.getName());
      assertEquals("", rootNode0.getName());
      
      // Undeclared exception!
      try { 
        contentNode0.removeAttribute("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ContentNode contentNode0 = new ContentNode((ContentNode) null);
      assertNotNull(contentNode0);
      assertEquals("", contentNode0.getName());
      
      contentNode0.addAttribute("G@PD]iwR\"4$?TC");
      assertEquals("G@PD]iwR\"4$?TC", contentNode0.getName());
      
      RootNode rootNode0 = new RootNode(contentNode0);
      assertNotNull(rootNode0);
      assertEquals("G@PD]iwR\"4$?TC", contentNode0.getName());
      assertEquals("", rootNode0.getName());
      
      rootNode0.trimAttributeSegments();
      assertEquals("G@PD]iwR\"4$?TC", contentNode0.getName());
      assertEquals("", rootNode0.getName());
      
      HashSet<String> hashSet0 = contentNode0.asStringSet();
      assertNotNull(hashSet0);
      assertFalse(hashSet0.contains("G@PD]iwR\"4$?TC"));
      assertEquals("G@PD]iwR\"4$?TC", contentNode0.getName());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      contentNode0.addAttribute("}1<I<Cw<6X.J+23I}", "attributes : ", " ");
      assertEquals("G@PD]iwR\"4$?TC", contentNode0.getName());
      
      List<ContentNode> list0 = contentNode0.getContentNodesFromChildrenThatNameIs((String) null);
      assertNotNull(list0);
      assertFalse(list0.contains(contentNode0));
      assertEquals("G@PD]iwR\"4$?TC", contentNode0.getName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      UnaryOperator<AbstractTreeNode> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      List<AbstractTreeNode> list1 = contentNode0.applyToAllNodes((Function<AbstractTreeNode, AbstractTreeNode>) unaryOperator0);
      assertNotNull(list1);
      assertEquals("G@PD]iwR\"4$?TC", contentNode0.getName());
      assertFalse(list1.isEmpty());
      assertEquals(2, list1.size());
      
      contentNode0.appendAll(list1);
      assertEquals("G@PD]iwR\"4$?TC", contentNode0.getName());
      assertFalse(list1.isEmpty());
      assertEquals(2, list1.size());
      
      List<String> list2 = rootNode0.asStringList();
      assertNotNull(list2);
      assertFalse(list2.contains("attributes : "));
      assertEquals("G@PD]iwR\"4$?TC", contentNode0.getName());
      assertEquals("", rootNode0.getName());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      
      List<ContentNode> list3 = contentNode0.getContentNodesFromChildren();
      assertNotNull(list3);
      assertFalse(list3.equals((Object)list0));
      assertNotSame(list3, list0);
      assertTrue(list3.contains(contentNode0));
      assertEquals("G@PD]iwR\"4$?TC", contentNode0.getName());
      assertEquals(3, list3.size());
      assertFalse(list3.isEmpty());
      
      List<AbstractTreeNode> list4 = rootNode0.getChildren();
      assertNotNull(list4);
      assertFalse(list4.equals((Object)list1));
      assertNotSame(list4, list1);
      assertEquals("G@PD]iwR\"4$?TC", contentNode0.getName());
      assertEquals("", rootNode0.getName());
      assertTrue(list4.isEmpty());
      assertEquals(0, list4.size());
      
      contentNode0.addAttribute("attributes : ", "}1<I<Cw<6X.J+23I}", "attributes : ");
      assertEquals("G@PD]iwR\"4$?TC", contentNode0.getName());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ContentNode contentNode0 = new ContentNode((ContentNode) null);
      assertNotNull(contentNode0);
      assertEquals("", contentNode0.getName());
      
      UnaryOperator<AbstractTreeNode> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      List<AbstractTreeNode> list0 = contentNode0.applyToAllNodes((Function<AbstractTreeNode, AbstractTreeNode>) unaryOperator0);
      assertNotNull(list0);
      assertEquals("", contentNode0.getName());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      // Undeclared exception!
      try { 
        contentNode0.removeAttribute("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      RootNode rootNode0 = new RootNode((ContentNode) null);
      assertNotNull(rootNode0);
      assertEquals("", rootNode0.getName());
      
      String string0 = "";
      List<ContentNode> list0 = rootNode0.getContentNodesFromChildren();
      assertNotNull(list0);
      assertEquals("", rootNode0.getName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      LinkedList<AbstractTreeNode> linkedList0 = new LinkedList<AbstractTreeNode>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ContentNode contentNode0 = new ContentNode((ContentNode) null, 2);
      assertNotNull(contentNode0);
      assertEquals("", contentNode0.getName());
      
      RootNode rootNode1 = (RootNode)rootNode0.changeParentAndRegister(contentNode0);
      assertNotNull(rootNode1);
      assertSame(rootNode0, rootNode1);
      assertSame(rootNode1, rootNode0);
      assertEquals("", rootNode0.getName());
      assertEquals("", contentNode0.getName());
      assertEquals("", rootNode1.getName());
      
      boolean boolean0 = linkedList0.add((AbstractTreeNode) rootNode1);
      assertSame(rootNode0, rootNode1);
      assertSame(rootNode1, rootNode0);
      assertTrue(boolean0);
      assertEquals("", rootNode0.getName());
      assertEquals(1, linkedList0.size());
      assertEquals("", contentNode0.getName());
      assertEquals("", rootNode1.getName());
      
      boolean boolean1 = linkedList0.add((AbstractTreeNode) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(2, linkedList0.size());
      
      rootNode0.appendAll(linkedList0);
      assertSame(rootNode0, rootNode1);
      assertEquals("", rootNode0.getName());
      assertEquals(2, linkedList0.size());
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains(string0));
      assertEquals(0, linkedList1.size());
      
      // Undeclared exception!
      try { 
        linkedList1.removeIf((Predicate<? super String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RootNode rootNode0 = new RootNode((ContentNode) null, 0);
      assertNotNull(rootNode0);
      assertEquals("", rootNode0.getName());
      
      // Undeclared exception!
      try { 
        rootNode0.removeAttribute("Ta7vJ7N");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      RootNode rootNode0 = new RootNode((ContentNode) null);
      assertNotNull(rootNode0);
      assertEquals("", rootNode0.getName());
      
      RootNode rootNode1 = rootNode0.copy();
      assertNotNull(rootNode1);
      assertTrue(rootNode1.equals((Object)rootNode0));
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode1, rootNode0);
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedList<String> linkedList1 = rootNode1.asStringCollectionFill(linkedList0);
      assertNotNull(linkedList1);
      assertTrue(rootNode0.equals((Object)rootNode1));
      assertTrue(rootNode1.equals((Object)rootNode0));
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode1, rootNode0);
      assertSame(linkedList0, linkedList1);
      assertSame(linkedList1, linkedList0);
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      
      ContentNode contentNode0 = new ContentNode(rootNode1, 0);
      assertNotNull(contentNode0);
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      assertEquals("", contentNode0.getName());
      
      contentNode0.addAttributeFromTranscodedExpression("/gX6c");
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode1, rootNode0);
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      assertEquals("/gX6c", contentNode0.getName());
      
      // Undeclared exception!
      try { 
        rootNode1.asStringMapTrimmed();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      RootNode rootNode0 = new RootNode((ContentNode) null);
      assertNotNull(rootNode0);
      assertEquals("", rootNode0.getName());
      
      ContentNode contentNode0 = new ContentNode(rootNode0);
      assertNotNull(contentNode0);
      assertEquals("", rootNode0.getName());
      assertEquals("", contentNode0.getName());
      
      contentNode0.close();
      assertEquals("", rootNode0.getName());
      assertEquals("", contentNode0.getName());
      
      X8lDataBeanFieldScheme x8lDataBeanFieldScheme0 = X8lDataBeanFieldScheme.X8LPATH;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      ContentNode contentNode1 = (ContentNode)contentNode0.removeParent();
      assertNotNull(contentNode1);
      assertSame(contentNode0, contentNode1);
      assertSame(contentNode1, contentNode0);
      assertEquals("", rootNode0.getName());
      assertEquals("", contentNode0.getName());
      assertEquals("", contentNode1.getName());
      
      stringArray0[1] = "";
      stringArray0[2] = " ";
      stringArray0[4] = "";
      stringArray0[5] = " ";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(""));
      assertEquals(0, linkedList0.size());
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertNotNull(linkedList1);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertFalse(linkedList1.contains(""));
      assertEquals(0, linkedList1.size());
      
      List<Object> list0 = contentNode1.fetch(x8lDataBeanFieldScheme0, "");
      assertNotNull(list0);
      assertSame(contentNode0, contentNode1);
      assertSame(contentNode1, contentNode0);
      assertFalse(list0.contains(""));
      assertEquals("", rootNode0.getName());
      assertEquals("", contentNode0.getName());
      assertEquals("", contentNode1.getName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      RootNode rootNode1 = new RootNode(contentNode0, 0);
      assertNotNull(rootNode1);
      assertTrue(rootNode1.equals((Object)rootNode0));
      assertEquals("", rootNode0.getName());
      assertEquals("", contentNode0.getName());
      assertEquals("", rootNode1.getName());
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '&';
      charArray0[1] = 'N';
      charArray0[2] = ':';
      charArray0[3] = 'L';
      charArray0[4] = '$';
      charArray0[5] = 'X';
      charArray0[6] = 'c';
      charArray0[7] = 'Z';
      int int0 = stringReader0.read(charArray0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'&', 'N', ':', 'L', '$', 'X', 'c', 'Z'}, charArray0);
      assertEquals((-1), int0);
      
      contentNode0.read((Reader) stringReader0);
      assertTrue(rootNode0.equals((Object)rootNode1));
      assertNotSame(rootNode0, rootNode1);
      assertSame(contentNode0, contentNode1);
      assertEquals("", rootNode0.getName());
      assertEquals("", contentNode0.getName());
      
      List<ContentNode> list1 = rootNode1.getContentNodesFromChildrenThatNameIs("PHv6kJ#.p", 10);
      assertNotNull(list1);
      assertTrue(rootNode0.equals((Object)rootNode1));
      assertTrue(rootNode1.equals((Object)rootNode0));
      assertNotSame(rootNode0, rootNode1);
      assertSame(contentNode0, contentNode1);
      assertNotSame(rootNode1, rootNode0);
      assertFalse(list1.contains(contentNode1));
      assertEquals("", rootNode0.getName());
      assertEquals("", contentNode0.getName());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals("", rootNode1.getName());
      
      RootNode rootNode2 = rootNode1.copy();
      assertNotNull(rootNode2);
      assertTrue(rootNode0.equals((Object)rootNode1));
      assertTrue(rootNode2.equals((Object)rootNode0));
      assertTrue(rootNode2.equals((Object)rootNode1));
      assertTrue(rootNode1.equals((Object)rootNode0));
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode0, rootNode2);
      assertSame(contentNode0, contentNode1);
      assertNotSame(rootNode2, rootNode1);
      assertNotSame(rootNode2, rootNode0);
      assertNotSame(rootNode1, rootNode0);
      assertNotSame(rootNode1, rootNode2);
      assertEquals("", rootNode0.getName());
      assertEquals("", contentNode0.getName());
      assertEquals("", rootNode2.getName());
      assertEquals("", rootNode1.getName());
      
      List<CommentNode> list2 = contentNode0.getCommentNodesFromChildren(56);
      assertNotNull(list2);
      assertTrue(rootNode0.equals((Object)rootNode2));
      assertTrue(rootNode0.equals((Object)rootNode1));
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode0, rootNode2);
      assertSame(contentNode0, contentNode1);
      assertEquals("", rootNode0.getName());
      assertEquals("", contentNode0.getName());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      
      List<String> list3 = contentNode0.asStringListTrimmed();
      assertNotNull(list3);
      assertTrue(rootNode0.equals((Object)rootNode2));
      assertTrue(rootNode0.equals((Object)rootNode1));
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode0, rootNode2);
      assertSame(contentNode0, contentNode1);
      assertTrue(list3.contains(""));
      assertFalse(list3.contains("PHv6kJ#.p"));
      assertEquals("", rootNode0.getName());
      assertEquals("", contentNode0.getName());
      assertFalse(list3.isEmpty());
      assertEquals(1, list3.size());
      
      LinkedList<String> linkedList2 = contentNode0.asStringCollectionTrimmedFill(linkedList1);
      assertNotNull(linkedList2);
      assertTrue(rootNode0.equals((Object)rootNode2));
      assertTrue(rootNode0.equals((Object)rootNode1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(linkedList2.equals((Object)linkedList0));
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode0, rootNode2);
      assertSame(contentNode0, contentNode1);
      assertSame(linkedList1, linkedList2);
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(linkedList2, linkedList0);
      assertSame(linkedList2, linkedList1);
      assertTrue(linkedList1.contains(""));
      assertFalse(linkedList1.contains("PHv6kJ#.p"));
      assertTrue(linkedList2.contains(""));
      assertFalse(linkedList2.contains("PHv6kJ#.p"));
      assertEquals("", rootNode0.getName());
      assertEquals("", contentNode0.getName());
      assertEquals(1, linkedList1.size());
      assertEquals(1, linkedList2.size());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      RootNode rootNode0 = new RootNode((ContentNode) null);
      assertNotNull(rootNode0);
      assertEquals("", rootNode0.getName());
      
      StringReader stringReader0 = new StringReader("]ha';?l+O R}^`p");
      assertNotNull(stringReader0);
      
      rootNode0.read((Reader) stringReader0);
      assertEquals("", rootNode0.getName());
      
      rootNode0.trimForce();
      assertEquals("", rootNode0.getName());
      
      rootNode0.trim();
      assertEquals("", rootNode0.getName());
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>(3, 3);
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      HashMap<String, String> hashMap1 = rootNode0.asStringMapTrimmedFill(hashMap0);
      assertNotNull(hashMap1);
      assertSame(hashMap0, hashMap1);
      assertSame(hashMap1, hashMap0);
      assertEquals("", rootNode0.getName());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      RootNode rootNode1 = new RootNode((ContentNode) null, 313);
      assertNotNull(rootNode1);
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertEquals("", rootNode1.getName());
      
      HashSet<String> hashSet0 = rootNode1.asStringSet();
      assertNotNull(hashSet0);
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertNotSame(rootNode1, rootNode0);
      assertFalse(hashSet0.contains("]ha';?l+O R}^`p"));
      assertEquals("", rootNode1.getName());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      boolean boolean0 = rootNode0.equals(rootNode1);
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode1, rootNode0);
      assertFalse(boolean0);
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ContentNode contentNode0 = new ContentNode((ContentNode) null, (-2138));
      assertNotNull(contentNode0);
      assertEquals("", contentNode0.getName());
      
      List<String> list0 = contentNode0.asStringListTrimmed();
      assertNotNull(list0);
      assertEquals("", contentNode0.getName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      List<String> list1 = contentNode0.asStringList();
      assertNotNull(list1);
      assertTrue(list1.equals((Object)list0));
      assertNotSame(list1, list0);
      assertEquals("", contentNode0.getName());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ContentNode contentNode0 = new ContentNode((ContentNode) null);
      assertNotNull(contentNode0);
      assertEquals("", contentNode0.getName());
      
      RootNode rootNode0 = new RootNode(contentNode0);
      assertNotNull(rootNode0);
      assertEquals("", contentNode0.getName());
      assertEquals("", rootNode0.getName());
      
      RootNode rootNode1 = rootNode0.copy();
      assertNotNull(rootNode1);
      assertTrue(rootNode1.equals((Object)rootNode0));
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode1, rootNode0);
      assertEquals("", contentNode0.getName());
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      
      ContentNode contentNode1 = new ContentNode(rootNode1, 0);
      assertNotNull(contentNode1);
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertFalse(contentNode1.equals((Object)contentNode0));
      assertEquals("", contentNode0.getName());
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      assertEquals("", contentNode1.getName());
      
      rootNode1.formatAttributeSegments(62);
      assertFalse(contentNode0.equals((Object)contentNode1));
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertNotSame(contentNode0, contentNode1);
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode1, rootNode0);
      assertEquals("", contentNode0.getName());
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      
      contentNode1.addAttributeFromTranscodedExpression(" ");
      assertFalse(contentNode0.equals((Object)contentNode1));
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertFalse(contentNode1.equals((Object)contentNode0));
      assertNotSame(contentNode0, contentNode1);
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode1, rootNode0);
      assertNotSame(contentNode1, contentNode0);
      assertEquals("", contentNode0.getName());
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      assertEquals(" ", contentNode1.getName());
      
      Map<String, String> map0 = contentNode1.asStringMapTrimmed();
      assertNotNull(map0);
      assertFalse(contentNode0.equals((Object)contentNode1));
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertFalse(contentNode1.equals((Object)contentNode0));
      assertNotSame(contentNode0, contentNode1);
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode1, rootNode0);
      assertNotSame(contentNode1, contentNode0);
      assertEquals("", contentNode0.getName());
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      assertEquals(" ", contentNode1.getName());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      boolean boolean0 = contentNode1.removeChild(contentNode0);
      assertFalse(contentNode0.equals((Object)contentNode1));
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertFalse(contentNode1.equals((Object)contentNode0));
      assertNotSame(contentNode0, contentNode1);
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode1, rootNode0);
      assertNotSame(contentNode1, contentNode0);
      assertFalse(boolean0);
      assertEquals("", contentNode0.getName());
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      assertEquals(" ", contentNode1.getName());
      
      LinkedList<AbstractTreeNode> linkedList0 = new LinkedList<AbstractTreeNode>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      contentNode0.appendAll(linkedList0);
      assertFalse(contentNode0.equals((Object)contentNode1));
      assertNotSame(contentNode0, contentNode1);
      assertEquals("", contentNode0.getName());
      assertEquals(0, linkedList0.size());
      
      contentNode0.close();
      assertFalse(contentNode0.equals((Object)contentNode1));
      assertNotSame(contentNode0, contentNode1);
      assertEquals("", contentNode0.getName());
      
      List<TextNode> list0 = rootNode1.getTextNodesFromChildren((-839));
      assertNotNull(list0);
      assertFalse(contentNode0.equals((Object)contentNode1));
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertNotSame(contentNode0, contentNode1);
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode1, rootNode0);
      assertEquals("", contentNode0.getName());
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      List<ContentNode> list1 = contentNode0.getContentNodesFromChildrenThatNameIs("asStringCollection fails!");
      assertNotNull(list1);
      assertFalse(contentNode0.equals((Object)contentNode1));
      assertNotSame(contentNode0, contentNode1);
      assertFalse(list1.contains(contentNode1));
      assertEquals("", contentNode0.getName());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      RootNode rootNode0 = new RootNode((ContentNode) null, 559);
      assertNotNull(rootNode0);
      assertEquals("", rootNode0.getName());
      
      Integer integer0 = new Integer(15);
      assertNotNull(integer0);
      assertEquals(15, (int)integer0);
      
      boolean boolean0 = rootNode0.equals(integer0);
      assertFalse(boolean0);
      assertEquals("", rootNode0.getName());
      
      List<ContentNode> list0 = rootNode0.getContentNodesFromChildren();
      assertNotNull(list0);
      assertEquals("", rootNode0.getName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      ContentNode contentNode0 = rootNode0.copy();
      assertNotNull(contentNode0);
      assertTrue(contentNode0.equals((Object)rootNode0));
      assertNotSame(rootNode0, contentNode0);
      assertNotSame(contentNode0, rootNode0);
      assertEquals("", rootNode0.getName());
      assertEquals("", contentNode0.getName());
      
      RootNode rootNode1 = rootNode0.copy();
      assertNotNull(rootNode1);
      assertTrue(rootNode0.equals((Object)contentNode0));
      assertTrue(rootNode1.equals((Object)contentNode0));
      assertTrue(rootNode1.equals((Object)rootNode0));
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode0, contentNode0);
      assertNotSame(rootNode1, rootNode0);
      assertNotSame(rootNode1, contentNode0);
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      
      boolean boolean1 = rootNode0.equals(rootNode1);
      assertTrue(rootNode0.equals((Object)contentNode0));
      assertTrue(rootNode0.equals((Object)rootNode1));
      assertTrue(rootNode1.equals((Object)contentNode0));
      assertTrue(rootNode1.equals((Object)rootNode0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode0, contentNode0);
      assertNotSame(rootNode1, rootNode0);
      assertNotSame(rootNode1, contentNode0);
      assertTrue(boolean1);
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      RootNode rootNode0 = new RootNode((ContentNode) null, 76);
      assertNotNull(rootNode0);
      assertEquals("", rootNode0.getName());
      
      StringReader stringReader0 = new StringReader("]ha';?l+O R}^`p");
      assertNotNull(stringReader0);
      
      rootNode0.read((Reader) stringReader0);
      assertEquals("", rootNode0.getName());
      
      rootNode0.trimForce();
      assertEquals("", rootNode0.getName());
      
      HashSet<String> hashSet0 = rootNode0.asStringSet();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.contains("]ha';?l+O R}^`p"));
      assertEquals("", rootNode0.getName());
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      
      List<ContentNode> list0 = rootNode0.getContentNodesFromChildrenThatNameIs("]ha';?l+O R}^`p");
      assertNotNull(list0);
      assertEquals("", rootNode0.getName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = 819;
      ContentNode contentNode0 = new ContentNode((ContentNode) null, 819);
      assertNotNull(contentNode0);
      assertEquals("", contentNode0.getName());
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      String string0 = hashMap0.put("Z5[-Qu", "o2|oFnR`");
      assertNull(string0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      String string1 = hashMap0.put("", "");
      assertNull(string1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      
      HashMap<String, String> hashMap1 = contentNode0.asStringMapTrimmedFill(hashMap0);
      assertNotNull(hashMap1);
      assertSame(hashMap0, hashMap1);
      assertSame(hashMap1, hashMap0);
      assertEquals("", contentNode0.getName());
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertEquals(2, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      
      contentNode0.addAttribute("}1<I<Cw<6X.J+23I}", "}1<I<Cw<6X.J+23I}", "}1<I<Cw<6X.J+23I}");
      assertEquals("}1<I<Cw<6X.J+23I}", contentNode0.getName());
      
      contentNode0.append((AbstractTreeNode) null);
      assertEquals("}1<I<Cw<6X.J+23I}", contentNode0.getName());
      
      List<CommentNode> list0 = contentNode0.getCommentNodesFromChildren(2166);
      assertNotNull(list0);
      assertEquals("}1<I<Cw<6X.J+23I}", contentNode0.getName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      List<CommentNode> list1 = contentNode0.getCommentNodesFromChildren();
      assertNotNull(list1);
      assertTrue(list1.equals((Object)list0));
      assertNotSame(list1, list0);
      assertEquals("}1<I<Cw<6X.J+23I}", contentNode0.getName());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      
      String string2 = hashMap0.put("}1<I<Cw<6X.J+23I}", (String) null);
      assertNull(string2);
      assertSame(hashMap0, hashMap1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(3, hashMap0.size());
      
      List<ContentNode> list2 = contentNode0.getContentNodesFromChildrenThatNameIs("}1<I<Cw<6X.J+23I}");
      assertNotNull(list2);
      assertFalse(list2.contains(contentNode0));
      assertEquals("}1<I<Cw<6X.J+23I}", contentNode0.getName());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      
      List<ContentNode> list3 = contentNode0.getContentNodesFromChildren();
      assertNotNull(list3);
      assertTrue(list3.equals((Object)list2));
      assertNotSame(list3, list2);
      assertFalse(list3.contains(contentNode0));
      assertEquals("}1<I<Cw<6X.J+23I}", contentNode0.getName());
      assertEquals(0, list3.size());
      assertTrue(list3.isEmpty());
      
      ContentNode contentNode1 = contentNode0.copy();
      assertNotNull(contentNode1);
      assertTrue(contentNode1.equals((Object)contentNode0));
      assertNotSame(contentNode0, contentNode1);
      assertNotSame(contentNode1, contentNode0);
      assertEquals("}1<I<Cw<6X.J+23I}", contentNode0.getName());
      assertEquals("}1<I<Cw<6X.J+23I}", contentNode1.getName());
      
      HashSet<String> hashSet0 = contentNode0.asStringSetTrimmed();
      assertNotNull(hashSet0);
      assertTrue(contentNode0.equals((Object)contentNode1));
      assertNotSame(contentNode0, contentNode1);
      assertFalse(hashSet0.contains(""));
      assertEquals("}1<I<Cw<6X.J+23I}", contentNode0.getName());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      // Undeclared exception!
      try { 
        contentNode1.changeParentAndRegister(contentNode0, 819);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 819, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      RootNode rootNode0 = new RootNode((ContentNode) null, 0);
      assertNotNull(rootNode0);
      assertEquals("", rootNode0.getName());
      
      RootNode rootNode1 = rootNode0.copy();
      assertNotNull(rootNode1);
      assertTrue(rootNode1.equals((Object)rootNode0));
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode1, rootNode0);
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      
      RootNode rootNode2 = new RootNode(rootNode1);
      assertNotNull(rootNode2);
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertTrue(rootNode2.equals((Object)rootNode0));
      assertFalse(rootNode2.equals((Object)rootNode1));
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      assertEquals("", rootNode2.getName());
      
      List<ContentNode> list0 = rootNode0.getContentNodesFromChildren(0);
      assertNotNull(list0);
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertTrue(rootNode0.equals((Object)rootNode2));
      assertNotSame(rootNode0, rootNode2);
      assertNotSame(rootNode0, rootNode1);
      assertEquals("", rootNode0.getName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      List<TextNode> list1 = rootNode2.getTextNodesFromChildren(0);
      assertNotNull(list1);
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertTrue(rootNode0.equals((Object)rootNode2));
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertFalse(rootNode1.equals((Object)rootNode2));
      assertTrue(rootNode2.equals((Object)rootNode0));
      assertFalse(rootNode2.equals((Object)rootNode1));
      assertNotSame(rootNode0, rootNode2);
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode1, rootNode0);
      assertNotSame(rootNode1, rootNode2);
      assertNotSame(rootNode2, rootNode0);
      assertNotSame(rootNode2, rootNode1);
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      assertEquals("", rootNode2.getName());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      
      rootNode2.addAttribute(" ", "", "?4o*5L@?$`:{gR}");
      assertFalse(rootNode0.equals((Object)rootNode2));
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertFalse(rootNode1.equals((Object)rootNode2));
      assertFalse(rootNode2.equals((Object)rootNode0));
      assertFalse(rootNode2.equals((Object)rootNode1));
      assertNotSame(rootNode0, rootNode2);
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode1, rootNode0);
      assertNotSame(rootNode1, rootNode2);
      assertNotSame(rootNode2, rootNode0);
      assertNotSame(rootNode2, rootNode1);
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      assertEquals(" ", rootNode2.getName());
      
      // Undeclared exception!
      try { 
        rootNode1.asStringMap();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      RootNode rootNode0 = new RootNode((ContentNode) null);
      assertNotNull(rootNode0);
      assertEquals("", rootNode0.getName());
      
      ContentNode contentNode0 = new ContentNode(rootNode0);
      assertNotNull(contentNode0);
      assertEquals("", rootNode0.getName());
      assertEquals("", contentNode0.getName());
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      rootNode0.write((Writer) stringWriter0);
      assertEquals("", rootNode0.getName());
      assertEquals("<>>", stringWriter0.toString());
      
      rootNode0.format((-398));
      assertEquals("", rootNode0.getName());
      
      List<AbstractTreeNode> list0 = contentNode0.getChildren();
      assertNotNull(list0);
      assertEquals("", rootNode0.getName());
      assertEquals("", contentNode0.getName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      rootNode0.show();
      assertEquals("", rootNode0.getName());
      
      rootNode0.trimAttributeSegments();
      assertEquals("", rootNode0.getName());
      
      int int0 = 110;
      RootNode rootNode1 = null;
      try {
        rootNode1 = new RootNode(rootNode0, 110);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 110, Size: 3
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      RootNode rootNode0 = new RootNode((ContentNode) null, 113);
      assertNotNull(rootNode0);
      assertEquals("", rootNode0.getName());
      
      RootNode rootNode1 = rootNode0.copy();
      assertNotNull(rootNode1);
      assertTrue(rootNode1.equals((Object)rootNode0));
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode1, rootNode0);
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      
      rootNode1.format(113);
      assertTrue(rootNode0.equals((Object)rootNode1));
      assertTrue(rootNode1.equals((Object)rootNode0));
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode1, rootNode0);
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      
      ContentNode contentNode0 = null;
      try {
        contentNode0 = new ContentNode(rootNode1, 113);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 113, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      RootNode rootNode0 = new RootNode((ContentNode) null);
      assertNotNull(rootNode0);
      assertEquals("", rootNode0.getName());
      
      RootNode rootNode1 = rootNode0.copy();
      assertNotNull(rootNode1);
      assertTrue(rootNode1.equals((Object)rootNode0));
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode1, rootNode0);
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      
      ContentNode contentNode0 = new ContentNode(rootNode1);
      assertNotNull(contentNode0);
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      assertEquals("", contentNode0.getName());
      
      contentNode0.trim();
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode1, rootNode0);
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      assertEquals("", contentNode0.getName());
      
      contentNode0.addAttribute(" is not implemented yet.", "");
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode1, rootNode0);
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      assertEquals(" is not implemented yet.", contentNode0.getName());
      
      List<String> list0 = rootNode0.asStringList();
      assertNotNull(list0);
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertNotSame(rootNode0, rootNode1);
      assertFalse(list0.contains(" is not implemented yet."));
      assertEquals("", rootNode0.getName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      List<CommentNode> list1 = rootNode0.getCommentNodesFromChildren(14);
      assertNotNull(list1);
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertNotSame(rootNode0, rootNode1);
      assertEquals("", rootNode0.getName());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      
      List<ContentNode> list2 = rootNode1.getContentNodesFromChildrenThatNameIs("#t4,", 2);
      assertNotNull(list2);
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode1, rootNode0);
      assertFalse(list2.contains(contentNode0));
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      
      rootNode1.show();
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode1, rootNode0);
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      
      contentNode0.formatAttributeSegments(14);
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode1, rootNode0);
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      assertEquals(" is not implemented yet.", contentNode0.getName());
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(""));
      assertEquals(0, linkedList0.size());
      
      LinkedList<String> linkedList1 = contentNode0.asStringCollectionFill(linkedList0);
      assertNotNull(linkedList1);
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode1, rootNode0);
      assertSame(linkedList0, linkedList1);
      assertSame(linkedList1, linkedList0);
      assertFalse(linkedList0.contains(""));
      assertFalse(linkedList1.contains(""));
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      assertEquals(" is not implemented yet.", contentNode0.getName());
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      RootNode rootNode0 = new RootNode((ContentNode) null, 233);
      assertNotNull(rootNode0);
      assertEquals("", rootNode0.getName());
      
      StringReader stringReader0 = new StringReader("]ha';?l+O R}^`p");
      assertNotNull(stringReader0);
      
      rootNode0.show();
      assertEquals("", rootNode0.getName());
      
      // Undeclared exception!
      try { 
        rootNode0.read((Reader) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument for @NotNull parameter 'reader' of com/xenoamess/x8l/ContentNode.read must not be null
         //
         verifyException("com.xenoamess.x8l.ContentNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      RootNode rootNode0 = new RootNode((ContentNode) null);
      assertNotNull(rootNode0);
      assertEquals("", rootNode0.getName());
      
      ContentNode contentNode0 = new ContentNode(rootNode0);
      assertNotNull(contentNode0);
      assertEquals("", rootNode0.getName());
      assertEquals("", contentNode0.getName());
      
      List<String> list0 = contentNode0.getAttributeSegments();
      assertNotNull(list0);
      assertEquals("", rootNode0.getName());
      assertEquals("", contentNode0.getName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      List<CommentNode> list1 = contentNode0.getCommentNodesFromChildren();
      assertNotNull(list1);
      assertEquals("", rootNode0.getName());
      assertEquals("", contentNode0.getName());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      
      rootNode0.addAttribute("X8LPATH", "com.xenoamess.commons.primitive.iterators.AbstractFloatSpliterator", "");
      assertEquals("X8LPATH", rootNode0.getName());
      
      rootNode0.addAttributeFromTranscodedExpression("com.xenoamess.commons.primitive.iterators.AbstractByteSpliterator");
      assertEquals("X8LPATH", rootNode0.getName());
      
      contentNode0.trim();
      assertEquals("X8LPATH", rootNode0.getName());
      assertEquals("", contentNode0.getName());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      RootNode rootNode0 = new RootNode((ContentNode) null, 0);
      assertNotNull(rootNode0);
      assertEquals("", rootNode0.getName());
      
      rootNode0.addAttribute("}aqL{TY%{\"GH,|ERe");
      assertEquals("}aqL{TY%{\"GH,|ERe", rootNode0.getName());
      
      StringReader stringReader0 = new StringReader("}aqL{TY%{\"GH,|ERe");
      assertNotNull(stringReader0);
      
      LanguageDealer languageDealer0 = new LanguageDealer();
      assertNotNull(languageDealer0);
      
      rootNode0.read((Reader) stringReader0, languageDealer0);
      assertEquals("}aqL{TY%{\"GH,|ERe", rootNode0.getName());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      RootNode rootNode0 = new RootNode((ContentNode) null, (-1));
      assertNotNull(rootNode0);
      assertEquals("", rootNode0.getName());
      
      List<AbstractTreeNode> list0 = rootNode0.getChildren();
      assertNotNull(list0);
      assertEquals("", rootNode0.getName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      rootNode0.appendAll(list0);
      assertEquals("", rootNode0.getName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      HashSet<String> hashSet0 = rootNode0.asStringSetTrimmed();
      assertNotNull(hashSet0);
      assertEquals("", rootNode0.getName());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      List<ContentNode> list1 = rootNode0.getContentNodesFromChildren(1092);
      assertNotNull(list1);
      assertEquals("", rootNode0.getName());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ContentNode contentNode0 = null;
      ContentNode contentNode1 = new ContentNode((ContentNode) null);
      assertNotNull(contentNode1);
      assertEquals("", contentNode1.getName());
      
      String string0 = "22>C ";
      Map<String, String> map0 = contentNode1.asStringMapTrimmed();
      assertNotNull(map0);
      assertEquals("", contentNode1.getName());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      List<ContentNode> list0 = contentNode1.getContentNodesFromChildren(2260);
      assertNotNull(list0);
      assertFalse(list0.contains(contentNode1));
      assertEquals("", contentNode1.getName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      contentNode1.addAttributeFromTranscodedExpression("22>C ");
      assertEquals("22>C ", contentNode1.getName());
      
      int int0 = (-1265);
      ContentNode contentNode2 = contentNode1.copy();
      assertNotNull(contentNode2);
      assertTrue(contentNode2.equals((Object)contentNode1));
      assertNotSame(contentNode1, contentNode2);
      assertNotSame(contentNode2, contentNode1);
      assertEquals("22>C ", contentNode1.getName());
      assertEquals("22>C ", contentNode2.getName());
      
      // Undeclared exception!
      try { 
        contentNode2.addAttributeFromTranscodedExpression((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.xenoamess.x8l.ContentNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      RootNode rootNode0 = new RootNode((ContentNode) null);
      assertNotNull(rootNode0);
      assertEquals("", rootNode0.getName());
      
      RootNode rootNode1 = rootNode0.copy();
      assertNotNull(rootNode1);
      assertTrue(rootNode1.equals((Object)rootNode0));
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode1, rootNode0);
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      
      ContentNode contentNode0 = new ContentNode(rootNode1);
      assertNotNull(contentNode0);
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      assertEquals("", contentNode0.getName());
      
      ContentNode contentNode1 = contentNode0.copy();
      assertNotNull(contentNode1);
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertTrue(contentNode1.equals((Object)contentNode0));
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode1, rootNode0);
      assertNotSame(contentNode0, contentNode1);
      assertNotSame(contentNode1, contentNode0);
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      assertEquals("", contentNode0.getName());
      assertEquals("", contentNode1.getName());
      
      List<ContentNode> list0 = rootNode0.getContentNodesFromChildren(2147483645);
      assertNotNull(list0);
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertNotSame(rootNode0, rootNode1);
      assertFalse(list0.contains(contentNode0));
      assertEquals("", rootNode0.getName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      RootNode rootNode0 = new RootNode((ContentNode) null);
      assertNotNull(rootNode0);
      assertEquals("", rootNode0.getName());
      
      RootNode rootNode1 = new RootNode(rootNode0, 0);
      assertNotNull(rootNode1);
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      
      RootNode rootNode2 = rootNode1.copy();
      assertNotNull(rootNode2);
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertTrue(rootNode2.equals((Object)rootNode1));
      assertFalse(rootNode2.equals((Object)rootNode0));
      assertNotSame(rootNode0, rootNode2);
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode1, rootNode0);
      assertNotSame(rootNode1, rootNode2);
      assertNotSame(rootNode2, rootNode1);
      assertNotSame(rootNode2, rootNode0);
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      assertEquals("", rootNode2.getName());
      
      ContentNode contentNode0 = new ContentNode(rootNode2, 0);
      assertNotNull(contentNode0);
      assertFalse(rootNode0.equals((Object)rootNode2));
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertFalse(rootNode1.equals((Object)rootNode2));
      assertFalse(rootNode2.equals((Object)rootNode1));
      assertFalse(rootNode2.equals((Object)rootNode0));
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      assertEquals("", rootNode2.getName());
      assertEquals("", contentNode0.getName());
      
      contentNode0.append((AbstractTreeNode) null);
      assertFalse(rootNode0.equals((Object)rootNode2));
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertFalse(rootNode1.equals((Object)rootNode2));
      assertFalse(rootNode2.equals((Object)rootNode1));
      assertFalse(rootNode2.equals((Object)rootNode0));
      assertNotSame(rootNode0, rootNode2);
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode1, rootNode0);
      assertNotSame(rootNode1, rootNode2);
      assertNotSame(rootNode2, rootNode1);
      assertNotSame(rootNode2, rootNode0);
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      assertEquals("", rootNode2.getName());
      assertEquals("", contentNode0.getName());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      RootNode rootNode0 = new RootNode((ContentNode) null);
      assertNotNull(rootNode0);
      assertEquals("", rootNode0.getName());
      
      List<ContentNode> list0 = rootNode0.getContentNodesFromChildrenThatNameIs("[ bYuMPvM3");
      assertNotNull(list0);
      assertEquals("", rootNode0.getName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      RootNode rootNode0 = new RootNode((ContentNode) null, 5);
      assertNotNull(rootNode0);
      assertEquals("", rootNode0.getName());
      
      List<CommentNode> list0 = rootNode0.getCommentNodesFromChildren();
      assertNotNull(list0);
      assertEquals("", rootNode0.getName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      ContentNode contentNode0 = rootNode0.copy();
      assertNotNull(contentNode0);
      assertTrue(contentNode0.equals((Object)rootNode0));
      assertNotSame(rootNode0, contentNode0);
      assertNotSame(contentNode0, rootNode0);
      assertEquals("", rootNode0.getName());
      assertEquals("", contentNode0.getName());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      RootNode rootNode0 = new RootNode((ContentNode) null, 1833);
      assertNotNull(rootNode0);
      assertEquals("", rootNode0.getName());
      
      RootNode rootNode1 = rootNode0.copy();
      assertNotNull(rootNode1);
      assertTrue(rootNode1.equals((Object)rootNode0));
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode1, rootNode0);
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      RootNode rootNode0 = new RootNode((ContentNode) null);
      assertNotNull(rootNode0);
      assertEquals("", rootNode0.getName());
      
      rootNode0.append((AbstractTreeNode) null);
      assertEquals("", rootNode0.getName());
      
      ContentNode contentNode0 = new ContentNode(rootNode0, 0);
      assertNotNull(contentNode0);
      assertEquals("", rootNode0.getName());
      assertEquals("", contentNode0.getName());
      
      contentNode0.setParent((ContentNode) null);
      assertEquals("", rootNode0.getName());
      assertEquals("", contentNode0.getName());
      
      contentNode0.clear();
      assertEquals("", rootNode0.getName());
      assertEquals("", contentNode0.getName());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      RootNode rootNode0 = new RootNode((ContentNode) null);
      assertNotNull(rootNode0);
      assertEquals("", rootNode0.getName());
      
      List<String> list0 = rootNode0.asStringList();
      assertNotNull(list0);
      assertEquals("", rootNode0.getName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Map<String, String> map0 = rootNode0.getAttributes();
      assertNotNull(map0);
      assertEquals("", rootNode0.getName());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      RootNode rootNode1 = rootNode0.copy();
      assertNotNull(rootNode1);
      assertTrue(rootNode1.equals((Object)rootNode0));
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode1, rootNode0);
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      
      RootNode rootNode2 = (RootNode)rootNode0.changeParentAndRegister((ContentNode) rootNode1);
      assertNotNull(rootNode2);
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertFalse(rootNode2.equals((Object)rootNode1));
      assertNotSame(rootNode0, rootNode1);
      assertSame(rootNode0, rootNode2);
      assertNotSame(rootNode1, rootNode0);
      assertNotSame(rootNode1, rootNode2);
      assertNotSame(rootNode2, rootNode1);
      assertSame(rootNode2, rootNode0);
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      assertEquals("", rootNode2.getName());
      
      rootNode0.addAttribute("asStringCollection fails!", "");
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertNotSame(rootNode0, rootNode1);
      assertSame(rootNode0, rootNode2);
      assertEquals("asStringCollection fails!", rootNode0.getName());
      
      StringReader stringReader0 = new StringReader("0%e_dQsdd");
      assertNotNull(stringReader0);
      
      rootNode2.read((Reader) stringReader0);
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertFalse(rootNode1.equals((Object)rootNode2));
      assertFalse(rootNode2.equals((Object)rootNode1));
      assertNotSame(rootNode0, rootNode1);
      assertSame(rootNode0, rootNode2);
      assertNotSame(rootNode1, rootNode0);
      assertNotSame(rootNode1, rootNode2);
      assertNotSame(rootNode2, rootNode1);
      assertSame(rootNode2, rootNode0);
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      assertEquals("", rootNode2.getName());
      
      boolean boolean0 = rootNode0.removeChild(rootNode2);
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertFalse(rootNode1.equals((Object)rootNode2));
      assertFalse(rootNode2.equals((Object)rootNode1));
      assertNotSame(rootNode0, rootNode1);
      assertSame(rootNode0, rootNode2);
      assertNotSame(rootNode1, rootNode0);
      assertNotSame(rootNode1, rootNode2);
      assertNotSame(rootNode2, rootNode1);
      assertSame(rootNode2, rootNode0);
      assertFalse(boolean0);
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      assertEquals("", rootNode2.getName());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      RootNode rootNode0 = new RootNode((ContentNode) null);
      assertNotNull(rootNode0);
      assertEquals("", rootNode0.getName());
      
      RootNode rootNode1 = rootNode0.copy();
      assertNotNull(rootNode1);
      assertTrue(rootNode1.equals((Object)rootNode0));
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode1, rootNode0);
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      
      ContentNode contentNode0 = new ContentNode(rootNode1);
      assertNotNull(contentNode0);
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      assertEquals("", contentNode0.getName());
      
      Map<String, String> map0 = contentNode0.asStringMapTrimmed();
      assertNotNull(map0);
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode1, rootNode0);
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      assertEquals("", contentNode0.getName());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      String string0 = contentNode0.getName();
      assertNotNull(string0);
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode1, rootNode0);
      assertEquals("", string0);
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      assertEquals("", contentNode0.getName());
      
      X8lDataBeanFieldScheme x8lDataBeanFieldScheme0 = X8lDataBeanFieldScheme.X8LPATH;
      List<Object> list0 = contentNode0.fetch(x8lDataBeanFieldScheme0, "");
      assertNotNull(list0);
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode1, rootNode0);
      assertFalse(list0.contains(""));
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      assertEquals("", contentNode0.getName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      contentNode0.addAttribute(" ", "%,wK/.CJ#7Xz7&JE", "");
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode1, rootNode0);
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      assertEquals(" ", contentNode0.getName());
      
      contentNode0.trimAttributeSegments();
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode1, rootNode0);
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      assertEquals(" ", contentNode0.getName());
      
      List<String> list1 = rootNode1.getAttributeSegments();
      assertNotNull(list1);
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode1, rootNode0);
      assertFalse(list1.contains(""));
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      
      contentNode0.trimAttributeSegments();
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode1, rootNode0);
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      assertEquals(" ", contentNode0.getName());
      
      contentNode0.addAttributeFromTranscodedExpression(" ");
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode1, rootNode0);
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      assertEquals(" ", contentNode0.getName());
      
      rootNode1.trimForce();
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode1, rootNode0);
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertFalse(hashSet0.contains(" "));
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      List<String> list2 = rootNode0.asStringList();
      assertNotNull(list2);
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertTrue(list2.equals((Object)list1));
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(list2, list1);
      assertFalse(list2.contains(" "));
      assertEquals("", rootNode0.getName());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      
      List<ContentNode> list3 = rootNode1.getContentNodesFromChildren(84);
      assertNotNull(list3);
      assertFalse(rootNode0.equals((Object)rootNode1));
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertNotSame(rootNode0, rootNode1);
      assertNotSame(rootNode1, rootNode0);
      assertTrue(list3.contains(contentNode0));
      assertEquals("", rootNode0.getName());
      assertEquals("", rootNode1.getName());
      assertFalse(list3.isEmpty());
      assertEquals(1, list3.size());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      RootNode rootNode0 = new RootNode((ContentNode) null);
      assertNotNull(rootNode0);
      assertEquals("", rootNode0.getName());
      
      List<ContentNode> list0 = rootNode0.getContentNodesFromChildren();
      assertNotNull(list0);
      assertEquals("", rootNode0.getName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      ContentNode contentNode0 = new ContentNode(rootNode0, 0);
      assertNotNull(contentNode0);
      assertEquals("", rootNode0.getName());
      assertEquals("", contentNode0.getName());
      
      ContentNode contentNode1 = contentNode0.copy();
      assertNotNull(contentNode1);
      assertTrue(contentNode1.equals((Object)contentNode0));
      assertNotSame(contentNode0, contentNode1);
      assertNotSame(contentNode1, contentNode0);
      assertEquals("", rootNode0.getName());
      assertEquals("", contentNode0.getName());
      assertEquals("", contentNode1.getName());
      
      contentNode1.append(rootNode0);
      assertFalse(contentNode0.equals((Object)contentNode1));
      assertFalse(contentNode1.equals((Object)contentNode0));
      assertNotSame(contentNode0, contentNode1);
      assertNotSame(contentNode1, contentNode0);
      assertEquals("", rootNode0.getName());
      assertEquals("", contentNode0.getName());
      assertEquals("", contentNode1.getName());
      
      List<CommentNode> list1 = rootNode0.getCommentNodesFromChildren();
      assertNotNull(list1);
      assertEquals("", rootNode0.getName());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      
      List<String> list2 = contentNode0.asStringList();
      assertNotNull(list2);
      assertFalse(contentNode0.equals((Object)contentNode1));
      assertNotSame(contentNode0, contentNode1);
      assertEquals("", rootNode0.getName());
      assertEquals("", contentNode0.getName());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertNotNull(linkedList1);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      
      contentNode0.clear();
      assertFalse(contentNode0.equals((Object)contentNode1));
      assertNotSame(contentNode0, contentNode1);
      assertEquals("", rootNode0.getName());
      assertEquals("", contentNode0.getName());
      
      boolean boolean0 = contentNode0.removeChild((AbstractTreeNode) null);
      assertFalse(contentNode0.equals((Object)contentNode1));
      assertNotSame(contentNode0, contentNode1);
      assertFalse(boolean0);
      assertEquals("", rootNode0.getName());
      assertEquals("", contentNode0.getName());
      
      contentNode1.show();
      assertFalse(contentNode0.equals((Object)contentNode1));
      assertFalse(contentNode1.equals((Object)contentNode0));
      assertNotSame(contentNode0, contentNode1);
      assertNotSame(contentNode1, contentNode0);
      assertEquals("", rootNode0.getName());
      assertEquals("", contentNode0.getName());
      assertEquals("", contentNode1.getName());
      
      contentNode0.addAttributeFromTranscodedExpression("uZx,3#");
      assertFalse(contentNode0.equals((Object)contentNode1));
      assertNotSame(contentNode0, contentNode1);
      assertEquals("", rootNode0.getName());
      assertEquals("uZx,3#", contentNode0.getName());
      
      rootNode0.format(0);
      assertEquals("", rootNode0.getName());
      
      contentNode0.addAttributeFromTranscodedExpression("");
      assertFalse(contentNode0.equals((Object)contentNode1));
      assertNotSame(contentNode0, contentNode1);
      assertEquals("", rootNode0.getName());
      assertEquals("uZx,3#", contentNode0.getName());
      
      HashSet<String> hashSet0 = contentNode1.asStringSetTrimmed();
      assertNotNull(hashSet0);
      assertFalse(contentNode0.equals((Object)contentNode1));
      assertFalse(contentNode1.equals((Object)contentNode0));
      assertNotSame(contentNode0, contentNode1);
      assertNotSame(contentNode1, contentNode0);
      assertFalse(hashSet0.contains("uZx,3#"));
      assertEquals("", rootNode0.getName());
      assertEquals("uZx,3#", contentNode0.getName());
      assertEquals("", contentNode1.getName());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      List<String> list3 = contentNode1.asStringList();
      assertNotNull(list3);
      assertTrue(list3.equals((Object)list2));
      assertFalse(contentNode0.equals((Object)contentNode1));
      assertFalse(contentNode1.equals((Object)contentNode0));
      assertNotSame(list3, list2);
      assertNotSame(contentNode0, contentNode1);
      assertNotSame(contentNode1, contentNode0);
      assertFalse(list3.contains("uZx,3#"));
      assertTrue(list3.isEmpty());
      assertEquals(0, list3.size());
      assertEquals("", rootNode0.getName());
      assertEquals("uZx,3#", contentNode0.getName());
      assertEquals("", contentNode1.getName());
      
      rootNode0.show();
      assertEquals("", rootNode0.getName());
      
      List<ContentNode> list4 = contentNode0.getContentNodesFromChildren((-267));
      assertNotNull(list4);
      assertTrue(list4.equals((Object)list0));
      assertFalse(contentNode0.equals((Object)contentNode1));
      assertNotSame(list4, list0);
      assertNotSame(contentNode0, contentNode1);
      assertFalse(list4.contains(contentNode1));
      assertEquals("", rootNode0.getName());
      assertEquals(0, list4.size());
      assertTrue(list4.isEmpty());
      assertEquals("uZx,3#", contentNode0.getName());
      
      LinkedList<String> linkedList2 = rootNode0.asStringCollectionTrimmedFill(linkedList0);
      assertNotNull(linkedList2);
      assertFalse(linkedList2.equals((Object)linkedList1));
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertNotSame(linkedList2, linkedList1);
      assertSame(linkedList2, linkedList0);
      assertNotSame(linkedList0, linkedList1);
      assertSame(linkedList0, linkedList2);
      assertFalse(linkedList2.contains("uZx,3#"));
      assertTrue(linkedList2.contains(""));
      assertFalse(linkedList0.contains("uZx,3#"));
      assertTrue(linkedList0.contains(""));
      assertEquals("", rootNode0.getName());
      assertEquals(2, linkedList2.size());
      assertEquals(2, linkedList0.size());
      
      boolean boolean1 = contentNode0.removeChild((AbstractTreeNode) null);
      assertFalse(contentNode0.equals((Object)contentNode1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(contentNode0, contentNode1);
      assertFalse(boolean1);
      assertEquals("", rootNode0.getName());
      assertEquals("uZx,3#", contentNode0.getName());
      
      contentNode1.append(rootNode0);
      assertFalse(contentNode0.equals((Object)contentNode1));
      assertFalse(contentNode1.equals((Object)contentNode0));
      assertNotSame(contentNode0, contentNode1);
      assertNotSame(contentNode1, contentNode0);
      assertEquals("", rootNode0.getName());
      assertEquals("uZx,3#", contentNode0.getName());
      assertEquals("", contentNode1.getName());
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      ContentNode contentNode2 = contentNode1.copy();
      assertNotNull(contentNode2);
      assertFalse(contentNode0.equals((Object)contentNode1));
      assertFalse(contentNode1.equals((Object)contentNode0));
      assertFalse(contentNode2.equals((Object)contentNode0));
      assertTrue(contentNode2.equals((Object)contentNode1));
      assertNotSame(contentNode0, contentNode1);
      assertNotSame(contentNode0, contentNode2);
      assertNotSame(contentNode1, contentNode2);
      assertNotSame(contentNode1, contentNode0);
      assertNotSame(contentNode2, contentNode1);
      assertNotSame(contentNode2, contentNode0);
      assertEquals("", rootNode0.getName());
      assertEquals("uZx,3#", contentNode0.getName());
      assertEquals("", contentNode1.getName());
      assertEquals("", contentNode2.getName());
      
      contentNode2.format(1437);
      assertFalse(contentNode0.equals((Object)contentNode1));
      assertFalse(contentNode0.equals((Object)contentNode2));
      assertFalse(contentNode1.equals((Object)contentNode2));
      assertFalse(contentNode1.equals((Object)contentNode0));
      assertFalse(contentNode2.equals((Object)contentNode1));
      assertFalse(contentNode2.equals((Object)contentNode0));
      assertNotSame(contentNode0, contentNode1);
      assertNotSame(contentNode0, contentNode2);
      assertNotSame(contentNode1, contentNode2);
      assertNotSame(contentNode1, contentNode0);
      assertNotSame(contentNode2, contentNode1);
      assertNotSame(contentNode2, contentNode0);
      assertEquals("", rootNode0.getName());
      assertEquals("uZx,3#", contentNode0.getName());
      assertEquals("", contentNode1.getName());
      assertEquals("", contentNode2.getName());
      
      List<String> list5 = contentNode0.getAttributesKeyList();
      assertNotNull(list5);
      assertFalse(contentNode0.equals((Object)contentNode1));
      assertFalse(contentNode0.equals((Object)contentNode2));
      assertNotSame(contentNode0, contentNode1);
      assertNotSame(contentNode0, contentNode2);
      assertTrue(list5.contains("uZx,3#"));
      assertEquals("", rootNode0.getName());
      assertEquals("uZx,3#", contentNode0.getName());
      assertEquals(2, list5.size());
      assertFalse(list5.isEmpty());
      
      List<ContentNode> list6 = contentNode2.getContentNodesFromChildrenThatNameIs("W");
      assertNotNull(list6);
      assertFalse(contentNode0.equals((Object)contentNode1));
      assertFalse(contentNode0.equals((Object)contentNode2));
      assertFalse(contentNode1.equals((Object)contentNode2));
      assertFalse(contentNode1.equals((Object)contentNode0));
      assertFalse(contentNode2.equals((Object)contentNode1));
      assertFalse(contentNode2.equals((Object)contentNode0));
      assertNotSame(contentNode0, contentNode1);
      assertNotSame(contentNode0, contentNode2);
      assertNotSame(contentNode1, contentNode2);
      assertNotSame(contentNode1, contentNode0);
      assertNotSame(contentNode2, contentNode1);
      assertNotSame(contentNode2, contentNode0);
      assertFalse(list6.contains(contentNode1));
      assertEquals("", rootNode0.getName());
      assertEquals("uZx,3#", contentNode0.getName());
      assertEquals("", contentNode1.getName());
      assertEquals("", contentNode2.getName());
      assertTrue(list6.isEmpty());
      assertEquals(0, list6.size());
      
      // Undeclared exception!
      contentNode2.trim();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ContentNode contentNode0 = new ContentNode((ContentNode) null);
      assertNotNull(contentNode0);
      assertEquals("", contentNode0.getName());
      
      RootNode rootNode0 = new RootNode(contentNode0);
      assertNotNull(rootNode0);
      assertEquals("", contentNode0.getName());
      assertEquals("", rootNode0.getName());
      
      List<Object> list0 = contentNode0.fetch("");
      assertNotNull(list0);
      assertFalse(list0.contains(""));
      assertEquals("", contentNode0.getName());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      Class<Object> class0 = Object.class;
      List<Object> list1 = rootNode0.fetch("|#sM[#", class0);
      assertNotNull(list1);
      assertFalse(list1.equals((Object)list0));
      assertNotSame(list1, list0);
      assertFalse(list1.contains(""));
      assertEquals("", contentNode0.getName());
      assertEquals("", rootNode0.getName());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      
      boolean boolean0 = rootNode0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals("", contentNode0.getName());
      assertEquals("", rootNode0.getName());
      
      List<ContentNode> list2 = rootNode0.getContentNodesFromChildren((-1948));
      assertNotNull(list2);
      assertFalse(list2.contains(contentNode0));
      assertEquals("", contentNode0.getName());
      assertEquals("", rootNode0.getName());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      
      String string0 = "readObject";
      List<CommentNode> list3 = contentNode0.getCommentNodesFromChildren((-1948));
      assertNotNull(list3);
      assertEquals("", contentNode0.getName());
      assertTrue(list3.isEmpty());
      assertEquals(0, list3.size());
      
      int int0 = 9;
      // Undeclared exception!
      try { 
        rootNode0.removeAttribute("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ContentNode contentNode0 = new ContentNode((ContentNode) null);
      assertNotNull(contentNode0);
      assertEquals("", contentNode0.getName());
      
      RootNode rootNode0 = new RootNode(contentNode0);
      assertNotNull(rootNode0);
      assertEquals("", contentNode0.getName());
      assertEquals("", rootNode0.getName());
      
      rootNode0.trimAttributeSegments();
      assertEquals("", contentNode0.getName());
      assertEquals("", rootNode0.getName());
      
      HashSet<String> hashSet0 = contentNode0.asStringSet();
      assertNotNull(hashSet0);
      assertEquals("", contentNode0.getName());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      contentNode0.addAttribute("}1<I<Cw<6X.J+23I}", "attributes : ", " ");
      assertEquals("}1<I<Cw<6X.J+23I}", contentNode0.getName());
      
      List<ContentNode> list0 = contentNode0.getContentNodesFromChildrenThatNameIs((String) null);
      assertNotNull(list0);
      assertFalse(list0.contains(contentNode0));
      assertEquals("}1<I<Cw<6X.J+23I}", contentNode0.getName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      UnaryOperator<AbstractTreeNode> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      List<AbstractTreeNode> list1 = contentNode0.applyToAllNodes((Function<AbstractTreeNode, AbstractTreeNode>) unaryOperator0);
      assertNotNull(list1);
      assertEquals("}1<I<Cw<6X.J+23I}", contentNode0.getName());
      assertEquals(2, list1.size());
      assertFalse(list1.isEmpty());
      
      contentNode0.appendAll(list1);
      assertEquals("}1<I<Cw<6X.J+23I}", contentNode0.getName());
      assertEquals(2, list1.size());
      assertFalse(list1.isEmpty());
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("}1<I<Cw<6X.J+23I}"));
      assertEquals(0, linkedList0.size());
      
      List<ContentNode> list2 = contentNode0.getContentNodesFromChildren();
      assertNotNull(list2);
      assertFalse(list2.equals((Object)list0));
      assertNotSame(list2, list0);
      assertTrue(list2.contains(contentNode0));
      assertEquals("}1<I<Cw<6X.J+23I}", contentNode0.getName());
      assertEquals(3, list2.size());
      assertFalse(list2.isEmpty());
      
      LinkedList<AbstractTreeNode> linkedList1 = new LinkedList<AbstractTreeNode>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      CommentNode commentNode0 = new CommentNode(contentNode0, "");
      assertNotNull(commentNode0);
      assertEquals("}1<I<Cw<6X.J+23I}", contentNode0.getName());
      assertEquals("", commentNode0.getTextContent());
      
      boolean boolean0 = linkedList1.add((AbstractTreeNode) commentNode0);
      assertTrue(boolean0);
      assertEquals("}1<I<Cw<6X.J+23I}", contentNode0.getName());
      assertEquals(1, linkedList1.size());
      assertEquals("", commentNode0.getTextContent());
      
      CommentNode commentNode1 = (CommentNode)linkedList1.removeFirst();
      assertNotNull(commentNode1);
      assertSame(commentNode1, commentNode0);
      assertEquals(0, linkedList1.size());
      assertEquals("", commentNode1.getTextContent());
      
      String string0 = contentNode0.getName();
      assertNotNull(string0);
      assertEquals("}1<I<Cw<6X.J+23I}", string0);
      assertEquals("}1<I<Cw<6X.J+23I}", contentNode0.getName());
      
      rootNode0.appendAll(linkedList1);
      assertEquals("}1<I<Cw<6X.J+23I}", contentNode0.getName());
      assertEquals("", rootNode0.getName());
      assertEquals(0, linkedList1.size());
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      HashMap<String, String> hashMap1 = rootNode0.asStringMapTrimmedFill(hashMap0);
      assertNotNull(hashMap1);
      assertSame(hashMap0, hashMap1);
      assertSame(hashMap1, hashMap0);
      assertEquals("}1<I<Cw<6X.J+23I}", contentNode0.getName());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("", rootNode0.getName());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      rootNode0.addAttribute("}1<I<Cw<6X.J+23I}", "}1<I<Cw<6X.J+23I}", "3D~=?\f+Rq,/7U`,M");
      assertEquals("}1<I<Cw<6X.J+23I}", contentNode0.getName());
      assertEquals("}1<I<Cw<6X.J+23I}", rootNode0.getName());
      
      List<CommentNode> list3 = contentNode0.getCommentNodesFromChildren();
      assertNotNull(list3);
      assertTrue(list3.contains(commentNode0));
      assertEquals("}1<I<Cw<6X.J+23I}", contentNode0.getName());
      assertEquals(1, list3.size());
      assertFalse(list3.isEmpty());
      
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      assertNotNull(hashMap2);
      assertEquals(0, hashMap2.size());
      assertTrue(hashMap2.isEmpty());
      
      String string1 = contentNode0.getName();
      assertNotNull(string1);
      assertEquals("}1<I<Cw<6X.J+23I}", string1);
      assertEquals("}1<I<Cw<6X.J+23I}", contentNode0.getName());
      
      List<String> list4 = rootNode0.asStringListTrimmed();
      assertNotNull(list4);
      assertFalse(list4.contains("}1<I<Cw<6X.J+23I}"));
      assertEquals("}1<I<Cw<6X.J+23I}", contentNode0.getName());
      assertEquals("}1<I<Cw<6X.J+23I}", rootNode0.getName());
      assertEquals(0, list4.size());
      assertTrue(list4.isEmpty());
      
      HashSet<String> hashSet1 = rootNode0.asStringSetTrimmed();
      assertNotNull(hashSet1);
      assertFalse(hashSet1.contains("}1<I<Cw<6X.J+23I}"));
      assertEquals("}1<I<Cw<6X.J+23I}", contentNode0.getName());
      assertEquals("}1<I<Cw<6X.J+23I}", rootNode0.getName());
      assertEquals(0, hashSet1.size());
      assertTrue(hashSet1.isEmpty());
      
      rootNode0.addAttribute("com.xenoamess.x8l.ContentNode", "com.xenoamess.x8l.ContentNode", " is not implemented yet.");
      assertEquals("}1<I<Cw<6X.J+23I}", contentNode0.getName());
      assertEquals("}1<I<Cw<6X.J+23I}", rootNode0.getName());
      
      HashMap<String, String> hashMap3 = rootNode0.asStringMapTrimmedFill((HashMap<String, String>) hashMap0);
      assertNotNull(hashMap3);
      assertTrue(hashMap3.equals((Object)hashMap2));
      assertSame(hashMap0, hashMap1);
      assertNotSame(hashMap3, hashMap2);
      assertEquals("}1<I<Cw<6X.J+23I}", contentNode0.getName());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("}1<I<Cw<6X.J+23I}", rootNode0.getName());
      assertEquals(0, hashMap3.size());
      assertTrue(hashMap3.isEmpty());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      ContentNode contentNode0 = new ContentNode((ContentNode) null);
      assertNotNull(contentNode0);
      assertEquals("", contentNode0.getName());
      
      RootNode rootNode0 = new RootNode(contentNode0);
      assertNotNull(rootNode0);
      assertEquals("", contentNode0.getName());
      assertEquals("", rootNode0.getName());
      
      rootNode0.trimAttributeSegments();
      assertEquals("", contentNode0.getName());
      assertEquals("", rootNode0.getName());
      
      HashSet<String> hashSet0 = contentNode0.asStringSet();
      assertNotNull(hashSet0);
      assertEquals("", contentNode0.getName());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      contentNode0.addAttribute("}1<I<Cw<6X.J+23I}", "attributes : ", " ");
      assertEquals("}1<I<Cw<6X.J+23I}", contentNode0.getName());
      
      List<ContentNode> list0 = contentNode0.getContentNodesFromChildrenThatNameIs((String) null);
      assertNotNull(list0);
      assertFalse(list0.contains(contentNode0));
      assertEquals("}1<I<Cw<6X.J+23I}", contentNode0.getName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      UnaryOperator<AbstractTreeNode> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      List<AbstractTreeNode> list1 = contentNode0.applyToAllNodes((Function<AbstractTreeNode, AbstractTreeNode>) unaryOperator0);
      assertNotNull(list1);
      assertEquals("}1<I<Cw<6X.J+23I}", contentNode0.getName());
      assertFalse(list1.isEmpty());
      assertEquals(2, list1.size());
      
      contentNode0.appendAll(list1);
      assertEquals("}1<I<Cw<6X.J+23I}", contentNode0.getName());
      assertFalse(list1.isEmpty());
      assertEquals(2, list1.size());
      
      List<String> list2 = rootNode0.asStringList();
      assertNotNull(list2);
      assertFalse(list2.contains("}1<I<Cw<6X.J+23I}"));
      assertEquals("}1<I<Cw<6X.J+23I}", contentNode0.getName());
      assertEquals("", rootNode0.getName());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      
      List<ContentNode> list3 = contentNode0.getContentNodesFromChildren();
      assertNotNull(list3);
      assertFalse(list3.equals((Object)list0));
      assertNotSame(list3, list0);
      assertTrue(list3.contains(contentNode0));
      assertEquals("}1<I<Cw<6X.J+23I}", contentNode0.getName());
      assertEquals(3, list3.size());
      assertFalse(list3.isEmpty());
      
      LinkedList<AbstractTreeNode> linkedList0 = new LinkedList<AbstractTreeNode>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      AbstractTreeNode abstractTreeNode0 = linkedList0.pollLast();
      assertNull(abstractTreeNode0);
      assertEquals(0, linkedList0.size());
      
      CommentNode commentNode0 = new CommentNode(contentNode0, "");
      assertNotNull(commentNode0);
      assertEquals("}1<I<Cw<6X.J+23I}", contentNode0.getName());
      assertEquals("", commentNode0.getTextContent());
      
      boolean boolean0 = linkedList0.add((AbstractTreeNode) commentNode0);
      assertTrue(boolean0);
      assertEquals("}1<I<Cw<6X.J+23I}", contentNode0.getName());
      assertEquals(1, linkedList0.size());
      assertEquals("", commentNode0.getTextContent());
      
      String string0 = contentNode0.getName();
      assertNotNull(string0);
      assertEquals("}1<I<Cw<6X.J+23I}", string0);
      assertEquals("}1<I<Cw<6X.J+23I}", contentNode0.getName());
      
      rootNode0.appendAll(linkedList0);
      assertEquals("}1<I<Cw<6X.J+23I}", contentNode0.getName());
      assertEquals("", rootNode0.getName());
      assertEquals(1, linkedList0.size());
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      HashMap<String, String> hashMap1 = rootNode0.asStringMapTrimmedFill(hashMap0);
      assertNotNull(hashMap1);
      assertSame(hashMap0, hashMap1);
      assertSame(hashMap1, hashMap0);
      assertEquals("}1<I<Cw<6X.J+23I}", contentNode0.getName());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("", rootNode0.getName());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      rootNode0.addAttribute("}1<I<Cw<6X.J+23I}", "}1<I<Cw<6X.J+23I}", "3D~=?\f+Rq,/7U`,M");
      assertEquals("}1<I<Cw<6X.J+23I}", contentNode0.getName());
      assertEquals("}1<I<Cw<6X.J+23I}", rootNode0.getName());
      
      String string1 = hashMap0.put("com/xenoamess/x8l/X8lTree", "Json does not allow this here.we just delete it : {}");
      assertNull(string1);
      assertSame(hashMap0, hashMap1);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      List<CommentNode> list4 = contentNode0.getCommentNodesFromChildren();
      assertNotNull(list4);
      assertTrue(list4.contains(commentNode0));
      assertEquals("}1<I<Cw<6X.J+23I}", contentNode0.getName());
      assertEquals(1, list4.size());
      assertFalse(list4.isEmpty());
      
      contentNode0.addAttributeFromTranscodedExpression("}1<I<Cw<6X.J+23I}");
      assertEquals("}1<I<Cw<6X.J+23I}", contentNode0.getName());
      
      // Undeclared exception!
      try { 
        contentNode0.asStringMapTrimmedFill((HashMap<String, String>) hashMap1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      RootNode rootNode0 = new RootNode((ContentNode) null);
      rootNode0.getContentNodesFromChildren();
      ContentNode contentNode0 = new ContentNode(rootNode0, 0);
      ContentNode contentNode1 = contentNode0.copy();
      contentNode1.append(rootNode0);
      contentNode1.getCommentNodesFromChildren(0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = " ";
      stringArray0[1] = " ";
      stringArray0[2] = "";
      stringArray0[3] = " ";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = " ";
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      List<String> list0 = contentNode0.asStringList();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      rootNode0.asStringCollectionTrimmedFill(linkedList1);
      contentNode0.clear();
      contentNode0.removeChild((AbstractTreeNode) null);
      contentNode1.show();
      contentNode0.addAttributeFromTranscodedExpression("uZx,3#");
      rootNode0.format(0);
      contentNode0.addAttributeFromTranscodedExpression("");
      contentNode1.asStringSetTrimmed();
      contentNode1.asStringList();
      contentNode0.getContentNodesFromChildren((-267));
      rootNode0.asStringCollectionTrimmedFill(linkedList1);
      contentNode0.removeChild((AbstractTreeNode) null);
      contentNode0.getAttributes();
      rootNode0.trimForce();
      contentNode0.asStringList();
      contentNode1.equals(list0);
      assertEquals("uZx,3#", contentNode0.getName());
      
      contentNode0.removeAttribute("uZx,3#");
      assertEquals("", contentNode0.getName());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      RootNode rootNode0 = new RootNode((ContentNode) null);
      ContentNode contentNode0 = new ContentNode(rootNode0);
      contentNode0.close();
      X8lDataBeanFieldScheme x8lDataBeanFieldScheme0 = X8lDataBeanFieldScheme.X8LPATH;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      ContentNode contentNode1 = new ContentNode(contentNode0, 0);
      stringArray0[1] = "";
      stringArray0[4] = "";
      stringArray0[5] = " ";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      contentNode1.fetch(x8lDataBeanFieldScheme0, "");
      RootNode rootNode1 = new RootNode(contentNode0, 0);
      StringReader stringReader0 = new StringReader("");
      char[] charArray0 = new char[22];
      charArray0[0] = '&';
      charArray0[1] = '&';
      charArray0[2] = ':';
      charArray0[3] = 'L';
      charArray0[4] = '$';
      charArray0[5] = 'X';
      charArray0[6] = 'c';
      charArray0[7] = 'Z';
      stringReader0.read(charArray0);
      contentNode0.read((Reader) stringReader0);
      LinkedList<ContentNode> linkedList1 = new LinkedList<ContentNode>();
      rootNode1.copy();
      contentNode0.getCommentNodesFromChildren(56);
      contentNode0.asStringListTrimmed();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      assertEquals(0, linkedList2.size());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      RootNode rootNode0 = new RootNode((ContentNode) null);
      StringReader stringReader0 = new StringReader("]ha';?l+O R}^b}");
      rootNode0.addAttributeFromTranscodedExpression("Argument for @NotNull parameter '%s' of %s.%s must not be null");
      stringReader0.reset();
      rootNode0.read((Reader) stringReader0);
      rootNode0.trimForce();
      rootNode0.trim();
      rootNode0.getName();
      rootNode0.format(1436);
      assertEquals("", rootNode0.getName());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      RootNode rootNode0 = new RootNode((ContentNode) null);
      rootNode0.getContentNodesFromChildren();
      ContentNode contentNode0 = new ContentNode(rootNode0, 0);
      ContentNode contentNode1 = contentNode0.copy();
      contentNode1.append(rootNode0);
      rootNode0.getCommentNodesFromChildren();
      contentNode0.asStringList();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      rootNode0.asStringCollectionTrimmedFill(linkedList0);
      contentNode0.clear();
      contentNode0.removeChild((AbstractTreeNode) null);
      contentNode1.show();
      assertFalse(contentNode1.equals((Object)contentNode0));
      
      contentNode0.addAttributeFromTranscodedExpression("uZx,3#");
      rootNode0.format(0);
      contentNode0.addAttributeFromTranscodedExpression("");
      contentNode1.asStringList();
      contentNode0.removeChild((AbstractTreeNode) null);
      contentNode1.asStringMap();
      ContentNode contentNode2 = contentNode1.copy();
      contentNode2.addAttribute("LBr+@g.v60W,q g&$");
      contentNode2.format(1437);
      assertEquals("uZx,3#", contentNode0.getName());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      RootNode rootNode0 = new RootNode((ContentNode) null);
      StringReader stringReader0 = new StringReader("nBTC&oTdf`]$2gNZ");
      rootNode0.read((Reader) stringReader0);
      rootNode0.trimForce();
      rootNode0.trim();
      HashMap<String, String> hashMap0 = new HashMap<String, String>(3, 3);
      HashMap<String, String> hashMap1 = rootNode0.asStringMapTrimmedFill(hashMap0);
      RootNode rootNode1 = rootNode0.copy();
      rootNode0.equals(rootNode1);
      assertTrue(rootNode1.equals((Object)rootNode0));
      
      RootNode rootNode2 = new RootNode(rootNode0);
      rootNode1.trim();
      boolean boolean0 = rootNode0.equals(rootNode2);
      assertFalse(boolean0);
      
      rootNode1.asStringMapFill((HashMap<String, String>) hashMap1);
      rootNode1.getTextNodesFromChildren();
      HashSet<String> hashSet0 = rootNode0.asStringSet();
      assertFalse(hashSet0.isEmpty());
  }
}
