/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 05 20:53:34 GMT 2022
 */

package com.xenoamess.x8l;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.xenoamess.x8l.AbstractTreeNode;
import com.xenoamess.x8l.CommentNode;
import com.xenoamess.x8l.ContentNode;
import com.xenoamess.x8l.RootNode;
import com.xenoamess.x8l.TextNode;
import com.xenoamess.x8l.databind.X8lDataBeanFieldScheme;
import com.xenoamess.x8l.dealers.LanguageDealer;
import java.io.StringWriter;
import java.io.Writer;
import java.util.List;
import org.apache.commons.lang3.NotImplementedException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractTreeNode_ESTest extends AbstractTreeNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ContentNode contentNode0 = new ContentNode((ContentNode) null);
      // Undeclared exception!
      try { 
        contentNode0.changeParentAndRegister((ContentNode) null, (-1993));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.xenoamess.x8l.AbstractTreeNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RootNode rootNode0 = new RootNode((ContentNode) null, 3139);
      StringWriter stringWriter0 = new StringWriter();
      rootNode0.write((Writer) stringWriter0);
      assertEquals("", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TextNode textNode0 = new TextNode((ContentNode) null, (String) null);
      textNode0.show();
      assertEquals("", textNode0.getTextContent());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ContentNode contentNode0 = new ContentNode((ContentNode) null, (-2675));
      RootNode rootNode0 = new RootNode(contentNode0);
      TextNode textNode0 = new TextNode(rootNode0, 0, "");
      textNode0.format((-2675));
      assertEquals("", textNode0.getTextContent());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RootNode rootNode0 = new RootNode((ContentNode) null);
      rootNode0.clear();
      assertEquals("", rootNode0.getName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RootNode rootNode0 = new RootNode((ContentNode) null, (-1));
      String string0 = rootNode0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RootNode rootNode0 = new RootNode((ContentNode) null);
      ContentNode contentNode0 = rootNode0.getParent();
      assertNull(contentNode0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RootNode rootNode0 = new RootNode((ContentNode) null);
      RootNode rootNode1 = new RootNode(rootNode0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = " ";
      stringArray0[2] = " ";
      stringArray0[3] = "";
      stringArray0[4] = "";
      Class<RootNode> class0 = RootNode.class;
      List<RootNode> list0 = rootNode0.fetch(stringArray0, class0);
      assertEquals(3, list0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RootNode rootNode0 = new RootNode((ContentNode) null, (-2746));
      ContentNode contentNode0 = new ContentNode(rootNode0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      List<Object> list0 = rootNode0.fetch(stringArray0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ContentNode contentNode0 = new ContentNode((ContentNode) null, (-2675));
      ContentNode contentNode1 = new ContentNode(contentNode0);
      Class<AbstractTreeNode> class0 = AbstractTreeNode.class;
      List<AbstractTreeNode> list0 = contentNode0.fetch("", class0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ContentNode contentNode0 = new ContentNode((ContentNode) null, 0);
      RootNode rootNode0 = new RootNode(contentNode0, 0);
      List<Object> list0 = contentNode0.fetch("");
      assertFalse(list0.contains(0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RootNode rootNode0 = new RootNode((ContentNode) null, 0);
      ContentNode contentNode0 = new ContentNode(rootNode0, 0);
      X8lDataBeanFieldScheme x8lDataBeanFieldScheme0 = X8lDataBeanFieldScheme.X8LPATH;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = " ";
      stringArray0[3] = "";
      stringArray0[4] = " ";
      List<Object> list0 = rootNode0.fetch(x8lDataBeanFieldScheme0, stringArray0);
      assertEquals(3, list0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ContentNode contentNode0 = new ContentNode((ContentNode) null);
      RootNode rootNode0 = new RootNode(contentNode0);
      X8lDataBeanFieldScheme x8lDataBeanFieldScheme0 = X8lDataBeanFieldScheme.X8LPATH;
      List<Object> list0 = contentNode0.fetch(x8lDataBeanFieldScheme0, "");
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ContentNode contentNode0 = new ContentNode((ContentNode) null);
      AbstractTreeNode abstractTreeNode0 = contentNode0.copy();
      assertNotSame(contentNode0, abstractTreeNode0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RootNode rootNode0 = new RootNode((ContentNode) null);
      AbstractTreeNode abstractTreeNode0 = rootNode0.changeParentAndRegister((ContentNode) rootNode0, 0);
      assertSame(rootNode0, abstractTreeNode0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RootNode rootNode0 = new RootNode((ContentNode) null, 21);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        rootNode0.write((Writer) stringWriter0, (LanguageDealer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.xenoamess.x8l.AbstractTreeNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RootNode rootNode0 = new RootNode((ContentNode) null);
      TextNode textNode0 = new TextNode(rootNode0, " P }?D0vP");
      LanguageDealer languageDealer0 = new LanguageDealer();
      // Undeclared exception!
      try { 
        textNode0.write((Writer) null, languageDealer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument for @NotNull parameter 'writer' of com/xenoamess/x8l/dealers/LanguageDealer.write must not be null
         //
         verifyException("com.xenoamess.x8l.dealers.LanguageDealer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CommentNode commentNode0 = new CommentNode((ContentNode) null, "");
      commentNode0.close();
      // Undeclared exception!
      try { 
        commentNode0.show();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument for @NotNull parameter 'originalString' of com/xenoamess/x8l/X8lTree.transcodeComment must not be null
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RootNode rootNode0 = new RootNode((ContentNode) null, 0);
      CommentNode commentNode0 = new CommentNode(rootNode0, "");
      commentNode0.clear();
      // Undeclared exception!
      try { 
        commentNode0.hashCode();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument for @NotNull parameter 'originalString' of com/xenoamess/x8l/X8lTree.transcodeComment must not be null
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ContentNode contentNode0 = new ContentNode((ContentNode) null);
      RootNode rootNode0 = new RootNode(contentNode0);
      AbstractTreeNode abstractTreeNode0 = contentNode0.changeParentAndRegister((ContentNode) rootNode0);
      // Undeclared exception!
      abstractTreeNode0.format(2921);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ContentNode contentNode0 = new ContentNode((ContentNode) null);
      CommentNode commentNode0 = new CommentNode(contentNode0, " ");
      commentNode0.close();
      // Undeclared exception!
      try { 
        commentNode0.format((-724));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.xenoamess.x8l.CommentNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ContentNode contentNode0 = new ContentNode((ContentNode) null, 30);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "k0p<";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "CVd*dES]h0";
      // Undeclared exception!
      try { 
        contentNode0.fetch(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"CVd*dES\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RootNode rootNode0 = new RootNode((ContentNode) null);
      // Undeclared exception!
      try { 
        rootNode0.fetch("uhx0&]&Wg0");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"uhx0&\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CommentNode commentNode0 = new CommentNode((ContentNode) null, (-4219), ",*Jsg]");
      X8lDataBeanFieldScheme x8lDataBeanFieldScheme0 = X8lDataBeanFieldScheme.X8LPATH;
      String[] stringArray0 = new String[5];
      stringArray0[0] = ",*Jsg]";
      // Undeclared exception!
      try { 
        commentNode0.fetch(x8lDataBeanFieldScheme0, stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"*Jsg\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ContentNode contentNode0 = new ContentNode((ContentNode) null, 14);
      RootNode rootNode0 = new RootNode(contentNode0, 0);
      TextNode textNode0 = new TextNode(rootNode0, "com/xenoamess/x8l/dealers/X8lDealer$4");
      X8lDataBeanFieldScheme x8lDataBeanFieldScheme0 = X8lDataBeanFieldScheme.X8LPATH;
      // Undeclared exception!
      try { 
        textNode0.fetch(x8lDataBeanFieldScheme0, "]");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CommentNode commentNode0 = new CommentNode((ContentNode) null, 0, "2J&Nd$1l~s2L");
      // Undeclared exception!
      try { 
        commentNode0.changeParentAndRegister((ContentNode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.xenoamess.x8l.AbstractTreeNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ContentNode contentNode0 = new ContentNode((ContentNode) null);
      String[] stringArray0 = new String[0];
      X8lDataBeanFieldScheme x8lDataBeanFieldScheme0 = X8lDataBeanFieldScheme.X8LPATH;
      List<Object> list0 = contentNode0.fetch(x8lDataBeanFieldScheme0, stringArray0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RootNode rootNode0 = new RootNode((ContentNode) null);
      X8lDataBeanFieldScheme x8lDataBeanFieldScheme0 = X8lDataBeanFieldScheme.X8LPATH;
      List<Object> list0 = rootNode0.fetch(x8lDataBeanFieldScheme0, " ");
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ContentNode contentNode0 = new ContentNode((ContentNode) null);
      String string0 = contentNode0.toString();
      assertEquals("<>>", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TextNode textNode0 = new TextNode((ContentNode) null, ",p<'_");
      // Undeclared exception!
      try { 
        textNode0.changeParentAndRegister((ContentNode) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.xenoamess.x8l.AbstractTreeNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CommentNode commentNode0 = new CommentNode((ContentNode) null, "");
      AbstractTreeNode abstractTreeNode0 = commentNode0.removeParent();
      assertSame(abstractTreeNode0, commentNode0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ContentNode contentNode0 = new ContentNode((ContentNode) null, 2979);
      CommentNode commentNode0 = new CommentNode(contentNode0, "");
      // Undeclared exception!
      try { 
        commentNode0.write((Writer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument for @NotNull parameter 'writer' of com/xenoamess/x8l/dealers/LanguageDealer.write must not be null
         //
         verifyException("com.xenoamess.x8l.dealers.LanguageDealer", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ContentNode contentNode0 = new ContentNode((ContentNode) null, 0);
      StringWriter stringWriter0 = new StringWriter();
      LanguageDealer languageDealer0 = new LanguageDealer();
      contentNode0.write((Writer) stringWriter0, languageDealer0);
      assertEquals("", contentNode0.getName());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ContentNode contentNode0 = new ContentNode((ContentNode) null, 2477);
      CommentNode commentNode0 = new CommentNode(contentNode0, "");
      ContentNode contentNode1 = commentNode0.getParent();
      assertSame(contentNode0, contentNode1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CommentNode commentNode0 = new CommentNode((ContentNode) null, 82, "M,b.'0e9e");
      commentNode0.setParent((ContentNode) null);
      assertEquals("M,b.'0e9e", commentNode0.getTextContent());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RootNode rootNode0 = new RootNode((ContentNode) null, 0);
      AbstractTreeNode abstractTreeNode0 = rootNode0.changeParent((ContentNode) null);
      assertSame(rootNode0, abstractTreeNode0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ContentNode contentNode0 = new ContentNode((ContentNode) null, (-2675));
      RootNode rootNode0 = new RootNode(contentNode0);
      TextNode textNode0 = new TextNode(rootNode0, 0, "");
      X8lDataBeanFieldScheme x8lDataBeanFieldScheme0 = X8lDataBeanFieldScheme.XPATH;
      String[] stringArray0 = new String[1];
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        textNode0.fetch(x8lDataBeanFieldScheme0, stringArray0, class0);
        fail("Expecting exception: NotImplementedException");
      
      } catch(NotImplementedException e) {
         //
         // Right now, XPATH is not implemented yet.
         //
         verifyException("com.xenoamess.x8l.AbstractTreeNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ContentNode contentNode0 = new ContentNode((ContentNode) null);
      RootNode rootNode0 = new RootNode(contentNode0, 0);
      String[] stringArray0 = new String[0];
      X8lDataBeanFieldScheme x8lDataBeanFieldScheme0 = X8lDataBeanFieldScheme.XPATH;
      // Undeclared exception!
      try { 
        rootNode0.fetch(x8lDataBeanFieldScheme0, stringArray0);
        fail("Expecting exception: NotImplementedException");
      
      } catch(NotImplementedException e) {
         //
         // XPATH is not implemented yet
         //
         verifyException("com.xenoamess.x8l.AbstractTreeNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ContentNode contentNode0 = new ContentNode((ContentNode) null, 0);
      CommentNode commentNode0 = new CommentNode(contentNode0, "vwt");
      X8lDataBeanFieldScheme x8lDataBeanFieldScheme0 = X8lDataBeanFieldScheme.XPATH;
      // Undeclared exception!
      try { 
        commentNode0.fetch(x8lDataBeanFieldScheme0, "tClass");
        fail("Expecting exception: NotImplementedException");
      
      } catch(NotImplementedException e) {
         //
         // XPATH is not implemented yet
         //
         verifyException("com.xenoamess.x8l.AbstractTreeNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ContentNode contentNode0 = new ContentNode((ContentNode) null, 0);
      CommentNode commentNode0 = new CommentNode(contentNode0, "vwt");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = " ";
      stringArray0[3] = "Uj\"";
      List<Object> list0 = commentNode0.fetch(stringArray0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      RootNode rootNode0 = new RootNode((ContentNode) null, 0);
      CommentNode commentNode0 = new CommentNode(rootNode0, 0, (String) null);
      commentNode0.clear();
      // Undeclared exception!
      try { 
        commentNode0.toString();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument for @NotNull parameter 'originalString' of com/xenoamess/x8l/X8lTree.transcodeComment must not be null
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RootNode rootNode0 = new RootNode((ContentNode) null, 3289);
      CommentNode commentNode0 = new CommentNode(rootNode0, "");
      // Undeclared exception!
      try { 
        commentNode0.changeParentAndRegister((ContentNode) rootNode0, 3289);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3289, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      RootNode rootNode0 = new RootNode((ContentNode) null, (-2146));
      TextNode textNode0 = new TextNode(rootNode0, " ");
      AbstractTreeNode abstractTreeNode0 = textNode0.removeParent();
      assertSame(abstractTreeNode0, textNode0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TextNode textNode0 = new TextNode((ContentNode) null, 202, "bl9~9HmQ_x");
      X8lDataBeanFieldScheme x8lDataBeanFieldScheme0 = X8lDataBeanFieldScheme.XPATH;
      // Undeclared exception!
      try { 
        textNode0.fetch(x8lDataBeanFieldScheme0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument for @NotNull parameter 'x8lPath' of com/xenoamess/x8l/AbstractTreeNode.fetch must not be null
         //
         verifyException("com.xenoamess.x8l.AbstractTreeNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TextNode textNode0 = new TextNode((ContentNode) null, "9,He:tmv$@");
      // Undeclared exception!
      try { 
        textNode0.fetch((X8lDataBeanFieldScheme) null, "9,He:tmv$@");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument for @NotNull parameter 'x8lDataBeanFieldScheme' of com/xenoamess/x8l/AbstractTreeNode.fetch must not be null
         //
         verifyException("com.xenoamess.x8l.AbstractTreeNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CommentNode commentNode0 = new CommentNode((ContentNode) null, "");
      Class<RootNode> class0 = RootNode.class;
      // Undeclared exception!
      try { 
        commentNode0.fetch((String[]) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument for @NotNull parameter 'x8lPaths' of com/xenoamess/x8l/AbstractTreeNode.fetch must not be null
         //
         verifyException("com.xenoamess.x8l.AbstractTreeNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      RootNode rootNode0 = new RootNode((ContentNode) null);
      String[] stringArray0 = new String[5];
      // Undeclared exception!
      try { 
        rootNode0.fetch(stringArray0, (Class<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument for @NotNull parameter 'tClass' of com/xenoamess/x8l/AbstractTreeNode.fetch must not be null
         //
         verifyException("com.xenoamess.x8l.AbstractTreeNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      RootNode rootNode0 = new RootNode((ContentNode) null, 0);
      // Undeclared exception!
      try { 
        rootNode0.fetch((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument for @NotNull parameter 'x8lPaths' of com/xenoamess/x8l/AbstractTreeNode.fetch must not be null
         //
         verifyException("com.xenoamess.x8l.AbstractTreeNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CommentNode commentNode0 = new CommentNode((ContentNode) null, 1063, "M,b.'0e9e");
      String[] stringArray0 = new String[8];
      // Undeclared exception!
      try { 
        commentNode0.fetch(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument for @NotNull parameter 'x8lPath' of com/xenoamess/x8l/databind/x8lpath/X8lPathUtil.fetch must not be null
         //
         verifyException("com.xenoamess.x8l.databind.x8lpath.X8lPathUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CommentNode commentNode0 = new CommentNode((ContentNode) null, 2514, "E~*u5 eCFb?!e9=");
      // Undeclared exception!
      try { 
        commentNode0.fetch((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument for @NotNull parameter 'x8lPath' of com/xenoamess/x8l/AbstractTreeNode.fetch must not be null
         //
         verifyException("com.xenoamess.x8l.AbstractTreeNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ContentNode contentNode0 = new ContentNode((ContentNode) null, (-2675));
      List<Object> list0 = contentNode0.fetch("fetch");
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ContentNode contentNode0 = new ContentNode((ContentNode) null);
      X8lDataBeanFieldScheme x8lDataBeanFieldScheme0 = X8lDataBeanFieldScheme.X8LPATH;
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        contentNode0.fetch(x8lDataBeanFieldScheme0, (String[]) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument for @NotNull parameter 'x8lPaths' of com/xenoamess/x8l/AbstractTreeNode.fetch must not be null
         //
         verifyException("com.xenoamess.x8l.AbstractTreeNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      RootNode rootNode0 = new RootNode((ContentNode) null);
      X8lDataBeanFieldScheme x8lDataBeanFieldScheme0 = X8lDataBeanFieldScheme.X8LPATH;
      // Undeclared exception!
      try { 
        rootNode0.fetch(x8lDataBeanFieldScheme0, (String[]) null, (Class<TextNode>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument for @NotNull parameter 'tClass' of com/xenoamess/x8l/AbstractTreeNode.fetch must not be null
         //
         verifyException("com.xenoamess.x8l.AbstractTreeNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ContentNode contentNode0 = new ContentNode((ContentNode) null, 0);
      X8lDataBeanFieldScheme x8lDataBeanFieldScheme0 = X8lDataBeanFieldScheme.X8LPATH;
      // Undeclared exception!
      try { 
        contentNode0.fetch(x8lDataBeanFieldScheme0, "", (Class<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument for @NotNull parameter 'tClass' of com/xenoamess/x8l/AbstractTreeNode.fetch must not be null
         //
         verifyException("com.xenoamess.x8l.AbstractTreeNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ContentNode contentNode0 = new ContentNode((ContentNode) null, 872);
      RootNode rootNode0 = new RootNode(contentNode0);
      X8lDataBeanFieldScheme x8lDataBeanFieldScheme0 = X8lDataBeanFieldScheme.XPATH;
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        rootNode0.fetch(x8lDataBeanFieldScheme0, (String) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument for @NotNull parameter 'x8lPath' of com/xenoamess/x8l/AbstractTreeNode.fetch must not be null
         //
         verifyException("com.xenoamess.x8l.AbstractTreeNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ContentNode contentNode0 = new ContentNode((ContentNode) null, (-2431));
      X8lDataBeanFieldScheme x8lDataBeanFieldScheme0 = X8lDataBeanFieldScheme.XPATH;
      // Undeclared exception!
      try { 
        contentNode0.fetch(x8lDataBeanFieldScheme0, (String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument for @NotNull parameter 'x8lPaths' of com/xenoamess/x8l/AbstractTreeNode.fetch must not be null
         //
         verifyException("com.xenoamess.x8l.AbstractTreeNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ContentNode contentNode0 = new ContentNode((ContentNode) null);
      // Undeclared exception!
      try { 
        contentNode0.fetch((X8lDataBeanFieldScheme) null, (String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument for @NotNull parameter 'x8lDataBeanFieldScheme' of com/xenoamess/x8l/AbstractTreeNode.fetch must not be null
         //
         verifyException("com.xenoamess.x8l.AbstractTreeNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      RootNode rootNode0 = new RootNode((ContentNode) null, 2514);
      TextNode textNode0 = new TextNode(rootNode0, " ");
      X8lDataBeanFieldScheme x8lDataBeanFieldScheme0 = X8lDataBeanFieldScheme.X8LPATH;
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        textNode0.fetch(x8lDataBeanFieldScheme0, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument for @NotNull parameter 'x8lPath' of com/xenoamess/x8l/databind/x8lpath/X8lPathUtil.fetch must not be null
         //
         verifyException("com.xenoamess.x8l.databind.x8lpath.X8lPathUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CommentNode commentNode0 = new CommentNode((ContentNode) null, 1063, "M,b.'0e9e");
      commentNode0.hashCode();
  }
}
