/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 05 20:56:04 GMT 2022
 */

package com.xenoamess.x8l;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.xenoamess.x8l.AbstractTreeNode;
import com.xenoamess.x8l.CommentNode;
import com.xenoamess.x8l.ContentNode;
import com.xenoamess.x8l.RootNode;
import com.xenoamess.x8l.databind.X8lDataBeanFieldScheme;
import com.xenoamess.x8l.dealers.LanguageDealer;
import java.io.Reader;
import java.io.StringReader;
import java.util.ConcurrentModificationException;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RootNode_ESTest extends RootNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RootNode rootNode0 = new RootNode((ContentNode) null, 0);
      assertEquals("", rootNode0.getName());
      
      ContentNode contentNode0 = new ContentNode(rootNode0);
      rootNode0.addAttributeFromTranscodedExpression("");
      RootNode rootNode1 = (RootNode)rootNode0.changeParentAndRegister((ContentNode) rootNode0);
      rootNode1.asStringListTrimmed();
      rootNode1.getContentNodesFromChildrenThatNameIs(" ");
      RootNode rootNode2 = rootNode0.copy();
      RootNode rootNode3 = rootNode2.copy();
      RootNode rootNode4 = rootNode2.copy();
      String string0 = null;
      StringReader stringReader0 = new StringReader(string0);
      stringReader0.read();
      LanguageDealer languageDealer0 = new LanguageDealer();
      contentNode0.read((Reader) stringReader0, languageDealer0);
      int int0 = 0;
      rootNode0.getContentNodesFromChildren(int0);
      rootNode0.copy(rootNode0);
      rootNode2.changeParentAndRegister((ContentNode) rootNode0);
      rootNode4.copy(rootNode0);
      RootNode rootNode5 = rootNode4.copy();
      rootNode5.copy(rootNode4);
      rootNode0.copy(rootNode0);
      rootNode0.copy();
      rootNode3.copy();
      rootNode4.copy();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ContentNode contentNode0 = mock(ContentNode.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(contentNode0).getChildren();
      ContentNode contentNode1 = null;
      try {
        contentNode1 = new ContentNode(contentNode0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.xenoamess.x8l.AbstractTreeNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ContentNode contentNode0 = new ContentNode((ContentNode) null, 783);
      RootNode rootNode0 = new RootNode(contentNode0);
      contentNode0.fetch("");
      contentNode0.clear();
      rootNode0.close();
      rootNode0.asStringSet();
      RootNode rootNode1 = null;
      contentNode0.getContentNodesFromChildrenThatNameIs("", 783);
      X8lDataBeanFieldScheme x8lDataBeanFieldScheme0 = X8lDataBeanFieldScheme.X8LPATH;
      String[] stringArray0 = new String[2];
      stringArray0[0] = " ";
      stringArray0[1] = " ";
      Class<ContentNode> class0 = Class.class;
      contentNode0.fetch(x8lDataBeanFieldScheme0, stringArray0, (Class<ContentNode>) class0);
      // Undeclared exception!
      try { 
        rootNode0.copy((RootNode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.xenoamess.x8l.RootNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ContentNode contentNode0 = mock(ContentNode.class, new ViolatedAssumptionAnswer());
      doReturn((List<Object>) null).when(contentNode0).getChildren();
      RootNode rootNode0 = null;
      try {
        rootNode0 = new RootNode(contentNode0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.xenoamess.x8l.AbstractTreeNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ContentNode contentNode0 = null;
      RootNode rootNode0 = new RootNode((ContentNode) null);
      RootNode rootNode1 = new RootNode(rootNode0);
      rootNode0.append((AbstractTreeNode) null);
      rootNode1.getContentNodesFromChildrenThatNameIs("", (-450));
      // Undeclared exception!
      try { 
        rootNode0.copy(rootNode0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ContentNode contentNode0 = mock(ContentNode.class, new ViolatedAssumptionAnswer());
      doReturn((List<Object>) null).when(contentNode0).getChildren();
      RootNode rootNode0 = null;
      try {
        rootNode0 = new RootNode(contentNode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.xenoamess.x8l.AbstractTreeNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RootNode rootNode0 = new RootNode((ContentNode) null, (-1505));
      rootNode0.addAttributeFromTranscodedExpression("t5t@U?\"FwGOTINcG");
      rootNode0.trimForce();
      rootNode0.getTextNodesFromChildren((-1505));
      rootNode0.close();
      rootNode0.addAttribute("vf{.};bExm", "", "");
      rootNode0.formatAttributeSegments((-1505));
      RootNode rootNode1 = (RootNode)rootNode0.changeParentAndRegister((ContentNode) rootNode0, 0);
      rootNode0.copy(rootNode0);
      RootNode rootNode2 = rootNode0.copy();
      rootNode2.copy(rootNode0);
      rootNode1.getContentNodesFromChildren();
      rootNode2.fetch(rootNode0.DEFAULT_SEGMENT_VALUE);
      RootNode rootNode3 = rootNode2.copy();
      String string0 = "com.xenoamess.x8l.RootNode";
      rootNode2.addAttribute(rootNode0.DEFAULT_SEGMENT_VALUE, string0);
      rootNode0.show();
      rootNode2.copy(rootNode3);
      rootNode3.getContentNodesFromChildren();
      rootNode0.copy(rootNode3);
      RootNode rootNode4 = rootNode0.copy();
      rootNode4.copy();
      rootNode1.copy();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RootNode rootNode0 = new RootNode((ContentNode) null, 0);
      RootNode rootNode1 = new RootNode(rootNode0);
      RootNode rootNode2 = rootNode1.copy();
      RootNode rootNode3 = rootNode1.copy();
      rootNode3.copy(rootNode0);
      rootNode3.copy(rootNode0);
      rootNode3.copy(rootNode1);
      assertFalse(rootNode3.equals((Object)rootNode2));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RootNode rootNode0 = new RootNode((ContentNode) null);
      RootNode rootNode1 = new RootNode(rootNode0);
      RootNode rootNode2 = rootNode1.copy();
      RootNode rootNode3 = rootNode0.copy();
      assertNotSame(rootNode3, rootNode2);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RootNode rootNode0 = new RootNode((ContentNode) null);
      RootNode rootNode1 = new RootNode((ContentNode) null);
      rootNode0.copy(rootNode1);
      rootNode0.copy(rootNode1);
      RootNode rootNode2 = new RootNode((ContentNode) null, 141);
      rootNode2.addAttribute("", "zW3m<5Uj:");
      rootNode1.copy(rootNode2);
      RootNode rootNode3 = rootNode1.copy();
      rootNode2.copy(rootNode1);
      assertFalse(rootNode1.equals((Object)rootNode0));
      assertTrue(rootNode1.equals((Object)rootNode3));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RootNode rootNode0 = new RootNode((ContentNode) null);
      RootNode rootNode1 = rootNode0.copy();
      assertTrue(rootNode1.equals((Object)rootNode0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RootNode rootNode0 = new RootNode((ContentNode) null, 0);
      RootNode rootNode1 = new RootNode(rootNode0);
      rootNode1.copy();
      RootNode rootNode2 = rootNode1.copy();
      rootNode2.format(0);
      rootNode2.copy(rootNode0);
      assertTrue(rootNode2.equals((Object)rootNode0));
      
      rootNode2.copy(rootNode0);
      rootNode2.copy(rootNode1);
      rootNode0.copy();
      rootNode1.copy();
      assertFalse(rootNode1.equals((Object)rootNode2));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RootNode rootNode0 = new RootNode((ContentNode) null);
      rootNode0.addAttribute("7i*(@zx");
      RootNode rootNode1 = rootNode0.copy();
      rootNode0.copy(rootNode1);
      rootNode1.copy(rootNode1);
      rootNode1.copy();
      RootNode rootNode2 = rootNode1.copy();
      rootNode2.copy();
      RootNode rootNode3 = rootNode1.copy();
      RootNode rootNode4 = rootNode2.copy();
      assertTrue(rootNode1.equals((Object)rootNode0));
      assertNotSame(rootNode4, rootNode3);
  }
}
