/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 05 20:55:44 GMT 2022
 */

package com.xenoamess.x8l;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.xenoamess.x8l.AbstractTreeNode;
import com.xenoamess.x8l.CommentNode;
import com.xenoamess.x8l.ContentNode;
import com.xenoamess.x8l.RootNode;
import com.xenoamess.x8l.TextNode;
import com.xenoamess.x8l.X8lTree;
import com.xenoamess.x8l.databind.X8lDataBeanFieldScheme;
import com.xenoamess.x8l.dealers.LanguageDealer;
import java.io.BufferedInputStream;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.file.AccessDeniedException;
import java.nio.file.NoSuchFileException;
import java.nio.file.Path;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.function.Function;
import org.apache.commons.lang3.NotImplementedException;
import org.apache.commons.vfs2.FileObject;
import org.apache.commons.vfs2.FileSystemOptions;
import org.apache.commons.vfs2.FileType;
import org.apache.commons.vfs2.cache.OnCallRefreshFileObject;
import org.apache.commons.vfs2.impl.DecoratedFileObject;
import org.apache.commons.vfs2.impl.SynchronizedFileObject;
import org.apache.commons.vfs2.impl.VirtualFileName;
import org.apache.commons.vfs2.provider.DelegateFileObject;
import org.apache.commons.vfs2.provider.GenericURLFileName;
import org.apache.commons.vfs2.provider.LayeredFileName;
import org.apache.commons.vfs2.provider.ftp.FtpClient;
import org.apache.commons.vfs2.provider.ftps.FtpsFileSystem;
import org.apache.commons.vfs2.provider.tar.TarFileSystem;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class X8lTree_ESTest extends X8lTree_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      LanguageDealer languageDealer0 = new LanguageDealer();
      X8lTree x8lTree0 = X8lTree.load(")p>bWwg", languageDealer0);
      x8lTree0.read();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = X8lTree.untranscode("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = X8lTree.transcodeValue("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = X8lTree.transcodeText("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = X8lTree.transcodeKey("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StringReader stringReader0 = new StringReader("gT?O;KuuU'_T@Ia|;u");
      LanguageDealer languageDealer0 = new LanguageDealer();
      X8lTree x8lTree0 = new X8lTree(stringReader0, languageDealer0);
      String string0 = x8lTree0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      X8lTree x8lTree0 = X8lTree.load(">5yS$Yz4UK[1OG\"E");
      X8lDataBeanFieldScheme x8lDataBeanFieldScheme0 = X8lDataBeanFieldScheme.X8LPATH;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "xml";
      stringArray0[1] = "x8l";
      stringArray0[2] = "x8l";
      stringArray0[3] = "xml";
      stringArray0[4] = "xml";
      stringArray0[5] = "x8l";
      stringArray0[6] = ">5yS$Yz4UK[1OG\"E";
      stringArray0[7] = "xsd";
      stringArray0[8] = "json";
      Class<LanguageDealer> class0 = Class.class;
      List<LanguageDealer> list0 = x8lTree0.fetch(x8lDataBeanFieldScheme0, stringArray0, class0);
      List<LanguageDealer> list1 = X8lTree.suspectDealer(">5yS$Yz4UK[1OG\"E", list0);
      assertEquals(0, list1.size());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      X8lTree x8lTree0 = new X8lTree();
      String string0 = X8lTree.save(x8lTree0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      X8lTree x8lTree0 = new X8lTree();
      Reader reader0 = x8lTree0.getReader();
      assertNull(reader0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      X8lTree x8lTree0 = X8lTree.load(">5yS$Yz4UK[1OG\"E");
      RootNode rootNode0 = x8lTree0.getRoot();
      RootNode rootNode1 = new RootNode(rootNode0);
      X8lDataBeanFieldScheme x8lDataBeanFieldScheme0 = X8lDataBeanFieldScheme.X8LPATH;
      List<Object> list0 = x8lTree0.fetch(x8lDataBeanFieldScheme0, "");
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      X8lTree x8lTree0 = X8lTree.load("jx2|5S");
      MockFileWriter mockFileWriter0 = new MockFileWriter("x8l");
      mockFileWriter0.close();
      try { 
        x8lTree0.write((Writer) mockFileWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      X8lTree x8lTree0 = new X8lTree();
      SynchronizedFileObject synchronizedFileObject0 = new SynchronizedFileObject((FileObject) null);
      // Undeclared exception!
      try { 
        X8lTree.save((FileObject) synchronizedFileObject0, x8lTree0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.impl.DecoratedFileObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      X8lTree x8lTree0 = X8lTree.load("Awnl?gq");
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        X8lTree.save((Writer) pipedWriter0, x8lTree0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MockFile mockFile0 = new MockFile(":dR{6,GzYrH|>J;u*");
      X8lTree x8lTree0 = X8lTree.load(":dR{6,GzYrH|>J;u*");
      // Undeclared exception!
      try { 
        X8lTree.save((File) mockFile0, x8lTree0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      X8lTree x8lTree0 = new X8lTree();
      PipedReader pipedReader0 = new PipedReader(2144);
      try { 
        x8lTree0.read((Reader) pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      X8lTree x8lTree0 = X8lTree.load("O1Cl^mllv+r#h6z");
      try { 
        x8lTree0.parse();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      OnCallRefreshFileObject onCallRefreshFileObject0 = new OnCallRefreshFileObject((FileObject) null);
      LanguageDealer languageDealer0 = new LanguageDealer();
      // Undeclared exception!
      try { 
        X8lTree.load((FileObject) onCallRefreshFileObject0, languageDealer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.impl.DecoratedFileObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      OnCallRefreshFileObject onCallRefreshFileObject0 = new OnCallRefreshFileObject((FileObject) null);
      SynchronizedFileObject synchronizedFileObject0 = new SynchronizedFileObject(onCallRefreshFileObject0);
      LanguageDealer languageDealer0 = new LanguageDealer();
      // Undeclared exception!
      try { 
        X8lTree.load((FileObject) synchronizedFileObject0, languageDealer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.impl.DecoratedFileObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DecoratedFileObject decoratedFileObject0 = new DecoratedFileObject((FileObject) null);
      // Undeclared exception!
      try { 
        X8lTree.load((FileObject) decoratedFileObject0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.impl.DecoratedFileObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      Path path0 = mockFile0.toPath();
      try { 
        X8lTree.load(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w/H");
      LanguageDealer languageDealer0 = new LanguageDealer();
      X8lTree x8lTree0 = new X8lTree(stringReader0, languageDealer0, false);
      Class<LanguageDealer> class0 = Class.class;
      List<LanguageDealer> list0 = x8lTree0.fetch("VqSQiR~P6k>B[", class0);
      // Undeclared exception!
      try { 
        X8lTree.load((Reader) stringReader0, (List<LanguageDealer>) list0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // None of my dealers can parse this. Sorry. details are in the log.
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      List<LanguageDealer> list0 = X8lTree.getLanguageDealerListCopy();
      PipedReader pipedReader0 = new PipedReader(28);
      try { 
        X8lTree.load((Reader) pipedReader0, list0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      List<LanguageDealer> list0 = X8lTree.getLanguageDealerListCopy();
      X8lTree x8lTree0 = X8lTree.load("C&q)V;^jhE", list0);
      LanguageDealer languageDealer0 = x8lTree0.getLanguageDealer();
      PipedReader pipedReader0 = new PipedReader();
      try { 
        X8lTree.load((Reader) pipedReader0, languageDealer0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      List<LanguageDealer> list0 = X8lTree.getLanguageDealerListCopy();
      try { 
        X8lTree.load((InputStream) mockFileInputStream0, (List<LanguageDealer>) list0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        X8lTree.load((InputStream) dataInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-15), 60);
      // Undeclared exception!
      try { 
        X8lTree.load((InputStream) byteArrayInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(2322);
      try { 
        X8lTree.load((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MockFile mockFile0 = new MockFile("FZ");
      File file0 = MockFile.createTempFile("<inipt>", "", (File) mockFile0);
      LanguageDealer languageDealer0 = new LanguageDealer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        X8lTree.load(file0, languageDealer0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MockFile mockFile0 = new MockFile("xFZtY*(sG");
      File file0 = MockFile.createTempFile("applyToAllNodes", "applyToAllNodes", (File) mockFile0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        X8lTree.load(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      X8lTree x8lTree0 = new X8lTree();
      X8lDataBeanFieldScheme x8lDataBeanFieldScheme0 = X8lDataBeanFieldScheme.X8LPATH;
      Class<TarFileSystem> class0 = TarFileSystem.class;
      // Undeclared exception!
      try { 
        x8lTree0.fetch(x8lDataBeanFieldScheme0, "y+.|f1{`]K", class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"y+.|f1{`\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      LanguageDealer languageDealer0 = new LanguageDealer();
      X8lTree x8lTree0 = new X8lTree((Reader) null, languageDealer0);
      X8lTree x8lTree1 = x8lTree0.trim();
      assertSame(x8lTree1, x8lTree0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      LanguageDealer languageDealer0 = new LanguageDealer();
      X8lTree x8lTree0 = new X8lTree(stringReader0, languageDealer0);
      x8lTree0.parse();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      List<LanguageDealer> list0 = X8lTree.getLanguageDealerListCopy();
      X8lTree x8lTree0 = X8lTree.load("budeb<I1j)z+_P", list0);
      assertNotNull(x8lTree0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      Path path0 = mockFile0.toPath();
      LinkedList<LanguageDealer> linkedList0 = new LinkedList<LanguageDealer>();
      try { 
        X8lTree.load(path0, (List<LanguageDealer>) linkedList0);
        fail("Expecting exception: AccessDeniedException");
      
      } catch(AccessDeniedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      List<LanguageDealer> list0 = X8lTree.getLanguageDealerListCopy();
      List<LanguageDealer> list1 = X8lTree.suspectDealer("L:wKGL;hS|QB2`D", list0);
      assertTrue(list1.equals((Object)list0));
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      X8lTree x8lTree0 = X8lTree.load((Reader) stringReader0);
      LanguageDealer languageDealer0 = new LanguageDealer();
      x8lTree0.read((Reader) stringReader0, languageDealer0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      LanguageDealer languageDealer0 = new LanguageDealer();
      X8lTree x8lTree0 = new X8lTree(stringReader0, languageDealer0);
      x8lTree0.read((Reader) stringReader0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      X8lTree x8lTree0 = X8lTree.load("jx2|5S");
      MockFileWriter mockFileWriter0 = new MockFileWriter("x8l");
      x8lTree0.write((Writer) mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Fr+:I=i@+w!_QDFCp%;", "Fr+:I=i@+w!_QDFCp%;");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Fr+:I=i@+w!_QDFCp%;\\Fr+:I=i@+w!_QDFCp%;");
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      X8lTree x8lTree0 = X8lTree.load((File) mockFile0);
      String string0 = x8lTree0.toString();
      assertEquals("\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      LanguageDealer languageDealer0 = new LanguageDealer();
      X8lTree x8lTree0 = new X8lTree(stringReader0, languageDealer0);
      MockFile mockFile0 = new MockFile("xml");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      x8lTree0.write((Writer) mockPrintWriter0, languageDealer0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      X8lTree x8lTree0 = new X8lTree();
      X8lTree x8lTree1 = x8lTree0.copy();
      assertNotSame(x8lTree0, x8lTree1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      X8lTree x8lTree0 = X8lTree.load(", array size ");
      String string0 = X8lTree.save(x8lTree0);
      assertEquals(", array size ", string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StringReader stringReader0 = new StringReader("] ");
      LanguageDealer languageDealer0 = new LanguageDealer();
      X8lTree x8lTree0 = X8lTree.load((Reader) stringReader0, languageDealer0);
      LanguageDealer languageDealer1 = x8lTree0.getLanguageDealer();
      assertSame(languageDealer0, languageDealer1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StringReader stringReader0 = new StringReader("` %CtQJ.V6{|FLq@gp-");
      List<LanguageDealer> list0 = X8lTree.getLanguageDealerListCopy();
      X8lTree x8lTree0 = X8lTree.load((Reader) stringReader0, list0);
      assertNotNull(x8lTree0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      List<LanguageDealer> list0 = X8lTree.getLanguageDealerListCopy();
      X8lTree x8lTree0 = X8lTree.load("trim", list0);
      Reader reader0 = x8lTree0.getReader();
      x8lTree0.setReader(reader0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      LanguageDealer languageDealer0 = new LanguageDealer();
      X8lTree x8lTree0 = new X8lTree((Reader) null, languageDealer0);
      x8lTree0.setLanguageDealer(languageDealer0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      X8lTree x8lTree0 = X8lTree.load("jx2|5S");
      X8lDataBeanFieldScheme x8lDataBeanFieldScheme0 = X8lDataBeanFieldScheme.X8LPATH;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      List<Object> list0 = x8lTree0.fetch(x8lDataBeanFieldScheme0, stringArray0);
      assertFalse(list0.contains("jx2|5S"));
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      X8lTree x8lTree0 = X8lTree.load(">5yS$Yz4UK[1OG\"E");
      X8lDataBeanFieldScheme x8lDataBeanFieldScheme0 = X8lDataBeanFieldScheme.X8LPATH;
      List<Object> list0 = x8lTree0.fetch(x8lDataBeanFieldScheme0, "");
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      X8lTree x8lTree0 = new X8lTree();
      List<Object> list0 = x8lTree0.fetch("'o(");
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      File file0 = MockFile.createTempFile("applyToAllNodes", "xFZtY*(sG");
      File file1 = MockFile.createTempFile("applyToAllNodes", "applyToAllNodes", file0);
      X8lTree x8lTree0 = X8lTree.load(file1);
      x8lTree0.append(x8lTree0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      File file0 = MockFile.createTempFile("applyToAllNodes", "xFZtY*(sG");
      File file1 = MockFile.createTempFile("applyToAllNodes", "applyToAllNodes", file0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(2322);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      LanguageDealer languageDealer0 = new LanguageDealer();
      X8lTree x8lTree0 = X8lTree.load((InputStream) bufferedInputStream0, languageDealer0);
      X8lTree x8lTree1 = X8lTree.load(file1);
      boolean boolean0 = x8lTree0.equals(x8lTree1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      File file0 = MockFile.createTempFile("applyToAllNodes", "xFZtY*(sG");
      File file1 = MockFile.createTempFile("applyToAllNodes", "applyToAllNodes", file0);
      X8lTree x8lTree0 = X8lTree.load(file1);
      boolean boolean0 = x8lTree0.equals(x8lTree0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      X8lTree x8lTree0 = X8lTree.load("8iGwtd]9%ws&r9Z");
      boolean boolean0 = x8lTree0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      X8lTree x8lTree0 = X8lTree.load(">5yS$Yz4UK[1OG\"E");
      RootNode rootNode0 = x8lTree0.getRoot();
      boolean boolean0 = x8lTree0.equals(rootNode0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = X8lTree.untranscode("@NotNull method %s.%s must not return null");
      assertEquals("@NotNull method s.s must not return null", string0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = X8lTree.transcodeComment(">5yS$Yz4UK[1OG\"E");
      assertEquals("%>5yS$Yz4UK[1OG\"E", string0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = X8lTree.transcodeComment(".~|h%HF+honx2");
      assertEquals(".~|h%%HF+honx2", string0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = X8lTree.transcodeValue("PuLuAC9 t=a((ge7>");
      assertEquals("PuLuAC9% t=a((ge7%>", string0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = X8lTree.transcodeValue("%Bnm'Segk1r<tw%");
      assertEquals("%%Bnm'Segk1r%<tw%%", string0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = X8lTree.transcodeKey("Invalid type definition for type %s: %s");
      assertEquals("Invalid% type% definition% for% type% %%s:% %%s", string0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = X8lTree.transcodeKey("|}Ac[+}5=LK>o");
      assertEquals("|}Ac[+}5%=LK%>o", string0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = X8lTree.transcodeKey("y|pk,'|=7|tq<O-");
      assertEquals("y|pk,'|%=7|tq%<O-", string0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = X8lTree.transcodeText("q@{ycnV&y+O");
      assertEquals("q@{ycnV%&y+O", string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = X8lTree.transcodeText("h2z55bJ}t%nCg-UxE_g");
      assertEquals("h2z55bJ}t%%nCg-UxE_g", string0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String string0 = X8lTree.transcodeText("Iy}Y !M[>-n>H|y");
      assertEquals("Iy}Y !M[%>-n%>H|y", string0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = X8lTree.transcodeText("x<@.!)vPskN");
      assertEquals("x%<@.!)vPskN", string0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      X8lTree x8lTree0 = new X8lTree();
      X8lTree x8lTree1 = x8lTree0.trimForce();
      assertSame(x8lTree0, x8lTree1);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      X8lTree x8lTree0 = new X8lTree();
      X8lTree x8lTree1 = x8lTree0.format();
      assertSame(x8lTree1, x8lTree0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      LanguageDealer languageDealer0 = new LanguageDealer();
      X8lTree x8lTree0 = new X8lTree((Reader) null, languageDealer0, false);
      // Undeclared exception!
      try { 
        x8lTree0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You cannot read now. Your reader is null.
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      LanguageDealer languageDealer0 = new LanguageDealer();
      X8lTree x8lTree0 = new X8lTree((Reader) null, languageDealer0, false);
      // Undeclared exception!
      try { 
        x8lTree0.read(languageDealer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You cannot read now. Your reader is null.
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      List<LanguageDealer> list0 = X8lTree.getLanguageDealerListCopy();
      X8lTree x8lTree0 = X8lTree.load("", list0);
      try { 
        x8lTree0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      X8lTree x8lTree0 = new X8lTree();
      // Undeclared exception!
      try { 
        x8lTree0.read();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You cannot read now. Your reader is null.
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      X8lTree x8lTree0 = X8lTree.load(", array size ");
      x8lTree0.close();
      x8lTree0.close();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      X8lTree x8lTree0 = new X8lTree((X8lTree) null);
      X8lDataBeanFieldScheme x8lDataBeanFieldScheme0 = X8lDataBeanFieldScheme.XPATH;
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        x8lTree0.fetch(x8lDataBeanFieldScheme0, stringArray0);
        fail("Expecting exception: NotImplementedException");
      
      } catch(NotImplementedException e) {
         //
         // XPATH is not implemented yet
         //
         verifyException("com.xenoamess.x8l.AbstractTreeNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      LanguageDealer languageDealer0 = new LanguageDealer();
      X8lTree x8lTree0 = null;
      try {
        x8lTree0 = new X8lTree((Reader) null, languageDealer0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You pass a null reader and want the tree read it now? No way.
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      X8lTree x8lTree0 = new X8lTree();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("xsd", true);
      try { 
        X8lTree.save((OutputStream) mockFileOutputStream0, x8lTree0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT", "");
      File file0 = MockFile.createTempFile("ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT", "ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT", (File) mockFile0);
      LanguageDealer languageDealer0 = new LanguageDealer();
      X8lTree x8lTree0 = X8lTree.load(file0, languageDealer0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        X8lTree.save(file0, x8lTree0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      File file0 = MockFile.createTempFile("applyToAllNodes", "xFZtY*(sG");
      File file1 = MockFile.createTempFile("applyToAllNodes", "applyToAllNodes", file0);
      X8lTree x8lTree0 = X8lTree.load(file1);
      try { 
        X8lTree.save(file0, x8lTree0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // F:\\workspace\\x8l\\C:\\Users\\xenoa\\AppData\\Local\\Temp\\applyToAllNodes0xFZtY*(sG
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT", "");
      File file0 = MockFile.createTempFile("ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT", "ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT", (File) mockFile0);
      LanguageDealer languageDealer0 = new LanguageDealer();
      X8lTree x8lTree0 = X8lTree.load(file0, languageDealer0);
      X8lTree.save(file0, x8lTree0);
      assertTrue(file0.isFile());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      LanguageDealer languageDealer0 = new LanguageDealer();
      X8lTree x8lTree0 = new X8lTree(pipedReader0, languageDealer0, true);
      try { 
        X8lTree.save((File) null, x8lTree0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // null
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      try { 
        X8lTree.load((File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // F:\\workspace\\x8l
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MockFile mockFile0 = new MockFile("xml");
      try { 
        X8lTree.load((File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // F:\\workspace\\x8l\\xml
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      try { 
        X8lTree.load((File) null);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // null
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      File file0 = MockFile.createTempFile("applyToAllNodes", "xFZtY*(sG");
      File file1 = MockFile.createTempFile("applyToAllNodes", "applyToAllNodes", file0);
      X8lTree x8lTree0 = X8lTree.load(file1);
      X8lDataBeanFieldScheme x8lDataBeanFieldScheme0 = X8lDataBeanFieldScheme.X8LPATH;
      Class<LanguageDealer> class0 = LanguageDealer.class;
      List<LanguageDealer> list0 = x8lTree0.fetch(x8lDataBeanFieldScheme0, "xFZtY*(sG", class0);
      // Undeclared exception!
      try { 
        X8lTree.load(file1, list0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // None of my dealers can parse this. Sorry. details are in the log.
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      LinkedList<LanguageDealer> linkedList0 = new LinkedList<LanguageDealer>();
      MockFile mockFile0 = new MockFile("", "");
      try { 
        X8lTree.load((File) mockFile0, (List<LanguageDealer>) linkedList0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // F:\\workspace\\x8l
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      File file0 = MockFile.createTempFile("VfhZ>Xh5S2V", "jg8;!mTNPjX");
      LinkedList<LanguageDealer> linkedList0 = new LinkedList<LanguageDealer>();
      try { 
        X8lTree.load(file0, (List<LanguageDealer>) linkedList0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // F:\\workspace\\x8l\\C:\\Users\\xenoa\\AppData\\Local\\Temp\\VfhZ>Xh5S2V0jg8;!mTNPjX
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      RootNode rootNode0 = new RootNode((ContentNode) null);
      CommentNode commentNode0 = new CommentNode(rootNode0, 0, "");
      String[] stringArray0 = new String[5];
      stringArray0[0] = " ";
      stringArray0[1] = " ";
      stringArray0[2] = "xsd";
      stringArray0[3] = "";
      stringArray0[4] = "";
      Class<LanguageDealer> class0 = LanguageDealer.class;
      List<LanguageDealer> list0 = commentNode0.fetch(stringArray0, class0);
      try { 
        X8lTree.load((File) null, list0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // null
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      LanguageDealer languageDealer0 = new LanguageDealer();
      try { 
        X8lTree.load((File) mockFile0, languageDealer0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // F:\\workspace\\x8l
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      MockFile mockFile0 = new MockFile("SYSTEM");
      LanguageDealer languageDealer0 = new LanguageDealer();
      try { 
        X8lTree.load((File) mockFile0, languageDealer0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // F:\\workspace\\x8l\\SYSTEM
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      LanguageDealer languageDealer0 = new LanguageDealer();
      try { 
        X8lTree.load((File) null, languageDealer0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // null
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      X8lTree x8lTree0 = X8lTree.load("transcodeComment");
      DecoratedFileObject decoratedFileObject0 = new DecoratedFileObject((FileObject) null);
      // Undeclared exception!
      try { 
        X8lTree.save((FileObject) decoratedFileObject0, x8lTree0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.impl.DecoratedFileObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      SynchronizedFileObject synchronizedFileObject0 = new SynchronizedFileObject((FileObject) null);
      // Undeclared exception!
      try { 
        X8lTree.load((FileObject) synchronizedFileObject0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.impl.DecoratedFileObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      try { 
        X8lTree.load((FileObject) null);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // null
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      LanguageDealer languageDealer0 = new LanguageDealer();
      try { 
        X8lTree.load((FileObject) null, languageDealer0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // null
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("");
          File file0 = MockFile.createTempFile("ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT", "ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT", (File) mockFile0);
          LanguageDealer languageDealer0 = new LanguageDealer();
          X8lTree x8lTree0 = X8lTree.load(file0, languageDealer0);
          Path path0 = mockFile0.toPath();
          // Undeclared exception!
          try { 
            X8lTree.save(path0, x8lTree0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.WindowsChannelFactory.open(WindowsChannelFactory.java:295)
             // sun.nio.fs.WindowsChannelFactory.newFileChannel(WindowsChannelFactory.java:162)
             // sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:225)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // java.nio.file.Files.newBufferedWriter(Files.java:2860)
             // java.nio.file.Files.newBufferedWriter(Files.java:2896)
             // com.xenoamess.x8l.X8lTree.save(X8lTree.java:239)
             // sun.reflect.GeneratedMethodAccessor213.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      LanguageDealer languageDealer0 = new LanguageDealer();
      X8lTree x8lTree0 = X8lTree.load("read", languageDealer0);
      try { 
        X8lTree.save((Path) null, x8lTree0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // null
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".&![-KEEe'y");
      Path path0 = mockFile0.toPath();
      try { 
        X8lTree.load(path0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // .&![-KEEe'y
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      try { 
        X8lTree.load((Path) null);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // null
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      MockFile mockFile0 = new MockFile("CR#9HkL");
      Path path0 = mockFile0.toPath();
      LinkedList<LanguageDealer> linkedList0 = new LinkedList<LanguageDealer>();
      try { 
        X8lTree.load(path0, (List<LanguageDealer>) linkedList0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // CR#9HkL
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      MockFile mockFile0 = new MockFile((File) null, "");
      Path path0 = mockFile0.toPath();
      LanguageDealer languageDealer0 = new LanguageDealer();
      try { 
        X8lTree.load(path0, languageDealer0);
        fail("Expecting exception: AccessDeniedException");
      
      } catch(AccessDeniedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      LanguageDealer languageDealer0 = new LanguageDealer();
      try { 
        X8lTree.load((Path) null, languageDealer0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // null
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MockFile mockFile0 = new MockFile("x8l", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      X8lTree x8lTree0 = X8lTree.load((File) mockFile0);
      assertNotNull(x8lTree0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      X8lTree x8lTree0 = new X8lTree();
      // Undeclared exception!
      try { 
        x8lTree0.applyToAllNodes((Function<AbstractTreeNode, TextNode>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument for @NotNull parameter 'function' of com/xenoamess/x8l/X8lTree.applyToAllNodes must not be null
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        X8lTree.addToLanguageDealerList((LanguageDealer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument for @NotNull parameter 'languageDealer' of com/xenoamess/x8l/X8lTree.addToLanguageDealerList must not be null
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      LanguageDealer languageDealer0 = new LanguageDealer();
      X8lTree.addToLanguageDealerList(languageDealer0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      X8lTree x8lTree0 = X8lTree.load("");
      // Undeclared exception!
      try { 
        x8lTree0.setLanguageDealer((LanguageDealer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument for @NotNull parameter 'languageDealer' of com/xenoamess/x8l/X8lTree.setLanguageDealer must not be null
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      // Undeclared exception!
      try { 
        X8lTree.load((InputStream) pushbackInputStream0, (List<LanguageDealer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument for @NotNull parameter 'possibleDealerList' of com/xenoamess/x8l/X8lTree.load must not be null
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      List<LanguageDealer> list0 = X8lTree.getLanguageDealerListCopy();
      // Undeclared exception!
      try { 
        X8lTree.load((InputStream) null, list0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument for @NotNull parameter 'inputStream' of com/xenoamess/x8l/X8lTree.load must not be null
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      List<LanguageDealer> list0 = X8lTree.getLanguageDealerListCopy();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      X8lTree x8lTree0 = X8lTree.load((InputStream) byteArrayInputStream0, list0);
      assertNotNull(x8lTree0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 240);
      // Undeclared exception!
      try { 
        X8lTree.load((Reader) pipedReader0, (LanguageDealer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument for @NotNull parameter 'dealer' of com/xenoamess/x8l/X8lTree.load must not be null
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      LanguageDealer languageDealer0 = new LanguageDealer();
      // Undeclared exception!
      try { 
        X8lTree.load((Reader) null, languageDealer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument for @NotNull parameter 'reader' of com/xenoamess/x8l/X8lTree.load must not be null
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      MockFile mockFile0 = new MockFile("x8lDataBeanFieldScheme");
      Path path0 = mockFile0.toPath();
      // Undeclared exception!
      try { 
        X8lTree.load(path0, (List<LanguageDealer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument for @NotNull parameter 'possibleDealerList' of com/xenoamess/x8l/X8lTree.load must not be null
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      MockFile mockFile0 = new MockFile((File) null, "");
      Path path0 = mockFile0.toPath();
      try { 
        X8lTree.load(path0);
        fail("Expecting exception: AccessDeniedException");
      
      } catch(AccessDeniedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
      try { 
        X8lTree.transcodeText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument for @NotNull parameter 'originalString' of com/xenoamess/x8l/X8lTree.transcodeText must not be null
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      // Undeclared exception!
      try { 
        X8lTree.load((FileObject) null, (List<LanguageDealer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument for @NotNull parameter 'possibleDealerList' of com/xenoamess/x8l/X8lTree.load must not be null
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      List<LanguageDealer> list0 = X8lTree.getLanguageDealerListCopy();
      try { 
        X8lTree.load((FileObject) null, list0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // null
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      MockFile mockFile0 = new MockFile("setLanguageDealer", "setLanguageDealer");
      // Undeclared exception!
      try { 
        X8lTree.load((File) mockFile0, (LanguageDealer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument for @NotNull parameter 'dealer' of com/xenoamess/x8l/X8lTree.load must not be null
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      // Undeclared exception!
      try { 
        X8lTree.transcodeKey((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument for @NotNull parameter 'originalString' of com/xenoamess/x8l/X8lTree.transcodeKey must not be null
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      File file0 = MockFile.createTempFile("applyToAllNodes", "xFZtY*(sG");
      File file1 = MockFile.createTempFile("applyToAllNodes", "applyToAllNodes", file0);
      X8lTree x8lTree0 = X8lTree.load(file1);
      // Undeclared exception!
      try { 
        X8lTree.save((OutputStream) null, x8lTree0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument for @NotNull parameter 'outputStream' of com/xenoamess/x8l/X8lTree.save must not be null
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      X8lTree x8lTree0 = X8lTree.load(">5yS$Yz4UK[1OG\"E");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("xsd", false);
      X8lTree.save((OutputStream) mockFileOutputStream0, x8lTree0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      MockFile mockFile0 = new MockFile("yVt}4vTr=xuP");
      Path path0 = mockFile0.toPath();
      // Undeclared exception!
      try { 
        X8lTree.load(path0, (LanguageDealer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument for @NotNull parameter 'dealer' of com/xenoamess/x8l/X8lTree.load must not be null
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      LanguageDealer languageDealer0 = new LanguageDealer();
      MockFile mockFile0 = new MockFile("x8l");
      Path path0 = mockFile0.toPath();
      try { 
        X8lTree.load(path0, languageDealer0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // x8l
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
      try { 
        X8lTree.load((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument for @NotNull parameter 'string' of com/xenoamess/x8l/X8lTree.load must not be null
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      X8lTree x8lTree0 = X8lTree.load(">5yS$Yz4UK[1OG\"E");
      // Undeclared exception!
      try { 
        x8lTree0.write((Writer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument for @NotNull parameter 'writer' of com/xenoamess/x8l/X8lTree.write must not be null
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      // Undeclared exception!
      try { 
        X8lTree.transcodeValue((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument for @NotNull parameter 'originalString' of com/xenoamess/x8l/X8lTree.transcodeValue must not be null
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      // Undeclared exception!
      try { 
        X8lTree.load((InputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument for @NotNull parameter 'inputStream' of com/xenoamess/x8l/X8lTree.load must not be null
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      // Undeclared exception!
      try { 
        X8lTree.save((Path) null, (X8lTree) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument for @NotNull parameter 'x8lTree' of com/xenoamess/x8l/X8lTree.save must not be null
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT", "");
      File file0 = MockFile.createTempFile("ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT", "ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT", (File) mockFile0);
      LanguageDealer languageDealer0 = new LanguageDealer();
      X8lTree x8lTree0 = X8lTree.load(file0, languageDealer0);
      Path path0 = mockFile0.toPath();
      try { 
        X8lTree.save(path0, x8lTree0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // F:\\workspace\\x8l\\ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0);
      // Undeclared exception!
      try { 
        X8lTree.save((Writer) bufferedWriter0, (X8lTree) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument for @NotNull parameter 'x8lTree' of com/xenoamess/x8l/X8lTree.save must not be null
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      X8lTree x8lTree0 = X8lTree.load(">5yS$Yz4UK[1OG\"E");
      // Undeclared exception!
      try { 
        X8lTree.save((Writer) null, x8lTree0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument for @NotNull parameter 'writer' of com/xenoamess/x8l/X8lTree.save must not be null
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      X8lTree x8lTree0 = X8lTree.load(", array size ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("json");
      X8lTree.save((Writer) mockPrintWriter0, x8lTree0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      X8lTree x8lTree0 = new X8lTree();
      StringWriter stringWriter0 = new StringWriter(110);
      // Undeclared exception!
      try { 
        x8lTree0.write((Writer) stringWriter0, (LanguageDealer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument for @NotNull parameter 'languageDealer' of com/xenoamess/x8l/X8lTree.write must not be null
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      X8lTree x8lTree0 = new X8lTree();
      LanguageDealer languageDealer0 = new LanguageDealer();
      // Undeclared exception!
      try { 
        x8lTree0.write((Writer) null, languageDealer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument for @NotNull parameter 'writer' of com/xenoamess/x8l/X8lTree.write must not be null
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      // Undeclared exception!
      try { 
        X8lTree.save((X8lTree) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument for @NotNull parameter 'x8lTree' of com/xenoamess/x8l/X8lTree.save must not be null
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      // Undeclared exception!
      try { 
        X8lTree.load("5?]", (List<LanguageDealer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument for @NotNull parameter 'possibleDealerList' of com/xenoamess/x8l/X8lTree.load must not be null
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      LinkedList<LanguageDealer> linkedList0 = new LinkedList<LanguageDealer>();
      // Undeclared exception!
      try { 
        X8lTree.load((String) null, (List<LanguageDealer>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument for @NotNull parameter 'string' of com/xenoamess/x8l/X8lTree.load must not be null
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      // Undeclared exception!
      try { 
        X8lTree.load((FileObject) null, (LanguageDealer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument for @NotNull parameter 'dealer' of com/xenoamess/x8l/X8lTree.load must not be null
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      FileType fileType0 = FileType.FOLDER;
      VirtualFileName virtualFileName0 = new VirtualFileName("", "vqV<q-rV#IMJ~m/9\"e(", fileType0);
      LayeredFileName layeredFileName0 = new LayeredFileName("", virtualFileName0, "objectOutputStream", fileType0);
      GenericURLFileName genericURLFileName0 = new GenericURLFileName((String) null, "j[[cd_d|c7", 414, 414, "cxX", "objectOutputStream", "WMzPDiZY=C", fileType0, (String) null);
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FtpsFileSystem ftpsFileSystem0 = new FtpsFileSystem(genericURLFileName0, (FtpClient) null, fileSystemOptions0);
      DelegateFileObject<FtpsFileSystem> delegateFileObject0 = new DelegateFileObject<FtpsFileSystem>(layeredFileName0, ftpsFileSystem0, (FileObject) null);
      OnCallRefreshFileObject onCallRefreshFileObject0 = new OnCallRefreshFileObject(delegateFileObject0);
      LanguageDealer languageDealer0 = new LanguageDealer();
      try { 
        X8lTree.load((FileObject) onCallRefreshFileObject0, languageDealer0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // org.apache.commons.vfs2.cache.OnCallRefreshFileObject@0000000008
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(26);
      X8lTree x8lTree0 = null;
      try {
        x8lTree0 = new X8lTree(pipedReader0, (LanguageDealer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument for @NotNull parameter 'languageDealer' of com/xenoamess/x8l/X8lTree.<init> must not be null
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      // Undeclared exception!
      try { 
        X8lTree.suspectDealer("@$!(nf#", (List<LanguageDealer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument for @NotNull parameter 'originalList' of com/xenoamess/x8l/X8lTree.suspectDealer must not be null
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      List<LanguageDealer> list0 = X8lTree.getLanguageDealerListCopy();
      // Undeclared exception!
      try { 
        X8lTree.suspectDealer((String) null, list0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument for @NotNull parameter 'nameString' of com/xenoamess/x8l/X8lTree.suspectDealer must not be null
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      MockFile mockFile0 = new MockFile("x8l", "");
      // Undeclared exception!
      try { 
        X8lTree.load((File) mockFile0, (List<LanguageDealer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument for @NotNull parameter 'possibleDealerList' of com/xenoamess/x8l/X8lTree.load must not be null
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      // Undeclared exception!
      try { 
        X8lTree.load((Reader) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument for @NotNull parameter 'reader' of com/xenoamess/x8l/X8lTree.load must not be null
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(123);
      try { 
        X8lTree.load((Reader) pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      X8lTree x8lTree0 = new X8lTree();
      X8lDataBeanFieldScheme x8lDataBeanFieldScheme0 = X8lDataBeanFieldScheme.X8LPATH;
      // Undeclared exception!
      try { 
        x8lTree0.fetch(x8lDataBeanFieldScheme0, (String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument for @NotNull parameter 'x8lPaths' of com/xenoamess/x8l/X8lTree.fetch must not be null
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      X8lTree x8lTree0 = X8lTree.load("jx2|5S");
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        x8lTree0.fetch((X8lDataBeanFieldScheme) null, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument for @NotNull parameter 'x8lDataBeanFieldScheme' of com/xenoamess/x8l/X8lTree.fetch must not be null
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      X8lTree x8lTree0 = X8lTree.load("jx2|5S");
      X8lDataBeanFieldScheme x8lDataBeanFieldScheme0 = X8lDataBeanFieldScheme.X8LPATH;
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        x8lTree0.fetch(x8lDataBeanFieldScheme0, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument for @NotNull parameter 'x8lPath' of com/xenoamess/x8l/databind/x8lpath/X8lPathUtil.fetch must not be null
         //
         verifyException("com.xenoamess.x8l.databind.x8lpath.X8lPathUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      // Undeclared exception!
      try { 
        X8lTree.save((FileObject) null, (X8lTree) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument for @NotNull parameter 'x8lTree' of com/xenoamess/x8l/X8lTree.save must not be null
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      X8lTree x8lTree0 = new X8lTree();
      try { 
        X8lTree.save((FileObject) null, x8lTree0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // null
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      LanguageDealer languageDealer0 = new LanguageDealer();
      X8lTree x8lTree0 = X8lTree.load("", languageDealer0);
      X8lDataBeanFieldScheme x8lDataBeanFieldScheme0 = X8lDataBeanFieldScheme.X8LPATH;
      // Undeclared exception!
      try { 
        x8lTree0.fetch(x8lDataBeanFieldScheme0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument for @NotNull parameter 'x8lPath' of com/xenoamess/x8l/X8lTree.fetch must not be null
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      LanguageDealer languageDealer0 = new LanguageDealer();
      X8lTree x8lTree0 = new X8lTree(stringReader0, languageDealer0);
      // Undeclared exception!
      try { 
        x8lTree0.fetch((X8lDataBeanFieldScheme) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument for @NotNull parameter 'x8lDataBeanFieldScheme' of com/xenoamess/x8l/X8lTree.fetch must not be null
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      LanguageDealer languageDealer0 = new LanguageDealer();
      X8lTree x8lTree0 = X8lTree.load((InputStream) sequenceInputStream0, languageDealer0);
      X8lDataBeanFieldScheme x8lDataBeanFieldScheme0 = X8lDataBeanFieldScheme.XPATH;
      // Undeclared exception!
      try { 
        x8lTree0.fetch(x8lDataBeanFieldScheme0, "");
        fail("Expecting exception: NotImplementedException");
      
      } catch(NotImplementedException e) {
         //
         // XPATH is not implemented yet
         //
         verifyException("com.xenoamess.x8l.AbstractTreeNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      X8lTree x8lTree0 = new X8lTree();
      PipedReader pipedReader0 = new PipedReader(1015);
      // Undeclared exception!
      try { 
        x8lTree0.read((Reader) pipedReader0, (LanguageDealer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument for @NotNull parameter 'languageDealer' of com/xenoamess/x8l/X8lTree.read must not be null
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      LanguageDealer languageDealer0 = new LanguageDealer();
      X8lTree x8lTree0 = new X8lTree((Reader) null, languageDealer0);
      // Undeclared exception!
      try { 
        x8lTree0.read((Reader) null, languageDealer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument for @NotNull parameter 'reader' of com/xenoamess/x8l/X8lTree.read must not be null
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      X8lTree x8lTree0 = X8lTree.load(">5yS$Yz4UK[1OG\"E");
      // Undeclared exception!
      try { 
        x8lTree0.read((Reader) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument for @NotNull parameter 'reader' of com/xenoamess/x8l/X8lTree.read must not be null
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      // Undeclared exception!
      try { 
        X8lTree.load((Reader) pipedReader0, (List<LanguageDealer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument for @NotNull parameter 'possibleDealerList' of com/xenoamess/x8l/X8lTree.load must not be null
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      List<LanguageDealer> list0 = X8lTree.getLanguageDealerListCopy();
      // Undeclared exception!
      try { 
        X8lTree.load((Reader) null, list0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument for @NotNull parameter 'reader' of com/xenoamess/x8l/X8lTree.load must not be null
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      File file0 = MockFile.createTempFile("]=9LEby`-{yN", "]=9LEby`-{yN");
      // Undeclared exception!
      try { 
        X8lTree.save(file0, (X8lTree) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument for @NotNull parameter 'x8lTree' of com/xenoamess/x8l/X8lTree.save must not be null
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      X8lTree x8lTree0 = X8lTree.load("]Q7uN:");
      MockFile mockFile0 = new MockFile("xml", "6B(Tp}\"r");
      X8lTree.save((File) mockFile0, x8lTree0);
      assertEquals(6L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      // Undeclared exception!
      try { 
        X8lTree.untranscode((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument for @NotNull parameter 'transcodedString' of com/xenoamess/x8l/X8lTree.untranscode must not be null
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      // Undeclared exception!
      try { 
        X8lTree.transcodeComment((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument for @NotNull parameter 'originalString' of com/xenoamess/x8l/X8lTree.transcodeComment must not be null
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = X8lTree.transcodeComment("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      X8lTree x8lTree0 = new X8lTree();
      // Undeclared exception!
      try { 
        x8lTree0.fetch((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument for @NotNull parameter 'x8lPath' of com/xenoamess/x8l/X8lTree.fetch must not be null
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      File file0 = MockFile.createTempFile("applyToAllNodes", "xFZtY*(sG");
      File file1 = MockFile.createTempFile("applyToAllNodes", "applyToAllNodes", file0);
      X8lTree x8lTree0 = X8lTree.load(file1);
      // Undeclared exception!
      try { 
        x8lTree0.fetch("v;]aJS");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"v;\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      X8lTree x8lTree0 = X8lTree.load(">5yS$Yz4UK[1OG\"E");
      X8lDataBeanFieldScheme x8lDataBeanFieldScheme0 = X8lDataBeanFieldScheme.X8LPATH;
      Class<RootNode> class0 = RootNode.class;
      // Undeclared exception!
      try { 
        x8lTree0.fetch(x8lDataBeanFieldScheme0, (String) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument for @NotNull parameter 'x8lPath' of com/xenoamess/x8l/X8lTree.fetch must not be null
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      // Undeclared exception!
      try { 
        X8lTree.load("y)nyc}a#Zy", (LanguageDealer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument for @NotNull parameter 'dealer' of com/xenoamess/x8l/X8lTree.load must not be null
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      // Undeclared exception!
      try { 
        X8lTree.load((String) null, (LanguageDealer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument for @NotNull parameter 'string' of com/xenoamess/x8l/X8lTree.load must not be null
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      X8lTree x8lTree0 = new X8lTree();
      // Undeclared exception!
      try { 
        x8lTree0.read((LanguageDealer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument for @NotNull parameter 'languageDealer' of com/xenoamess/x8l/X8lTree.read must not be null
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      X8lTree x8lTree0 = X8lTree.load("(f>5yS$YzUK[1OG\"E");
      LanguageDealer languageDealer0 = new LanguageDealer();
      x8lTree0.read(languageDealer0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      // Undeclared exception!
      try { 
        X8lTree.load((InputStream) pipedInputStream0, (LanguageDealer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument for @NotNull parameter 'dealer' of com/xenoamess/x8l/X8lTree.load must not be null
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      // Undeclared exception!
      try { 
        X8lTree.load((InputStream) null, (LanguageDealer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument for @NotNull parameter 'inputStream' of com/xenoamess/x8l/X8lTree.load must not be null
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(45);
      X8lTree x8lTree0 = null;
      try {
        x8lTree0 = new X8lTree(pipedReader0, (LanguageDealer) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument for @NotNull parameter 'languageDealer' of com/xenoamess/x8l/X8lTree.<init> must not be null
         //
         verifyException("com.xenoamess.x8l.X8lTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      X8lTree x8lTree0 = new X8lTree();
      x8lTree0.hashCode();
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      LanguageDealer languageDealer0 = new LanguageDealer();
      X8lTree x8lTree0 = new X8lTree((Reader) null, languageDealer0, false);
      x8lTree0.show();
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      X8lTree x8lTree0 = X8lTree.load("@NotNull method s.s must not return null");
      x8lTree0.clear();
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 988, 60);
      X8lTree x8lTree0 = X8lTree.load((InputStream) byteArrayInputStream0);
      assertNotNull(x8lTree0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      LanguageDealer languageDealer0 = new LanguageDealer();
      X8lTree x8lTree0 = X8lTree.load((InputStream) sequenceInputStream0, languageDealer0);
      X8lTree x8lTree1 = new X8lTree(x8lTree0);
      assertTrue(x8lTree1.equals((Object)x8lTree0));
  }
}
